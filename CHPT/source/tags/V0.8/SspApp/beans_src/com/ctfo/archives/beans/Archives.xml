<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="Archives">
  <typeAlias alias="dynamicSqlParameter" type="com.ctfo.local.obj.DynamicSqlParameter" />
  <resultMap class="com.ctfo.archives.beans.Archives" id="Archives">
    <!--
      WARNING - This element is automatically generated by Abator for iBATIS, do not modify.
      This element was generated on Mon Mar 24 16:46:46 CST 2014.
    -->
    <result column="com_id" property="comId" jdbcType="VARCHAR" />
    <result column="com_name" property="comName" jdbcType="VARCHAR" />
    <result column="regist_time" jdbcType="BIGINT" property="registTime" nullValue="0"/>
    <result column="valid_date" jdbcType="BIGINT" property="validDate" nullValue="0"/>
    <result column="setbook_name" property="setbookName" jdbcType="VARCHAR" />
    <result column="create_time" jdbcType="BIGINT" property="createTime" nullValue="0" />
    <result column="total" property="total" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="columns">
	accessory_id, accessory_name, accessory_type, accessory_details, remarks, maintain_id,
      enable_flag
  </sql>
  <sql id="where">
    WHERE 1=1
  </sql> 
  <sql id="where_param">
    <include refid="where" />
    <include refid="like_WHERE" />
    <include refid="equal_WHERE" />
  </sql>
  <sql id="equal_WHERE">
    <isNotNull prepend="AND" property="equal.registerTimeStart">
        <![CDATA[(#equal.registerTimeStart:VARCHAR# <= si.apply_time )]]>
    </isNotNull>
    <isNotNull prepend="AND" property="equal.registertTimeEnd">
        <![CDATA[(#equal.registertTimeEnd:VARCHAR# >= si.apply_time )]]>
    </isNotNull>
    <isNotNull prepend="AND" property="equal.validTimeStart">
        <![CDATA[(#equal.validTimeStart:VARCHAR# <= bo.create_time )]]>
    </isNotNull>
    <isNotNull prepend="AND" property="equal.validTimeEnd">
        <![CDATA[(#equal.validTimeEnd:VARCHAR# >= bo.create_time )]]>
    </isNotNull>    
  </sql> 
  <sql id="like_WHERE">
  	<isNotNull prepend="AND" property="like.comName">
      fcom.COM_NAME like CONCAT('%',#like.comName:VARCHAR#,'%')
    </isNotNull>
  	<isNotNull prepend="AND" property="like.setbookName">
      bo.SETBOOK_NAME like CONCAT('%',#like.setbookName:VARCHAR#,'%')
    </isNotNull>    
  </sql> 
  <select id="countParam" parameterClass="dynamicSqlParameter" resultClass="int">
	SELECT COUNT(1) FROM
	(SELECT 
	  fcom.com_id,
	  fcom.com_name,
	  si.apply_time AS regist_time,
	  si.protocol_expires_time AS valid_date,
	  bo.setbook_name,
	  bo.create_time,
	  IFNULL(us.total, '0') AS total
	FROM
	  (SELECT 
	    IF(is_total_company = 1,com.com_id,com.parent_id) ent_id,com.*
	  FROM
	    tb_company com) fcom
	  LEFT JOIN tb_signing_info si 
	    ON fcom.ent_id = si.ser_station_id
	  LEFT JOIN sys_setbook bo
	    ON fcom.ser_station_id = bo.ser_station_id 
	  LEFT JOIN 
	  (SELECT COUNT(su.user_id) total,su.set_book_id FROM sys_user su) us
	    ON bo.set_book_id = us.set_book_id
	    <include refid="where_param" />
	    ) BB 
  </select>
  <select id="selectPageForParam" parameterClass="dynamicSqlParameter" resultMap="Archives">
	SELECT BB.* FROM 
    (SELECT 
      fcom.com_id,
	  fcom.com_name,
	  si.apply_time AS regist_time,
	  si.protocol_expires_time AS valid_date,
	  bo.setbook_name,
	  bo.create_time,
	  IFNULL(us.total, '0') AS total
	FROM
	  (SELECT 
	    IF(is_total_company = 1,com.com_id,com.parent_id) ent_id,com.*
	  FROM
	    tb_company com) fcom
	  LEFT JOIN tb_signing_info si 
	    ON fcom.ent_id = si.ser_station_id
	  LEFT JOIN sys_setbook bo
	    ON fcom.ser_station_id = bo.ser_station_id 
	  LEFT JOIN 
	  (SELECT COUNT(su.user_id) total,su.set_book_id FROM sys_user su) us
	    ON bo.set_book_id = us.set_book_id
	    <include refid="where_param" />
	    ORDER BY regist_time DESC
    ) BB
    LIMIT #startNum#,#pagesize#
  </select>
  
</sqlMap>