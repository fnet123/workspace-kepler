/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ctfo.sectionspeed.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RoadSpeedInfo implements org.apache.thrift.TBase<RoadSpeedInfo, RoadSpeedInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoadSpeedInfo");

  private static final org.apache.thrift.protocol.TField RID_FIELD_DESC = new org.apache.thrift.protocol.TField("rid", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField RDNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("rdnum", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField POSTCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("postcode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FC_FIELD_DESC = new org.apache.thrift.protocol.TField("fc", org.apache.thrift.protocol.TType.BYTE, (short)4);
  private static final org.apache.thrift.protocol.TField DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("dir", org.apache.thrift.protocol.TType.BYTE, (short)5);
  private static final org.apache.thrift.protocol.TField TOLL_FIELD_DESC = new org.apache.thrift.protocol.TField("toll", org.apache.thrift.protocol.TType.BYTE, (short)6);
  private static final org.apache.thrift.protocol.TField RSTRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("rstruct", org.apache.thrift.protocol.TType.BYTE, (short)7);
  private static final org.apache.thrift.protocol.TField NR_FIELD_DESC = new org.apache.thrift.protocol.TField("nr", org.apache.thrift.protocol.TType.BYTE, (short)8);
  private static final org.apache.thrift.protocol.TField STNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stname", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField BYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("byname", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STANDARDV_FIELD_DESC = new org.apache.thrift.protocol.TField("standardv", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TRUCKV_FIELD_DESC = new org.apache.thrift.protocol.TField("truckv", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField COACHV_FIELD_DESC = new org.apache.thrift.protocol.TField("coachv", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField POINTS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pointsList", org.apache.thrift.protocol.TType.LIST, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RoadSpeedInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RoadSpeedInfoTupleSchemeFactory());
  }

  public long rid; // optional
  public long rdnum; // optional
  public int postcode; // optional
  public byte fc; // optional
  public byte dir; // optional
  public byte toll; // optional
  public byte rstruct; // optional
  public byte nr; // optional
  public String stname; // optional
  public String byname; // optional
  public String standardv; // optional
  public String truckv; // optional
  public String coachv; // optional
  public List<Point> pointsList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RID((short)1, "rid"),
    RDNUM((short)2, "rdnum"),
    POSTCODE((short)3, "postcode"),
    FC((short)4, "fc"),
    DIR((short)5, "dir"),
    TOLL((short)6, "toll"),
    RSTRUCT((short)7, "rstruct"),
    NR((short)8, "nr"),
    STNAME((short)9, "stname"),
    BYNAME((short)10, "byname"),
    STANDARDV((short)11, "standardv"),
    TRUCKV((short)12, "truckv"),
    COACHV((short)13, "coachv"),
    POINTS_LIST((short)14, "pointsList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RID
          return RID;
        case 2: // RDNUM
          return RDNUM;
        case 3: // POSTCODE
          return POSTCODE;
        case 4: // FC
          return FC;
        case 5: // DIR
          return DIR;
        case 6: // TOLL
          return TOLL;
        case 7: // RSTRUCT
          return RSTRUCT;
        case 8: // NR
          return NR;
        case 9: // STNAME
          return STNAME;
        case 10: // BYNAME
          return BYNAME;
        case 11: // STANDARDV
          return STANDARDV;
        case 12: // TRUCKV
          return TRUCKV;
        case 13: // COACHV
          return COACHV;
        case 14: // POINTS_LIST
          return POINTS_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RID_ISSET_ID = 0;
  private static final int __RDNUM_ISSET_ID = 1;
  private static final int __POSTCODE_ISSET_ID = 2;
  private static final int __FC_ISSET_ID = 3;
  private static final int __DIR_ISSET_ID = 4;
  private static final int __TOLL_ISSET_ID = 5;
  private static final int __RSTRUCT_ISSET_ID = 6;
  private static final int __NR_ISSET_ID = 7;
  private BitSet __isset_bit_vector = new BitSet(8);
  private _Fields optionals[] = {_Fields.RID,_Fields.RDNUM,_Fields.POSTCODE,_Fields.FC,_Fields.DIR,_Fields.TOLL,_Fields.RSTRUCT,_Fields.NR,_Fields.STNAME,_Fields.BYNAME,_Fields.STANDARDV,_Fields.TRUCKV,_Fields.COACHV,_Fields.POINTS_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RID, new org.apache.thrift.meta_data.FieldMetaData("rid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RDNUM, new org.apache.thrift.meta_data.FieldMetaData("rdnum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSTCODE, new org.apache.thrift.meta_data.FieldMetaData("postcode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FC, new org.apache.thrift.meta_data.FieldMetaData("fc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.DIR, new org.apache.thrift.meta_data.FieldMetaData("dir", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TOLL, new org.apache.thrift.meta_data.FieldMetaData("toll", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.RSTRUCT, new org.apache.thrift.meta_data.FieldMetaData("rstruct", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.NR, new org.apache.thrift.meta_data.FieldMetaData("nr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.STNAME, new org.apache.thrift.meta_data.FieldMetaData("stname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BYNAME, new org.apache.thrift.meta_data.FieldMetaData("byname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STANDARDV, new org.apache.thrift.meta_data.FieldMetaData("standardv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRUCKV, new org.apache.thrift.meta_data.FieldMetaData("truckv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COACHV, new org.apache.thrift.meta_data.FieldMetaData("coachv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINTS_LIST, new org.apache.thrift.meta_data.FieldMetaData("pointsList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Point.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoadSpeedInfo.class, metaDataMap);
  }

  public RoadSpeedInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoadSpeedInfo(RoadSpeedInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.rid = other.rid;
    this.rdnum = other.rdnum;
    this.postcode = other.postcode;
    this.fc = other.fc;
    this.dir = other.dir;
    this.toll = other.toll;
    this.rstruct = other.rstruct;
    this.nr = other.nr;
    if (other.isSetStname()) {
      this.stname = other.stname;
    }
    if (other.isSetByname()) {
      this.byname = other.byname;
    }
    if (other.isSetStandardv()) {
      this.standardv = other.standardv;
    }
    if (other.isSetTruckv()) {
      this.truckv = other.truckv;
    }
    if (other.isSetCoachv()) {
      this.coachv = other.coachv;
    }
    if (other.isSetPointsList()) {
      List<Point> __this__pointsList = new ArrayList<Point>();
      for (Point other_element : other.pointsList) {
        __this__pointsList.add(new Point(other_element));
      }
      this.pointsList = __this__pointsList;
    }
  }

  public RoadSpeedInfo deepCopy() {
    return new RoadSpeedInfo(this);
  }

  @Override
  public void clear() {
    setRidIsSet(false);
    this.rid = 0;
    setRdnumIsSet(false);
    this.rdnum = 0;
    setPostcodeIsSet(false);
    this.postcode = 0;
    setFcIsSet(false);
    this.fc = 0;
    setDirIsSet(false);
    this.dir = 0;
    setTollIsSet(false);
    this.toll = 0;
    setRstructIsSet(false);
    this.rstruct = 0;
    setNrIsSet(false);
    this.nr = 0;
    this.stname = null;
    this.byname = null;
    this.standardv = null;
    this.truckv = null;
    this.coachv = null;
    this.pointsList = null;
  }

  public long getRid() {
    return this.rid;
  }

  public RoadSpeedInfo setRid(long rid) {
    this.rid = rid;
    setRidIsSet(true);
    return this;
  }

  public void unsetRid() {
    __isset_bit_vector.clear(__RID_ISSET_ID);
  }

  /** Returns true if field rid is set (has been assigned a value) and false otherwise */
  public boolean isSetRid() {
    return __isset_bit_vector.get(__RID_ISSET_ID);
  }

  public void setRidIsSet(boolean value) {
    __isset_bit_vector.set(__RID_ISSET_ID, value);
  }

  public long getRdnum() {
    return this.rdnum;
  }

  public RoadSpeedInfo setRdnum(long rdnum) {
    this.rdnum = rdnum;
    setRdnumIsSet(true);
    return this;
  }

  public void unsetRdnum() {
    __isset_bit_vector.clear(__RDNUM_ISSET_ID);
  }

  /** Returns true if field rdnum is set (has been assigned a value) and false otherwise */
  public boolean isSetRdnum() {
    return __isset_bit_vector.get(__RDNUM_ISSET_ID);
  }

  public void setRdnumIsSet(boolean value) {
    __isset_bit_vector.set(__RDNUM_ISSET_ID, value);
  }

  public int getPostcode() {
    return this.postcode;
  }

  public RoadSpeedInfo setPostcode(int postcode) {
    this.postcode = postcode;
    setPostcodeIsSet(true);
    return this;
  }

  public void unsetPostcode() {
    __isset_bit_vector.clear(__POSTCODE_ISSET_ID);
  }

  /** Returns true if field postcode is set (has been assigned a value) and false otherwise */
  public boolean isSetPostcode() {
    return __isset_bit_vector.get(__POSTCODE_ISSET_ID);
  }

  public void setPostcodeIsSet(boolean value) {
    __isset_bit_vector.set(__POSTCODE_ISSET_ID, value);
  }

  public byte getFc() {
    return this.fc;
  }

  public RoadSpeedInfo setFc(byte fc) {
    this.fc = fc;
    setFcIsSet(true);
    return this;
  }

  public void unsetFc() {
    __isset_bit_vector.clear(__FC_ISSET_ID);
  }

  /** Returns true if field fc is set (has been assigned a value) and false otherwise */
  public boolean isSetFc() {
    return __isset_bit_vector.get(__FC_ISSET_ID);
  }

  public void setFcIsSet(boolean value) {
    __isset_bit_vector.set(__FC_ISSET_ID, value);
  }

  public byte getDir() {
    return this.dir;
  }

  public RoadSpeedInfo setDir(byte dir) {
    this.dir = dir;
    setDirIsSet(true);
    return this;
  }

  public void unsetDir() {
    __isset_bit_vector.clear(__DIR_ISSET_ID);
  }

  /** Returns true if field dir is set (has been assigned a value) and false otherwise */
  public boolean isSetDir() {
    return __isset_bit_vector.get(__DIR_ISSET_ID);
  }

  public void setDirIsSet(boolean value) {
    __isset_bit_vector.set(__DIR_ISSET_ID, value);
  }

  public byte getToll() {
    return this.toll;
  }

  public RoadSpeedInfo setToll(byte toll) {
    this.toll = toll;
    setTollIsSet(true);
    return this;
  }

  public void unsetToll() {
    __isset_bit_vector.clear(__TOLL_ISSET_ID);
  }

  /** Returns true if field toll is set (has been assigned a value) and false otherwise */
  public boolean isSetToll() {
    return __isset_bit_vector.get(__TOLL_ISSET_ID);
  }

  public void setTollIsSet(boolean value) {
    __isset_bit_vector.set(__TOLL_ISSET_ID, value);
  }

  public byte getRstruct() {
    return this.rstruct;
  }

  public RoadSpeedInfo setRstruct(byte rstruct) {
    this.rstruct = rstruct;
    setRstructIsSet(true);
    return this;
  }

  public void unsetRstruct() {
    __isset_bit_vector.clear(__RSTRUCT_ISSET_ID);
  }

  /** Returns true if field rstruct is set (has been assigned a value) and false otherwise */
  public boolean isSetRstruct() {
    return __isset_bit_vector.get(__RSTRUCT_ISSET_ID);
  }

  public void setRstructIsSet(boolean value) {
    __isset_bit_vector.set(__RSTRUCT_ISSET_ID, value);
  }

  public byte getNr() {
    return this.nr;
  }

  public RoadSpeedInfo setNr(byte nr) {
    this.nr = nr;
    setNrIsSet(true);
    return this;
  }

  public void unsetNr() {
    __isset_bit_vector.clear(__NR_ISSET_ID);
  }

  /** Returns true if field nr is set (has been assigned a value) and false otherwise */
  public boolean isSetNr() {
    return __isset_bit_vector.get(__NR_ISSET_ID);
  }

  public void setNrIsSet(boolean value) {
    __isset_bit_vector.set(__NR_ISSET_ID, value);
  }

  public String getStname() {
    return this.stname;
  }

  public RoadSpeedInfo setStname(String stname) {
    this.stname = stname;
    return this;
  }

  public void unsetStname() {
    this.stname = null;
  }

  /** Returns true if field stname is set (has been assigned a value) and false otherwise */
  public boolean isSetStname() {
    return this.stname != null;
  }

  public void setStnameIsSet(boolean value) {
    if (!value) {
      this.stname = null;
    }
  }

  public String getByname() {
    return this.byname;
  }

  public RoadSpeedInfo setByname(String byname) {
    this.byname = byname;
    return this;
  }

  public void unsetByname() {
    this.byname = null;
  }

  /** Returns true if field byname is set (has been assigned a value) and false otherwise */
  public boolean isSetByname() {
    return this.byname != null;
  }

  public void setBynameIsSet(boolean value) {
    if (!value) {
      this.byname = null;
    }
  }

  public String getStandardv() {
    return this.standardv;
  }

  public RoadSpeedInfo setStandardv(String standardv) {
    this.standardv = standardv;
    return this;
  }

  public void unsetStandardv() {
    this.standardv = null;
  }

  /** Returns true if field standardv is set (has been assigned a value) and false otherwise */
  public boolean isSetStandardv() {
    return this.standardv != null;
  }

  public void setStandardvIsSet(boolean value) {
    if (!value) {
      this.standardv = null;
    }
  }

  public String getTruckv() {
    return this.truckv;
  }

  public RoadSpeedInfo setTruckv(String truckv) {
    this.truckv = truckv;
    return this;
  }

  public void unsetTruckv() {
    this.truckv = null;
  }

  /** Returns true if field truckv is set (has been assigned a value) and false otherwise */
  public boolean isSetTruckv() {
    return this.truckv != null;
  }

  public void setTruckvIsSet(boolean value) {
    if (!value) {
      this.truckv = null;
    }
  }

  public String getCoachv() {
    return this.coachv;
  }

  public RoadSpeedInfo setCoachv(String coachv) {
    this.coachv = coachv;
    return this;
  }

  public void unsetCoachv() {
    this.coachv = null;
  }

  /** Returns true if field coachv is set (has been assigned a value) and false otherwise */
  public boolean isSetCoachv() {
    return this.coachv != null;
  }

  public void setCoachvIsSet(boolean value) {
    if (!value) {
      this.coachv = null;
    }
  }

  public int getPointsListSize() {
    return (this.pointsList == null) ? 0 : this.pointsList.size();
  }

  public java.util.Iterator<Point> getPointsListIterator() {
    return (this.pointsList == null) ? null : this.pointsList.iterator();
  }

  public void addToPointsList(Point elem) {
    if (this.pointsList == null) {
      this.pointsList = new ArrayList<Point>();
    }
    this.pointsList.add(elem);
  }

  public List<Point> getPointsList() {
    return this.pointsList;
  }

  public RoadSpeedInfo setPointsList(List<Point> pointsList) {
    this.pointsList = pointsList;
    return this;
  }

  public void unsetPointsList() {
    this.pointsList = null;
  }

  /** Returns true if field pointsList is set (has been assigned a value) and false otherwise */
  public boolean isSetPointsList() {
    return this.pointsList != null;
  }

  public void setPointsListIsSet(boolean value) {
    if (!value) {
      this.pointsList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RID:
      if (value == null) {
        unsetRid();
      } else {
        setRid((Long)value);
      }
      break;

    case RDNUM:
      if (value == null) {
        unsetRdnum();
      } else {
        setRdnum((Long)value);
      }
      break;

    case POSTCODE:
      if (value == null) {
        unsetPostcode();
      } else {
        setPostcode((Integer)value);
      }
      break;

    case FC:
      if (value == null) {
        unsetFc();
      } else {
        setFc((Byte)value);
      }
      break;

    case DIR:
      if (value == null) {
        unsetDir();
      } else {
        setDir((Byte)value);
      }
      break;

    case TOLL:
      if (value == null) {
        unsetToll();
      } else {
        setToll((Byte)value);
      }
      break;

    case RSTRUCT:
      if (value == null) {
        unsetRstruct();
      } else {
        setRstruct((Byte)value);
      }
      break;

    case NR:
      if (value == null) {
        unsetNr();
      } else {
        setNr((Byte)value);
      }
      break;

    case STNAME:
      if (value == null) {
        unsetStname();
      } else {
        setStname((String)value);
      }
      break;

    case BYNAME:
      if (value == null) {
        unsetByname();
      } else {
        setByname((String)value);
      }
      break;

    case STANDARDV:
      if (value == null) {
        unsetStandardv();
      } else {
        setStandardv((String)value);
      }
      break;

    case TRUCKV:
      if (value == null) {
        unsetTruckv();
      } else {
        setTruckv((String)value);
      }
      break;

    case COACHV:
      if (value == null) {
        unsetCoachv();
      } else {
        setCoachv((String)value);
      }
      break;

    case POINTS_LIST:
      if (value == null) {
        unsetPointsList();
      } else {
        setPointsList((List<Point>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RID:
      return Long.valueOf(getRid());

    case RDNUM:
      return Long.valueOf(getRdnum());

    case POSTCODE:
      return Integer.valueOf(getPostcode());

    case FC:
      return Byte.valueOf(getFc());

    case DIR:
      return Byte.valueOf(getDir());

    case TOLL:
      return Byte.valueOf(getToll());

    case RSTRUCT:
      return Byte.valueOf(getRstruct());

    case NR:
      return Byte.valueOf(getNr());

    case STNAME:
      return getStname();

    case BYNAME:
      return getByname();

    case STANDARDV:
      return getStandardv();

    case TRUCKV:
      return getTruckv();

    case COACHV:
      return getCoachv();

    case POINTS_LIST:
      return getPointsList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RID:
      return isSetRid();
    case RDNUM:
      return isSetRdnum();
    case POSTCODE:
      return isSetPostcode();
    case FC:
      return isSetFc();
    case DIR:
      return isSetDir();
    case TOLL:
      return isSetToll();
    case RSTRUCT:
      return isSetRstruct();
    case NR:
      return isSetNr();
    case STNAME:
      return isSetStname();
    case BYNAME:
      return isSetByname();
    case STANDARDV:
      return isSetStandardv();
    case TRUCKV:
      return isSetTruckv();
    case COACHV:
      return isSetCoachv();
    case POINTS_LIST:
      return isSetPointsList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RoadSpeedInfo)
      return this.equals((RoadSpeedInfo)that);
    return false;
  }

  public boolean equals(RoadSpeedInfo that) {
    if (that == null)
      return false;

    boolean this_present_rid = true && this.isSetRid();
    boolean that_present_rid = true && that.isSetRid();
    if (this_present_rid || that_present_rid) {
      if (!(this_present_rid && that_present_rid))
        return false;
      if (this.rid != that.rid)
        return false;
    }

    boolean this_present_rdnum = true && this.isSetRdnum();
    boolean that_present_rdnum = true && that.isSetRdnum();
    if (this_present_rdnum || that_present_rdnum) {
      if (!(this_present_rdnum && that_present_rdnum))
        return false;
      if (this.rdnum != that.rdnum)
        return false;
    }

    boolean this_present_postcode = true && this.isSetPostcode();
    boolean that_present_postcode = true && that.isSetPostcode();
    if (this_present_postcode || that_present_postcode) {
      if (!(this_present_postcode && that_present_postcode))
        return false;
      if (this.postcode != that.postcode)
        return false;
    }

    boolean this_present_fc = true && this.isSetFc();
    boolean that_present_fc = true && that.isSetFc();
    if (this_present_fc || that_present_fc) {
      if (!(this_present_fc && that_present_fc))
        return false;
      if (this.fc != that.fc)
        return false;
    }

    boolean this_present_dir = true && this.isSetDir();
    boolean that_present_dir = true && that.isSetDir();
    if (this_present_dir || that_present_dir) {
      if (!(this_present_dir && that_present_dir))
        return false;
      if (this.dir != that.dir)
        return false;
    }

    boolean this_present_toll = true && this.isSetToll();
    boolean that_present_toll = true && that.isSetToll();
    if (this_present_toll || that_present_toll) {
      if (!(this_present_toll && that_present_toll))
        return false;
      if (this.toll != that.toll)
        return false;
    }

    boolean this_present_rstruct = true && this.isSetRstruct();
    boolean that_present_rstruct = true && that.isSetRstruct();
    if (this_present_rstruct || that_present_rstruct) {
      if (!(this_present_rstruct && that_present_rstruct))
        return false;
      if (this.rstruct != that.rstruct)
        return false;
    }

    boolean this_present_nr = true && this.isSetNr();
    boolean that_present_nr = true && that.isSetNr();
    if (this_present_nr || that_present_nr) {
      if (!(this_present_nr && that_present_nr))
        return false;
      if (this.nr != that.nr)
        return false;
    }

    boolean this_present_stname = true && this.isSetStname();
    boolean that_present_stname = true && that.isSetStname();
    if (this_present_stname || that_present_stname) {
      if (!(this_present_stname && that_present_stname))
        return false;
      if (!this.stname.equals(that.stname))
        return false;
    }

    boolean this_present_byname = true && this.isSetByname();
    boolean that_present_byname = true && that.isSetByname();
    if (this_present_byname || that_present_byname) {
      if (!(this_present_byname && that_present_byname))
        return false;
      if (!this.byname.equals(that.byname))
        return false;
    }

    boolean this_present_standardv = true && this.isSetStandardv();
    boolean that_present_standardv = true && that.isSetStandardv();
    if (this_present_standardv || that_present_standardv) {
      if (!(this_present_standardv && that_present_standardv))
        return false;
      if (!this.standardv.equals(that.standardv))
        return false;
    }

    boolean this_present_truckv = true && this.isSetTruckv();
    boolean that_present_truckv = true && that.isSetTruckv();
    if (this_present_truckv || that_present_truckv) {
      if (!(this_present_truckv && that_present_truckv))
        return false;
      if (!this.truckv.equals(that.truckv))
        return false;
    }

    boolean this_present_coachv = true && this.isSetCoachv();
    boolean that_present_coachv = true && that.isSetCoachv();
    if (this_present_coachv || that_present_coachv) {
      if (!(this_present_coachv && that_present_coachv))
        return false;
      if (!this.coachv.equals(that.coachv))
        return false;
    }

    boolean this_present_pointsList = true && this.isSetPointsList();
    boolean that_present_pointsList = true && that.isSetPointsList();
    if (this_present_pointsList || that_present_pointsList) {
      if (!(this_present_pointsList && that_present_pointsList))
        return false;
      if (!this.pointsList.equals(that.pointsList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RoadSpeedInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RoadSpeedInfo typedOther = (RoadSpeedInfo)other;

    lastComparison = Boolean.valueOf(isSetRid()).compareTo(typedOther.isSetRid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rid, typedOther.rid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRdnum()).compareTo(typedOther.isSetRdnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRdnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rdnum, typedOther.rdnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPostcode()).compareTo(typedOther.isSetPostcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPostcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postcode, typedOther.postcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFc()).compareTo(typedOther.isSetFc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fc, typedOther.fc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDir()).compareTo(typedOther.isSetDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dir, typedOther.dir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToll()).compareTo(typedOther.isSetToll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toll, typedOther.toll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRstruct()).compareTo(typedOther.isSetRstruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRstruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rstruct, typedOther.rstruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNr()).compareTo(typedOther.isSetNr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nr, typedOther.nr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStname()).compareTo(typedOther.isSetStname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stname, typedOther.stname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByname()).compareTo(typedOther.isSetByname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byname, typedOther.byname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStandardv()).compareTo(typedOther.isSetStandardv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandardv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standardv, typedOther.standardv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTruckv()).compareTo(typedOther.isSetTruckv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTruckv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.truckv, typedOther.truckv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoachv()).compareTo(typedOther.isSetCoachv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoachv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coachv, typedOther.coachv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPointsList()).compareTo(typedOther.isSetPointsList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointsList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointsList, typedOther.pointsList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RoadSpeedInfo(");
    boolean first = true;

    if (isSetRid()) {
      sb.append("rid:");
      sb.append(this.rid);
      first = false;
    }
    if (isSetRdnum()) {
      if (!first) sb.append(", ");
      sb.append("rdnum:");
      sb.append(this.rdnum);
      first = false;
    }
    if (isSetPostcode()) {
      if (!first) sb.append(", ");
      sb.append("postcode:");
      sb.append(this.postcode);
      first = false;
    }
    if (isSetFc()) {
      if (!first) sb.append(", ");
      sb.append("fc:");
      sb.append(this.fc);
      first = false;
    }
    if (isSetDir()) {
      if (!first) sb.append(", ");
      sb.append("dir:");
      sb.append(this.dir);
      first = false;
    }
    if (isSetToll()) {
      if (!first) sb.append(", ");
      sb.append("toll:");
      sb.append(this.toll);
      first = false;
    }
    if (isSetRstruct()) {
      if (!first) sb.append(", ");
      sb.append("rstruct:");
      sb.append(this.rstruct);
      first = false;
    }
    if (isSetNr()) {
      if (!first) sb.append(", ");
      sb.append("nr:");
      sb.append(this.nr);
      first = false;
    }
    if (isSetStname()) {
      if (!first) sb.append(", ");
      sb.append("stname:");
      if (this.stname == null) {
        sb.append("null");
      } else {
        sb.append(this.stname);
      }
      first = false;
    }
    if (isSetByname()) {
      if (!first) sb.append(", ");
      sb.append("byname:");
      if (this.byname == null) {
        sb.append("null");
      } else {
        sb.append(this.byname);
      }
      first = false;
    }
    if (isSetStandardv()) {
      if (!first) sb.append(", ");
      sb.append("standardv:");
      if (this.standardv == null) {
        sb.append("null");
      } else {
        sb.append(this.standardv);
      }
      first = false;
    }
    if (isSetTruckv()) {
      if (!first) sb.append(", ");
      sb.append("truckv:");
      if (this.truckv == null) {
        sb.append("null");
      } else {
        sb.append(this.truckv);
      }
      first = false;
    }
    if (isSetCoachv()) {
      if (!first) sb.append(", ");
      sb.append("coachv:");
      if (this.coachv == null) {
        sb.append("null");
      } else {
        sb.append(this.coachv);
      }
      first = false;
    }
    if (isSetPointsList()) {
      if (!first) sb.append(", ");
      sb.append("pointsList:");
      if (this.pointsList == null) {
        sb.append("null");
      } else {
        sb.append(this.pointsList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoadSpeedInfoStandardSchemeFactory implements SchemeFactory {
    public RoadSpeedInfoStandardScheme getScheme() {
      return new RoadSpeedInfoStandardScheme();
    }
  }

  private static class RoadSpeedInfoStandardScheme extends StandardScheme<RoadSpeedInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoadSpeedInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rid = iprot.readI64();
              struct.setRidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RDNUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rdnum = iprot.readI64();
              struct.setRdnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POSTCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.postcode = iprot.readI32();
              struct.setPostcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FC
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.fc = iprot.readByte();
              struct.setFcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.dir = iprot.readByte();
              struct.setDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOLL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.toll = iprot.readByte();
              struct.setTollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RSTRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.rstruct = iprot.readByte();
              struct.setRstructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.nr = iprot.readByte();
              struct.setNrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stname = iprot.readString();
              struct.setStnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BYNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.byname = iprot.readString();
              struct.setBynameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STANDARDV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.standardv = iprot.readString();
              struct.setStandardvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRUCKV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.truckv = iprot.readString();
              struct.setTruckvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // COACHV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coachv = iprot.readString();
              struct.setCoachvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POINTS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.pointsList = new ArrayList<Point>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  Point _elem2; // required
                  _elem2 = new Point();
                  _elem2.read(iprot);
                  struct.pointsList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setPointsListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoadSpeedInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRid()) {
        oprot.writeFieldBegin(RID_FIELD_DESC);
        oprot.writeI64(struct.rid);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRdnum()) {
        oprot.writeFieldBegin(RDNUM_FIELD_DESC);
        oprot.writeI64(struct.rdnum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPostcode()) {
        oprot.writeFieldBegin(POSTCODE_FIELD_DESC);
        oprot.writeI32(struct.postcode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFc()) {
        oprot.writeFieldBegin(FC_FIELD_DESC);
        oprot.writeByte(struct.fc);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDir()) {
        oprot.writeFieldBegin(DIR_FIELD_DESC);
        oprot.writeByte(struct.dir);
        oprot.writeFieldEnd();
      }
      if (struct.isSetToll()) {
        oprot.writeFieldBegin(TOLL_FIELD_DESC);
        oprot.writeByte(struct.toll);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRstruct()) {
        oprot.writeFieldBegin(RSTRUCT_FIELD_DESC);
        oprot.writeByte(struct.rstruct);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNr()) {
        oprot.writeFieldBegin(NR_FIELD_DESC);
        oprot.writeByte(struct.nr);
        oprot.writeFieldEnd();
      }
      if (struct.stname != null) {
        if (struct.isSetStname()) {
          oprot.writeFieldBegin(STNAME_FIELD_DESC);
          oprot.writeString(struct.stname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.byname != null) {
        if (struct.isSetByname()) {
          oprot.writeFieldBegin(BYNAME_FIELD_DESC);
          oprot.writeString(struct.byname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.standardv != null) {
        if (struct.isSetStandardv()) {
          oprot.writeFieldBegin(STANDARDV_FIELD_DESC);
          oprot.writeString(struct.standardv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.truckv != null) {
        if (struct.isSetTruckv()) {
          oprot.writeFieldBegin(TRUCKV_FIELD_DESC);
          oprot.writeString(struct.truckv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.coachv != null) {
        if (struct.isSetCoachv()) {
          oprot.writeFieldBegin(COACHV_FIELD_DESC);
          oprot.writeString(struct.coachv);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pointsList != null) {
        if (struct.isSetPointsList()) {
          oprot.writeFieldBegin(POINTS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.pointsList.size()));
            for (Point _iter3 : struct.pointsList)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoadSpeedInfoTupleSchemeFactory implements SchemeFactory {
    public RoadSpeedInfoTupleScheme getScheme() {
      return new RoadSpeedInfoTupleScheme();
    }
  }

  private static class RoadSpeedInfoTupleScheme extends TupleScheme<RoadSpeedInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoadSpeedInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRid()) {
        optionals.set(0);
      }
      if (struct.isSetRdnum()) {
        optionals.set(1);
      }
      if (struct.isSetPostcode()) {
        optionals.set(2);
      }
      if (struct.isSetFc()) {
        optionals.set(3);
      }
      if (struct.isSetDir()) {
        optionals.set(4);
      }
      if (struct.isSetToll()) {
        optionals.set(5);
      }
      if (struct.isSetRstruct()) {
        optionals.set(6);
      }
      if (struct.isSetNr()) {
        optionals.set(7);
      }
      if (struct.isSetStname()) {
        optionals.set(8);
      }
      if (struct.isSetByname()) {
        optionals.set(9);
      }
      if (struct.isSetStandardv()) {
        optionals.set(10);
      }
      if (struct.isSetTruckv()) {
        optionals.set(11);
      }
      if (struct.isSetCoachv()) {
        optionals.set(12);
      }
      if (struct.isSetPointsList()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetRid()) {
        oprot.writeI64(struct.rid);
      }
      if (struct.isSetRdnum()) {
        oprot.writeI64(struct.rdnum);
      }
      if (struct.isSetPostcode()) {
        oprot.writeI32(struct.postcode);
      }
      if (struct.isSetFc()) {
        oprot.writeByte(struct.fc);
      }
      if (struct.isSetDir()) {
        oprot.writeByte(struct.dir);
      }
      if (struct.isSetToll()) {
        oprot.writeByte(struct.toll);
      }
      if (struct.isSetRstruct()) {
        oprot.writeByte(struct.rstruct);
      }
      if (struct.isSetNr()) {
        oprot.writeByte(struct.nr);
      }
      if (struct.isSetStname()) {
        oprot.writeString(struct.stname);
      }
      if (struct.isSetByname()) {
        oprot.writeString(struct.byname);
      }
      if (struct.isSetStandardv()) {
        oprot.writeString(struct.standardv);
      }
      if (struct.isSetTruckv()) {
        oprot.writeString(struct.truckv);
      }
      if (struct.isSetCoachv()) {
        oprot.writeString(struct.coachv);
      }
      if (struct.isSetPointsList()) {
        {
          oprot.writeI32(struct.pointsList.size());
          for (Point _iter4 : struct.pointsList)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoadSpeedInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.rid = iprot.readI64();
        struct.setRidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rdnum = iprot.readI64();
        struct.setRdnumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.postcode = iprot.readI32();
        struct.setPostcodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fc = iprot.readByte();
        struct.setFcIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dir = iprot.readByte();
        struct.setDirIsSet(true);
      }
      if (incoming.get(5)) {
        struct.toll = iprot.readByte();
        struct.setTollIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rstruct = iprot.readByte();
        struct.setRstructIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nr = iprot.readByte();
        struct.setNrIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stname = iprot.readString();
        struct.setStnameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.byname = iprot.readString();
        struct.setBynameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.standardv = iprot.readString();
        struct.setStandardvIsSet(true);
      }
      if (incoming.get(11)) {
        struct.truckv = iprot.readString();
        struct.setTruckvIsSet(true);
      }
      if (incoming.get(12)) {
        struct.coachv = iprot.readString();
        struct.setCoachvIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.pointsList = new ArrayList<Point>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            Point _elem7; // required
            _elem7 = new Point();
            _elem7.read(iprot);
            struct.pointsList.add(_elem7);
          }
        }
        struct.setPointsListIsSet(true);
      }
    }
  }

}

