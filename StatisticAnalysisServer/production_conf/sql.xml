<?xml version="1.0" encoding="UTF-8"?>
<sql>
	<item name="sql_procSaveVehicleAlarmInfo">
		<value>
				{call INSERT_TS_ALARM_DAYSTAT(?,?,?,?)}
		</value>
		<type>string</type>
		<comments>存储车辆报警日统计信息存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procDeleteStatisticDatas">
		<value>
				{call DELETE_STATISTICED_DATAS(?,?,?,?)}
		</value>
		<type>string</type>
		<comments>删除已经生成的统计数据存储过程</comments>
		<check></check>
	</item>
	<item name="sql_saveVehicleAlarmInfo" >
		<value>
			INSERT INTO TS_ALARM_DAYSTAT (AUTO_ID,STAT_DATE,VID,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VEHICLE_NO,VIN_CODE,ALARM_CODE,ALARM_NUM,ALARM_CLASS,ALARM_TIME,MILEAGE,OIL_WEAR,VLINE_ID,LINE_NAME,DRIVER_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
		</value>
		<type>string</type>
		<comments>存储车辆报警日统计信息 </comments>
		<check></check>
	</item>
	<item name="sql_saveVehicleAlarmMonthInfo" >
		<value>
			INSERT INTO TS_ALARM_MONTHSTAT (AUTO_ID,STAT_DATE,STAT_YEAR,VID,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VEHICLE_NO,VIN_CODE,ALARM_CODE,ALARM_NUM,ALARM_CLASS,ALARM_TIME,MILEAGE,OIL_WEAR,VLINE_ID,LINE_NAME,DRIVER_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
		</value>
		<type>string</type>
		<comments>存储车辆报警月统计信息 </comments>
		<check></check>
	</item>
	<item name="sql_saveVehicleAlarmEventInfo" >
			<value>
				INSERT INTO TH_VEHICLE_ALARM_EVENT (AUTO_ID,VID,DEVICE_NO,ALARM_CODE,AREA_ID,MTYPE_CODE,MEDIA_URI,BEGIN_UTC,BEGIN_LAT,BEGIN_LON,BEGIN_MAPLAT,BEGIN_MAPLON,BEGIN_ELEVATION,BEGIN_DIRECTION,BEGIN_GPS_SPEED,END_UTC,END_LAT,END_LON,END_MAPLAT,END_MAPLON,END_ELEVATION,END_DIRECTION,END_GPS_SPEED,ALARM_EVENT_TIME,KEYPOINT_GPS_SPEED,Vline_Id,Inner_Code,Vehicleno,MILEAGE,OIL_WEAR,C_VIN,LINE_NAME,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,ALARM_SRC,SPEED_THRESHOLD,AVG_SPEED,DRIVER_ID,DRIVER_NAME,DRIVER_SRC) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储报警事件统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_queryVehicleAlarmDayInfo" >
			<value>
				SELECT VID,VEHICLE_NO,VIN_CODE,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,DRIVER_ID,ALARM_CODE,SUM(ALARM_NUM) AS ALARM_NUM,SUM(ALARM_TIME) AS ALARM_TIME,SUM(MILEAGE) AS MILEAGE,SUM(OIL_WEAR) AS OIL_WEAR,VLINE_ID,LINE_NAME FROM TS_ALARM_DAYSTAT WHERE STAT_DATE BETWEEN ? AND ? GROUP BY VID,VEHICLE_NO,VIN_CODE, CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VLINE_ID,LINE_NAME,DRIVER_ID,ALARM_CODE
			</value>
			<type>string</type>
			<comments>查询车辆报警日统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_queryOverLoadInfo" >
			<value>
				SELECT COUNT(IS_OVERLOAD) AS OVERLOADNUM FROM TH_VEHICLE_MEDIA M WHERE UTC &gt; ? AND UTC &lt; ? AND VID = ? AND IS_OVERLOAD = 1
			</value>
			<type>string</type>
			<comments>查询车辆前一日超载次数统计信息 </comments>
			<check></check>
		</item>
			<item name="sql_queryCountAlarmInfo" >
			<value>
				SELECT COUNT(*) AS ALARMNUM FROM TH_VEHICLE_ALARM WHERE VID = ? AND UTC &gt; ? AND UTC &lt;= ? AND ALARM_STATUS =2
			</value>
			<type>string</type>
			<comments>查询车辆报警总处理数统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_saveDayServiceStInfo" >
			<value>
			INSERT INTO TS_VEHICLE_SERVICE_DAYSTAT
		        (STAT_DATE,VID,VEHICLE_NO,C_VIN,CORP_ID,
		         CORP_NAME,TEAM_ID,TEAM_NAME,ONLINE_TIME,ENGINE_ROTATE_TIME,
		         SPEED_MAX,RPM_MAX,VCL_GPS_AMOUNT,VCL_GPS_INVALID_AMOUNT,VCL_GPS_TIMEINVALID_AMOUNT,
		         VCL_GPS_LONINVALID_AMOUNT,ACC_CLOSE_NUM,ACC_CLOSE_TIME,VLINE_ID,LINE_NAME,
		         POINT_MILEAGE,POINT_OIL,GIS_MILEAGE,RUNNING_TIME,OIL_FLAG,
		         MILEAGE,OIL_WEAR,RUNNING_OIL,MET_OIL_WEAR,MET_RUNNING_OIL_WEAR,
		         MET_IDLING_OIL_WEAR,ECU_OIL_WEAR,ECU_RUNNING_OIL_WEAR,ECU_IDLING_OIL_WEAR
		         )
		      VALUES
		        (?,?,?,?,?,?,?,?,?,?,
		         ?,?,?,?,?,?,?,?,?,?,
		         ?,?,?,?,?,?,?,?,?,?,
		         ?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储车辆日运营统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_saveDayStInfo" >
			<value>
			INSERT INTO TS_VEHICLE_DAYSTAT(STAT_DATE,VID,                         
			  VEHICLE_NO,
			  C_VIN,                   
			  CORP_ID,
			  CORP_NAME,
			  TEAM_ID,
			  TEAM_NAME,  
			  ONLINE_TIMES,                 
			  ONLINE_TIME,                 
			  ENGINE_ROTATE_TIME,          
			  MILEAGE,                     
			  OIL_WEAR,                    
			  SPEEDING_OIL,                
			  SPEEDING_MILEAGE,            
			  SPEED_MAX,                   
			  RPM_MAX,                     
			  VCL_GPS_AMOUNT,              
			  VCL_GPS_INVALID_AMOUNT,      
			  VCL_GPS_TIMEINVALID_AMOUNT,  
			  VCL_GPS_LONINVALID_AMOUNT,   
			  TOTAL_ALARM,                 
			  ALARM_DEALT,                 
			  EMERGENCY_ALARM,             
			  ACC_CLOSE_NUM,               
			  ACC_CLOSE_TIME,                          
			  OVERSPEED_ALARM,             
			  OVERSPEED_TIME,              
			  FATIGUE_ALARM,               
			  FATIGUE_TIME,                
			  GNSS_BUG_NUM,                
			  GNSS_BUG_TIME,               
			  GNSS_UNANTENAN_NUM,          
			  GNSS_UNANTENAN_TIME,         
			  ANTENAN_SHORTOUT_NUM,        
			  ANTENAN_SHORTOUT_TIME,       
			  MPOWER_UNDERVOLTAGE_NUM,     
			  MPOWER_UNDERVOLTAGE_TIME,    
			  MPOWER_DOWN_NUM,             
			  MPOWER_DOWN_TIME,            
			  LCD_BUG_NUM,                 
			  LCD_BUG_TIME,                
			  TIS_BUG_NUM,                 
			  TIS_BUG_TIME,                
			  CAMERA_BUG_NUM,              
			  CAMERA_BUG_TIME,             
			  DRIVER_TIMEOUT_TIME,         
			  STOP_TIMOUT_NUM,             
			  STOP_TIMOUT_TIME,            
			  INAREA_ALARM,                
			  OUTAREA_ALARM,               
			  IN_ROUTE_NUM,                
			  OUT_ROUTE_NUM,               
			  ROUTE_RUN_DIFF_NUM,  
			  ROUTE_RUN_NUM,         
			  DEVIATE_ROUTE_ALARM,         
			  DEVIATE_ROUTE_TIME,          
			  VSS_BUG_NUM,                 
			  VSS_BUG_TIME,                
			  OILMASS_UNUSUAL_NUM,         
			  OILMASS_UNUSUAL_TIME,        
			  VEHICLE_BESTOLEN_TIME,       
			  ILLEGAL_FIRE_NUM,            
			  ILLEGAL_MOVE_NUM,            
			  CASH_ALARM_NUM,              
			  CASH_ALARM_TIME,             
			  E_WATER_TEMP_NUM,          
			  E_WATER_TEMP_TIME,  
			  EOIL_PRESSURE_NUM,          
			  EOIL_PRESSURE_TIME,          
			  BATTERY_VOLTAGE_NUM,         
			  BATTERY_VOLTAGE_TIME,        
			  TRIG_PRESSURE_NUM,           
			  TRIG_PRESSURE_TIME,          
			  OIL_ALARM_NUM,               
			  OIL_ALARM_TIME,              
			  STAGE_LOW_ALARM_NUM,         
			  STAGE_LOW_ALARM_TIME,        
			  FUEL_BLOCKING_ALARM_NUM,     
			  FUEL_BLOCKING_ALARM_TIME,    
			  EOIL_TEMPERATURE_ALARM_NUM,  
			  EOIL_TEMPERATURE_ALARM_TIME, 
			  RETARDER_HT_ALARM_NUM,       
			  RETARDER_HT_ALARM_TIME,      
			  EHOUSING_HT_ALARM_NUM,       
			  EHOUSING_HT_ALARM_TIME,      
			  OVERRPM_ALARM,               
			  OVERRPM_TIME,                
			  GEAR_WRONG_NUM,             
			  GEAR_WRONG_TIME,             
			  GEAR_GLIDE_NUM,              
			  GEAR_GLIDE_TIME,             
			  URGENT_SPEED_NUM,            
			  URGENT_SPEED_TIME,           
			  URGENT_LOWDOWN_NUM,          
			  URGENT_LOWDOWN_TIME,         
			  LONG_IDLE_NUM,               
			  LONG_IDLE_TIME,              
			  AIR_CONDITION_NUM,           
			  AIR_CONDITION_TIME,          
			  BRAKE_SHOE_NUM,              
			  BRAKE_SHOE_TIME,             
			  AIR_FILTER_CLOG_NUM,         
			  AIR_FILTER_CLOG_TIME,        
			  ECONOMIC_RUN_TIME,           
			  AREA_OVERSPEED_ALARM,        
			  AREA_OVERSPEED_TIME,                    
			  HEATUP_TIME,                 
			  AIRCONDITION_TIME, 
			  DOOR1_OPEN_NUM,          
			  DOOR2_OPEN_NUM,              
			  DOOR3_OPEN_NUM,              
			  DOOR4_OPEN_NUM, 
			  DOOR_OPEN_NUM,                 
			  AREA_OPENDOOR_NUM,           
			  AREA_OPENDOOR_TIME,          
			  MWERE_BLOCKING_NUM,          
			  MWERE_BLOCKING_TIME,         
			  OVERLOAD_NUM,                
			  ILLEGAL_STOP_NUM,            
			  ILLEGAL_STOP_TIME,     
			  GEAR_IMPROPER,               
			  GEAR_TIME,                   
			  IDLING_TIME,
			  VLINE_ID,
			  LINE_NAME,
			  RUNNING_OIL,
			  OPENING_DOOR_EX_NUM,
			  PRECISE_OIL,
			  POINT_MILEAGE,
			  POINT_OIL,
			  GIS_MILEAGE,
			  MET_RUNNING_OIL_WEAR,MET_IDLING_OIL_WEAR,ECU_OIL_WEAR,ECU_RUNNING_OIL_WEAR,ECU_IDLING_OIL_WEAR,OIL_FLAG
			  )VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?) 
			</value>
			<type>string</type>
			<comments>存储车辆日统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_queryStatDayInfo" >
			<value>
				SELECT VID,                         
			  VEHICLE_NO,
			  C_VIN,                   
			  CORP_ID,
			  CORP_NAME,
			  TEAM_ID,
			  TEAM_NAME, SUM(  
			  ONLINE_TIMES), SUM(                
			  ONLINE_TIME), SUM(                 
			  ENGINE_ROTATE_TIME), SUM(          
			  MILEAGE), SUM(                     
			  OIL_WEAR), SUM(                    
			  SPEEDING_OIL), SUM(                
			  SPEEDING_MILEAGE), MAX(            
			  SPEED_MAX), MAX(                   
			  RPM_MAX), SUM(                     
			  VCL_GPS_AMOUNT), SUM(              
			  VCL_GPS_INVALID_AMOUNT), SUM(      
			  VCL_GPS_TIMEINVALID_AMOUNT), SUM(  
			  VCL_GPS_LONINVALID_AMOUNT), SUM(   
			  TOTAL_ALARM), SUM(                 
			  ALARM_DEALT), SUM(                 
			  EMERGENCY_ALARM), SUM(             
			  ACC_CLOSE_NUM), SUM(               
			  ACC_CLOSE_TIME), SUM(                          
			  OVERSPEED_ALARM), SUM(             
			  OVERSPEED_TIME), SUM(              
			  FATIGUE_ALARM), SUM(               
			  FATIGUE_TIME), SUM(                
			  GNSS_BUG_NUM), SUM(                
			  GNSS_BUG_TIME), SUM(               
			  GNSS_UNANTENAN_NUM), SUM(          
			  GNSS_UNANTENAN_TIME), SUM(         
			  ANTENAN_SHORTOUT_NUM), SUM(        
			  ANTENAN_SHORTOUT_TIME), SUM(       
			  MPOWER_UNDERVOLTAGE_NUM), SUM(     
			  MPOWER_UNDERVOLTAGE_TIME), SUM(    
			  MPOWER_DOWN_NUM), SUM(             
			  MPOWER_DOWN_TIME), SUM(            
			  LCD_BUG_NUM), SUM(                 
			  LCD_BUG_TIME), SUM(                
			  TIS_BUG_NUM), SUM(                 
			  TIS_BUG_TIME), SUM(                
			  CAMERA_BUG_NUM), SUM(              
			  CAMERA_BUG_TIME), SUM(             
			  DRIVER_TIMEOUT_TIME), SUM(         
			  STOP_TIMOUT_NUM), SUM(             
			  STOP_TIMOUT_TIME), SUM(            
			  INAREA_ALARM), SUM(                
			  OUTAREA_ALARM), SUM(               
			  IN_ROUTE_NUM), SUM(                
			  OUT_ROUTE_NUM), SUM(               
			  ROUTE_RUN_DIFF_NUM), SUM(  
			  ROUTE_RUN_NUM), SUM(         
			  DEVIATE_ROUTE_ALARM), SUM(         
			  DEVIATE_ROUTE_TIME), SUM(          
			  VSS_BUG_NUM), SUM(                 
			  VSS_BUG_TIME), SUM(                
			  OILMASS_UNUSUAL_NUM), SUM(         
			  OILMASS_UNUSUAL_TIME), SUM(        
			  VEHICLE_BESTOLEN_TIME), SUM(       
			  ILLEGAL_FIRE_NUM), SUM(            
			  ILLEGAL_MOVE_NUM), SUM(            
			  CASH_ALARM_NUM), SUM(              
			  CASH_ALARM_TIME), SUM(             
			  E_WATER_TEMP_TIME), SUM(          
			  E_WATER_TEMP_NUM), SUM(  
			  EOIL_PRESSURE_NUM), SUM(          
			  EOIL_PRESSURE_TIME), SUM(          
			  BATTERY_VOLTAGE_NUM), SUM(         
			  BATTERY_VOLTAGE_TIME), SUM(        
			  TRIG_PRESSURE_NUM), SUM(           
			  TRIG_PRESSURE_TIME), SUM(          
			  OIL_ALARM_NUM), SUM(               
			  OIL_ALARM_TIME), SUM(              
			  STAGE_LOW_ALARM_NUM), SUM(         
			  STAGE_LOW_ALARM_TIME), SUM(        
			  FUEL_BLOCKING_ALARM_NUM), SUM(     
			  FUEL_BLOCKING_ALARM_TIME), SUM(    
			  EOIL_TEMPERATURE_ALARM_NUM), SUM(  
			  EOIL_TEMPERATURE_ALARM_TIME), SUM( 
			  RETARDER_HT_ALARM_NUM), SUM(       
			  RETARDER_HT_ALARM_TIME), SUM(      
			  EHOUSING_HT_ALARM_NUM), SUM(       
			  EHOUSING_HT_ALARM_TIME), SUM(      
			  OVERRPM_ALARM), SUM(               
			  OVERRPM_TIME), SUM(                
			  GEAR_WRONG_NUM), SUM(             
			  GEAR_WRONG_TIME), SUM(             
			  GEAR_GLIDE_NUM), SUM(              
			  GEAR_GLIDE_TIME), SUM(             
			  URGENT_SPEED_NUM), SUM(            
			  URGENT_SPEED_TIME), SUM(           
			  URGENT_LOWDOWN_NUM), SUM(          
			  URGENT_LOWDOWN_TIME), SUM(         
			  LONG_IDLE_NUM), SUM(               
			  LONG_IDLE_TIME), SUM(              
			  AIR_CONDITION_NUM), SUM(           
			  AIR_CONDITION_TIME), SUM(          
			  BRAKE_SHOE_NUM), SUM(              
			  BRAKE_SHOE_TIME), SUM(             
			  AIR_FILTER_CLOG_NUM), SUM(         
			  AIR_FILTER_CLOG_TIME), SUM(        
			  ECONOMIC_RUN_TIME), SUM(           
			  AREA_OVERSPEED_ALARM), SUM(        
			  AREA_OVERSPEED_TIME), SUM(                    
			  HEATUP_TIME), SUM(                 
			  AIRCONDITION_TIME), SUM( 
			  DOOR1_OPEN_NUM), SUM(          
			  DOOR2_OPEN_NUM), SUM(              
			  DOOR3_OPEN_NUM), SUM(              
			  DOOR4_OPEN_NUM), SUM( 
			  DOOR_OPEN_NUM), SUM(                 
			  AREA_OPENDOOR_NUM), SUM(           
			  AREA_OPENDOOR_TIME), SUM(          
			  MWERE_BLOCKING_NUM), SUM(          
			  MWERE_BLOCKING_TIME), SUM(         
			  OVERLOAD_NUM), SUM(                
			  ILLEGAL_STOP_NUM), SUM(            
			  ILLEGAL_STOP_TIME), SUM(     
			  GEAR_IMPROPER), SUM(               
			  GEAR_TIME), SUM(                   
			  IDLING_TIME),			  
			  VLINE_ID,
			  LINE_NAME,SUM(
			  RUNNING_OIL),SUM(
			  RETARDER_WORK_TIME),SUM(
			  RETARDER_WORK_NUM),SUM(
			  BRAKE_TIME),SUM(
			  BRAKE_NUM),SUM(
			  REVERSE_GEAR_TIME),SUM(
			  REVERSE_GEAR_NUM),SUM(
			  LOWER_BEAM_TIME),SUM(
			  LOWER_BEAM_NUM),SUM(
			  HIGH_BEAM_TIME),SUM(
			  HIGH_BEAM_NUM),SUM(
			  LEFT_TURNING_SIGNAL_TIME),SUM( 
			  LEFT_TURNING_SIGNAL_NUM),SUM(
			  RIGHT_TURNING_SIGNAL_TIME),SUM(
			  RIGHT_TURNING_SIGNAL_NUM),SUM(
			  OUTLINE_LAMP_TIME),SUM(
			  OUTLINE_LAMP_NUM),SUM(
			  TRUMPET_TIME),SUM(
			  TRUMPET_NUM),SUM(
			  AIRCONDITION_NUM),SUM(
			  FREE_POSITION_TIME),SUM(
			  FREE_POSITION_NUM),SUM(
			  ABS_WORK_TIME),SUM(
			  ABS_WORK_NUM),SUM(
			  HEAT_UP_TIME),SUM(
			  HEAT_UP_NUM),SUM(
			  CLUTCH_TIME),SUM(
			  CLUTCH_NUM),SUM(
			  OPENING_DOOR_EX_NUM),SUM(
			  PRECISE_OIL),SUM(MET_IDLING_OIL_WEAR),
			  SUM(MET_RUNNING_OIL_WEAR),
			  SUM(ECU_OIL_WEAR),
			  SUM(ECU_IDLING_OIL_WEAR),
			  SUM(ECU_RUNNING_OIL_WEAR),
			  SUM(HEAD_COLLIDE),
			  SUM(VEHICLE_DEVIATE),
			  OIL_FLAG FROM (SELECT *  FROM TS_VEHICLE_DAYSTAT T WHERE STAT_DATE &gt; ? AND STAT_DATE &lt; ?) GROUP BY VID,VEHICLE_NO, C_VIN,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VLINE_ID,LINE_NAME,OIL_FLAG
			</value>
			<type>string</type>
			<comments>查询车辆日统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_saveStatMonthInfo" >
			<value>
			INSERT INTO TS_VEHICLE_MONTHSTAT(STAT_MONTH,
			VID,                         
			  VEHICLE_NO,
			  C_VIN,                   
			  CORP_ID,
			  CORP_NAME,
			  TEAM_ID,
			  TEAM_NAME,  
			  ONLINE_TIMES,                
			  ONLINE_TIME,                 
			  ENGINE_ROTATE_TIME,          
			  MILEAGE,                     
			  OIL_WEAR,                    
			  SPEEDING_OIL,                
			  SPEEDING_MILEAGE,            
			  SPEED_MAX,                   
			  RPM_MAX,                     
			  VCL_GPS_AMOUNT,              
			  VCL_GPS_INVALID_AMOUNT,      
			  VCL_GPS_TIMEINVALID_AMOUNT,  
			  VCL_GPS_LONINVALID_AMOUNT,   
			  TOTAL_ALARM,                 
			  ALARM_DEALT,                 
			  EMERGENCY_ALARM,             
			  ACC_CLOSE_NUM,               
			  ACC_CLOSE_TIME,                          
			  OVERSPEED_ALARM,             
			  OVERSPEED_TIME,              
			  FATIGUE_ALARM,               
			  FATIGUE_TIME,                
			  GNSS_BUG_NUM,                
			  GNSS_BUG_TIME,               
			  GNSS_UNANTENAN_NUM,          
			  GNSS_UNANTENAN_TIME,         
			  ANTENAN_SHORTOUT_NUM,        
			  ANTENAN_SHORTOUT_TIME,       
			  MPOWER_UNDERVOLTAGE_NUM,     
			  MPOWER_UNDERVOLTAGE_TIME,    
			  MPOWER_DOWN_NUM,             
			  MPOWER_DOWN_TIME,            
			  LCD_BUG_NUM,                 
			  LCD_BUG_TIME,                
			  TIS_BUG_NUM,                 
			  TIS_BUG_TIME,                
			  CAMERA_BUG_NUM,              
			  CAMERA_BUG_TIME,             
			  DRIVER_TIMEOUT_TIME,         
			  STOP_TIMOUT_NUM,             
			  STOP_TIMOUT_TIME,            
			  INAREA_ALARM,                
			  OUTAREA_ALARM,               
			  IN_ROUTE_NUM,                
			  OUT_ROUTE_NUM,               
			  ROUTE_RUN_DIFF_NUM,  
			  ROUTE_RUN_NUM,         
			  DEVIATE_ROUTE_ALARM,         
			  DEVIATE_ROUTE_TIME,          
			  VSS_BUG_NUM,                 
			  VSS_BUG_TIME,                
			  OILMASS_UNUSUAL_NUM,         
			  OILMASS_UNUSUAL_TIME,        
			  VEHICLE_BESTOLEN_TIME,       
			  ILLEGAL_FIRE_NUM,            
			  ILLEGAL_MOVE_NUM,            
			  CASH_ALARM_NUM,              
			  CASH_ALARM_TIME,             
			  E_WATER_TEMP_TIME,          
			  E_WATER_TEMP_NUM,  
			  EOIL_PRESSURE_NUM,          
			  EOIL_PRESSURE_TIME,          
			  BATTERY_VOLTAGE_NUM,         
			  BATTERY_VOLTAGE_TIME,        
			  TRIG_PRESSURE_NUM,           
			  TRIG_PRESSURE_TIME,          
			  OIL_ALARM_NUM,               
			  OIL_ALARM_TIME,              
			  STAGE_LOW_ALARM_NUM,         
			  STAGE_LOW_ALARM_TIME,        
			  FUEL_BLOCKING_ALARM_NUM,     
			  FUEL_BLOCKING_ALARM_TIME,    
			  EOIL_TEMPERATURE_ALARM_NUM,  
			  EOIL_TEMPERATURE_ALARM_TIME, 
			  RETARDER_HT_ALARM_NUM,       
			  RETARDER_HT_ALARM_TIME,      
			  EHOUSING_HT_ALARM_NUM,       
			  EHOUSING_HT_ALARM_TIME,      
			  OVERRPM_ALARM,               
			  OVERRPM_TIME,                
			  GEAR_WRONG_NUM,             
			  GEAR_WRONG_TIME,             
			  GEAR_GLIDE_NUM,              
			  GEAR_GLIDE_TIME,             
			  URGENT_SPEED_NUM,            
			  URGENT_SPEED_TIME,           
			  URGENT_LOWDOWN_NUM,          
			  URGENT_LOWDOWN_TIME,         
			  LONG_IDLE_NUM,               
			  LONG_IDLE_TIME,              
			  AIR_CONDITION_NUM,           
			  AIR_CONDITION_TIME,          
			  BRAKE_SHOE_NUM,              
			  BRAKE_SHOE_TIME,             
			  AIR_FILTER_CLOG_NUM,         
			  AIR_FILTER_CLOG_TIME,        
			  ECONOMIC_RUN_TIME,           
			  AREA_OVERSPEED_ALARM,        
			  AREA_OVERSPEED_TIME,                    
			  HEATUP_TIME,                 
			  AIRCONDITION_TIME, 
			  DOOR1_OPEN_NUM,          
			  DOOR2_OPEN_NUM,              
			  DOOR3_OPEN_NUM,              
			  DOOR4_OPEN_NUM, 
			  DOOR_OPEN_NUM,                 
			  AREA_OPENDOOR_NUM,           
			  AREA_OPENDOOR_TIME,          
			  MWERE_BLOCKING_NUM,          
			  MWERE_BLOCKING_TIME,         
			  OVERLOAD_NUM,                
			  ILLEGAL_STOP_NUM,            
			  ILLEGAL_STOP_TIME,     
			  GEAR_IMPROPER,               
			  GEAR_TIME,                   
			  IDLING_TIME,
			  STAT_YEAR,
			  VLINE_ID,
			  LINE_NAME,
			  RUNNING_OIL,
			  RETARDER_WORK_TIME,
			  RETARDER_WORK_NUM,
			  BRAKE_TIME,
			  BRAKE_NUM,
			  REVERSE_GEAR_TIME,
			  REVERSE_GEAR_NUM,
			  LOWER_BEAM_TIME,
			  LOWER_BEAM_NUM,
			  HIGH_BEAM_TIME,
			  HIGH_BEAM_NUM,
			  LEFT_TURNING_SIGNAL_TIME, 
			  LEFT_TURNING_SIGNAL_NUM,
			  RIGHT_TURNING_SIGNAL_TIME,
			  RIGHT_TURNING_SIGNAL_NUM,
			  OUTLINE_LAMP_TIME,
			  OUTLINE_LAMP_NUM,
			  TRUMPET_TIME,
			  TRUMPET_NUM,
			  AIRCONDITION_NUM,
			  FREE_POSITION_TIME,
			  FREE_POSITION_NUM,
			  ABS_WORK_TIME,
			  ABS_WORK_NUM,
			  HEAT_UP_TIME,
			  HEAT_UP_NUM,
			  CLUTCH_TIME,
			  CLUTCH_NUM,
			  OPENING_DOOR_EX_NUM,
			  PRECISE_OIL,
			  MET_IDLING_OIL_WEAR,
			  MET_RUNNING_OIL_WEAR,
			  ECU_OIL_WEAR,
			  ECU_IDLING_OIL_WEAR,
			  ECU_RUNNING_OIL_WEAR,
			  HEAD_COLLIDE,
			  VEHICLE_DEVIATE,
			  OIL_FLAG
			  )
			   VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储车辆月统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_queryStaMonthInfo" >
			<value>
				SELECT VID,                         
			  VEHICLE_NO,
			  C_VIN,                   
			  CORP_ID,
			  CORP_NAME,
			  TEAM_ID,
			  TEAM_NAME, SUM(  
			  ONLINE_TIMES), SUM(                
			  ONLINE_TIME), SUM(                 
			  ENGINE_ROTATE_TIME), SUM(          
			  MILEAGE), SUM(                     
			  OIL_WEAR), SUM(                    
			  SPEEDING_OIL), SUM(                
			  SPEEDING_MILEAGE), MAX(            
			  SPEED_MAX), MAX(                   
			  RPM_MAX), SUM(                     
			  VCL_GPS_AMOUNT), SUM(              
			  VCL_GPS_INVALID_AMOUNT), SUM(      
			  VCL_GPS_TIMEINVALID_AMOUNT), SUM(  
			  VCL_GPS_LONINVALID_AMOUNT), SUM(   
			  TOTAL_ALARM), SUM(                 
			  ALARM_DEALT), SUM(                 
			  EMERGENCY_ALARM), SUM(             
			  ACC_CLOSE_NUM), SUM(               
			  ACC_CLOSE_TIME), SUM(                          
			  OVERSPEED_ALARM), SUM(             
			  OVERSPEED_TIME), SUM(              
			  FATIGUE_ALARM), SUM(               
			  FATIGUE_TIME), SUM(                
			  GNSS_BUG_NUM), SUM(                
			  GNSS_BUG_TIME), SUM(               
			  GNSS_UNANTENAN_NUM), SUM(          
			  GNSS_UNANTENAN_TIME), SUM(         
			  ANTENAN_SHORTOUT_NUM), SUM(        
			  ANTENAN_SHORTOUT_TIME), SUM(       
			  MPOWER_UNDERVOLTAGE_NUM), SUM(     
			  MPOWER_UNDERVOLTAGE_TIME), SUM(    
			  MPOWER_DOWN_NUM), SUM(             
			  MPOWER_DOWN_TIME), SUM(            
			  LCD_BUG_NUM), SUM(                 
			  LCD_BUG_TIME), SUM(                
			  TIS_BUG_NUM), SUM(                 
			  TIS_BUG_TIME), SUM(                
			  CAMERA_BUG_NUM), SUM(              
			  CAMERA_BUG_TIME), SUM(             
			  DRIVER_TIMEOUT_TIME), SUM(         
			  STOP_TIMOUT_NUM), SUM(             
			  STOP_TIMOUT_TIME), SUM(            
			  INAREA_ALARM), SUM(                
			  OUTAREA_ALARM), SUM(               
			  IN_ROUTE_NUM), SUM(                
			  OUT_ROUTE_NUM), SUM(               
			  ROUTE_RUN_DIFF_NUM), SUM(  
			  ROUTE_RUN_NUM), SUM(         
			  DEVIATE_ROUTE_ALARM), SUM(         
			  DEVIATE_ROUTE_TIME), SUM(          
			  VSS_BUG_NUM), SUM(                 
			  VSS_BUG_TIME), SUM(                
			  OILMASS_UNUSUAL_NUM), SUM(         
			  OILMASS_UNUSUAL_TIME), SUM(        
			  VEHICLE_BESTOLEN_TIME), SUM(       
			  ILLEGAL_FIRE_NUM), SUM(            
			  ILLEGAL_MOVE_NUM), SUM(            
			  CASH_ALARM_NUM), SUM(              
			  CASH_ALARM_TIME), SUM(             
			  E_WATER_TEMP_TIME), SUM(          
			  E_WATER_TEMP_NUM), SUM(  
			  EOIL_PRESSURE_NUM), SUM(          
			  EOIL_PRESSURE_TIME), SUM(          
			  BATTERY_VOLTAGE_NUM), SUM(         
			  BATTERY_VOLTAGE_TIME), SUM(        
			  TRIG_PRESSURE_NUM), SUM(           
			  TRIG_PRESSURE_TIME), SUM(          
			  OIL_ALARM_NUM), SUM(               
			  OIL_ALARM_TIME), SUM(              
			  STAGE_LOW_ALARM_NUM), SUM(         
			  STAGE_LOW_ALARM_TIME), SUM(        
			  FUEL_BLOCKING_ALARM_NUM), SUM(     
			  FUEL_BLOCKING_ALARM_TIME), SUM(    
			  EOIL_TEMPERATURE_ALARM_NUM), SUM(  
			  EOIL_TEMPERATURE_ALARM_TIME), SUM( 
			  RETARDER_HT_ALARM_NUM), SUM(       
			  RETARDER_HT_ALARM_TIME), SUM(      
			  EHOUSING_HT_ALARM_NUM), SUM(       
			  EHOUSING_HT_ALARM_TIME), SUM(      
			  OVERRPM_ALARM), SUM(               
			  OVERRPM_TIME), SUM(                
			  GEAR_WRONG_NUM), SUM(             
			  GEAR_WRONG_TIME), SUM(             
			  GEAR_GLIDE_NUM), SUM(              
			  GEAR_GLIDE_TIME), SUM(
			  URGENT_SPEED_NUM), SUM(            
			  URGENT_SPEED_TIME), SUM(           
			  URGENT_LOWDOWN_NUM), SUM(          
			  URGENT_LOWDOWN_TIME), SUM(         
			  LONG_IDLE_NUM), SUM(               
			  LONG_IDLE_TIME), SUM(              
			  AIR_CONDITION_NUM), SUM(           
			  AIR_CONDITION_TIME), SUM(          
			  BRAKE_SHOE_NUM), SUM(              
			  BRAKE_SHOE_TIME), SUM(             
			  AIR_FILTER_CLOG_NUM), SUM(         
			  AIR_FILTER_CLOG_TIME), SUM(        
			  ECONOMIC_RUN_TIME), SUM(           
			  AREA_OVERSPEED_ALARM), SUM(        
			  AREA_OVERSPEED_TIME), SUM(                    
			  HEATUP_TIME), SUM(                 
			  AIRCONDITION_TIME), SUM( 
			  DOOR1_OPEN_NUM), SUM(          
			  DOOR2_OPEN_NUM), SUM(              
			  DOOR3_OPEN_NUM), SUM(              
			  DOOR4_OPEN_NUM), SUM( 
			  DOOR_OPEN_NUM), SUM(                 
			  AREA_OPENDOOR_NUM), SUM(           
			  AREA_OPENDOOR_TIME), SUM(          
			  MWERE_BLOCKING_NUM), SUM(          
			  MWERE_BLOCKING_TIME), SUM(         
			  OVERLOAD_NUM), SUM(                
			  ILLEGAL_STOP_NUM), SUM(            
			  ILLEGAL_STOP_TIME), SUM(     
			  GEAR_IMPROPER), SUM(               
			  GEAR_TIME), SUM(                                  
			  IDLING_TIME),SUM(
			  RETARDER_WORK_TIME),SUM(
			  RETARDER_WORK_NUM),SUM(
			  BRAKE_TIME),SUM(
			  BRAKE_NUM),SUM(
			  REVERSE_GEAR_TIME),SUM(
			  REVERSE_GEAR_NUM),SUM(
			  LOWER_BEAM_TIME),SUM(
			  LOWER_BEAM_NUM),SUM(
			  HIGH_BEAM_TIME),SUM(
			  HIGH_BEAM_NUM),SUM(
			  LEFT_TURNING_SIGNAL_TIME),SUM( 
			  LEFT_TURNING_SIGNAL_NUM),SUM(
			  RIGHT_TURNING_SIGNAL_TIME),SUM(
			  RIGHT_TURNING_SIGNAL_NUM),SUM(
			  OUTLINE_LAMP_TIME),SUM(
			  OUTLINE_LAMP_NUM),SUM(
			  TRUMPET_TIME),SUM(
			  TRUMPET_NUM),SUM(
			  AIRCONDITION_NUM),SUM(
			  FREE_POSITION_TIME),SUM(
			  FREE_POSITION_NUM),SUM(
			  ABS_WORK_TIME),SUM(
			  ABS_WORK_NUM),SUM(
			  HEAT_UP_TIME),SUM(
			  HEAT_UP_NUM),SUM(
			  CLUTCH_TIME),SUM(
			  CLUTCH_NUM),SUM(
			  OPENING_DOOR_EX_NUM),
			  VLINE_ID,
			  LINE_NAME,SUM(
			  RUNNING_OIL) FROM TS_VEHICLE_MONTHSTAT T GROUP BY VID,VEHICLE_NO, C_VIN,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VLINE_ID,LINE_NAME,STAT_YEAR HAVING STAT_YEAR = ?
			</value>
			<type>string</type>
			<comments>查询车辆报警日统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_saveStatYearInfo" >
			<value>
			INSERT INTO TS_VEHICLE_YEARSTAT(
			  STAT_YEAR,
			  VID,                         
			  VEHICLE_NO,
			  C_VIN,                   
			  CORP_ID,
			  CORP_NAME,
			  TEAM_ID,
			  TEAM_NAME,  
			  ONLINE_TIMES,                
			  ONLINE_TIME,                 
			  ENGINE_ROTATE_TIME,          
			  MILEAGE,                     
			  OIL_WEAR,                    
			  SPEEDING_OIL,                
			  SPEEDING_MILEAGE,            
			  SPEED_MAX,                   
			  RPM_MAX,                     
			  VCL_GPS_AMOUNT,              
			  VCL_GPS_INVALID_AMOUNT,      
			  VCL_GPS_TIMEINVALID_AMOUNT,  
			  VCL_GPS_LONINVALID_AMOUNT,   
			  TOTAL_ALARM,                 
			  ALARM_DEALT,                 
			  EMERGENCY_ALARM,             
			  ACC_CLOSE_NUM,               
			  ACC_CLOSE_TIME,                          
			  OVERSPEED_ALARM,             
			  OVERSPEED_TIME,              
			  FATIGUE_ALARM,               
			  FATIGUE_TIME,                
			  GNSS_BUG_NUM,                
			  GNSS_BUG_TIME,               
			  GNSS_UNANTENAN_NUM,          
			  GNSS_UNANTENAN_TIME,         
			  ANTENAN_SHORTOUT_NUM,        
			  ANTENAN_SHORTOUT_TIME,       
			  MPOWER_UNDERVOLTAGE_NUM,     
			  MPOWER_UNDERVOLTAGE_TIME,    
			  MPOWER_DOWN_NUM,             
			  MPOWER_DOWN_TIME,            
			  LCD_BUG_NUM,                 
			  LCD_BUG_TIME,                
			  TIS_BUG_NUM,                 
			  TIS_BUG_TIME,                
			  CAMERA_BUG_NUM,              
			  CAMERA_BUG_TIME,             
			  DRIVER_TIMEOUT_TIME,         
			  STOP_TIMOUT_NUM,             
			  STOP_TIMOUT_TIME,            
			  INAREA_ALARM,                
			  OUTAREA_ALARM,               
			  IN_ROUTE_NUM,                
			  OUT_ROUTE_NUM,               
			  ROUTE_RUN_DIFF_NUM,  
			  ROUTE_RUN_NUM,         
			  DEVIATE_ROUTE_ALARM,         
			  DEVIATE_ROUTE_TIME,          
			  VSS_BUG_NUM,                 
			  VSS_BUG_TIME,                
			  OILMASS_UNUSUAL_NUM,         
			  OILMASS_UNUSUAL_TIME,        
			  VEHICLE_BESTOLEN_TIME,       
			  ILLEGAL_FIRE_NUM,            
			  ILLEGAL_MOVE_NUM,            
			  CASH_ALARM_NUM,              
			  CASH_ALARM_TIME,             
			  E_WATER_TEMP_TIME,          
			  E_WATER_TEMP_NUM,  
			  EOIL_PRESSURE_NUM,          
			  EOIL_PRESSURE_TIME,          
			  BATTERY_VOLTAGE_NUM,         
			  BATTERY_VOLTAGE_TIME,        
			  TRIG_PRESSURE_NUM,           
			  TRIG_PRESSURE_TIME,          
			  OIL_ALARM_NUM,               
			  OIL_ALARM_TIME,              
			  STAGE_LOW_ALARM_NUM,         
			  STAGE_LOW_ALARM_TIME,        
			  FUEL_BLOCKING_ALARM_NUM,     
			  FUEL_BLOCKING_ALARM_TIME,    
			  EOIL_TEMPERATURE_ALARM_NUM,  
			  EOIL_TEMPERATURE_ALARM_TIME, 
			  RETARDER_HT_ALARM_NUM,       
			  RETARDER_HT_ALARM_TIME,      
			  EHOUSING_HT_ALARM_NUM,       
			  EHOUSING_HT_ALARM_TIME,      
			  OVERRPM_ALARM,               
			  OVERRPM_TIME,                
			  GEAR_WRONG_NUM,             
			  GEAR_WRONG_TIME,             
			  GEAR_GLIDE_NUM,              
			  GEAR_GLIDE_TIME,             
			  URGENT_SPEED_NUM,            
			  URGENT_SPEED_TIME,           
			  URGENT_LOWDOWN_NUM,          
			  URGENT_LOWDOWN_TIME,         
			  LONG_IDLE_NUM,               
			  LONG_IDLE_TIME,              
			  AIR_CONDITION_NUM,           
			  AIR_CONDITION_TIME,          
			  BRAKE_SHOE_NUM,              
			  BRAKE_SHOE_TIME,             
			  AIR_FILTER_CLOG_NUM,         
			  AIR_FILTER_CLOG_TIME,        
			  ECONOMIC_RUN_TIME,           
			  AREA_OVERSPEED_ALARM,        
			  AREA_OVERSPEED_TIME,                    
			  HEATUP_TIME,                 
			  AIRCONDITION_TIME, 
			  DOOR1_OPEN_NUM,          
			  DOOR2_OPEN_NUM,              
			  DOOR3_OPEN_NUM,              
			  DOOR4_OPEN_NUM, 
			  DOOR_OPEN_NUM,                 
			  AREA_OPENDOOR_NUM,           
			  AREA_OPENDOOR_TIME,          
			  MWERE_BLOCKING_NUM,          
			  MWERE_BLOCKING_TIME,         
			  OVERLOAD_NUM,                
			  ILLEGAL_STOP_NUM,            
			  ILLEGAL_STOP_TIME,     
			  GEAR_IMPROPER,               
			  GEAR_TIME,                   
			  IDLING_TIME,
			  RETARDER_WORK_TIME,
			  RETARDER_WORK_NUM,
			  BRAKE_TIME,
			  BRAKE_NUM,
			  REVERSE_GEAR_TIME,
			  REVERSE_GEAR_NUM,
			  LOWER_BEAM_TIME,
			  LOWER_BEAM_NUM,
			  HIGH_BEAM_TIME,
			  HIGH_BEAM_NUM,
			  LEFT_TURNING_SIGNAL_TIME, 
			  LEFT_TURNING_SIGNAL_NUM,
			  RIGHT_TURNING_SIGNAL_TIME,
			  RIGHT_TURNING_SIGNAL_NUM,
			  OUTLINE_LAMP_TIME,
			  OUTLINE_LAMP_NUM,
			  TRUMPET_TIME,
			  TRUMPET_NUM,
			  AIRCONDITION_NUM,
			  FREE_POSITION_TIME,
			  FREE_POSITION_NUM,
			  ABS_WORK_TIME,
			  ABS_WORK_NUM,
			  HEAT_UP_TIME,
			  HEAT_UP_NUM,
			  CLUTCH_TIME,
			  CLUTCH_NUM,
			  OPENING_DOOR_EX_NUM,
			  VLINE_ID,
			  LINE_NAME,
			  RUNNING_OIL)
			   VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储车辆年统计信息 </comments>
			<check></check>
		</item>
		<item name="sql_updateStaInfo" >
			<value>
			  UPDATE TS_VEHICLE_STAT SET 
			  ONLINE_TIMES = ONLINE_TIMES + ?,                
			  ONLINE_TIME = ONLINE_TIME + ?,                 
			  ENGINE_ROTATE_TIME =　ENGINE_ROTATE_TIME+ ?,          
			  MILEAGE = MILEAGE + ?,                     
			  OIL_WEAR = OIL_WEAR + ?,                     
			  SPEEDING_OIL = SPEEDING_OIL + ?,                
			  SPEEDING_MILEAGE = SPEEDING_MILEAGE + ?,            
			  SPEED_MAX = ?,                   
			  RPM_MAX = ?,                     
			  VCL_GPS_AMOUNT = VCL_GPS_AMOUNT + ?,              
			  VCL_GPS_INVALID_AMOUNT = VCL_GPS_INVALID_AMOUNT  + ?,      
			  VCL_GPS_TIMEINVALID_AMOUNT = VCL_GPS_TIMEINVALID_AMOUNT  + ?,  
			  VCL_GPS_LONINVALID_AMOUNT = VCL_GPS_LONINVALID_AMOUNT  + ?,   
			  TOTAL_ALARM = TOTAL_ALARM + ?,                 
			  ALARM_DEALT = ALARM_DEALT + ?,                 
			  EMERGENCY_ALARM = EMERGENCY_ALARM + ?,             
			  ACC_CLOSE_NUM = ACC_CLOSE_NUM + ?,               
			  ACC_CLOSE_TIME = ACC_CLOSE_TIME + ?,                          
			  OVERSPEED_ALARM = OVERSPEED_ALARM + ?,             
			  OVERSPEED_TIME = OVERSPEED_TIME + ?,              
			  FATIGUE_ALARM = FATIGUE_ALARM + ?,               
			  FATIGUE_TIME = FATIGUE_TIME + ?,                
			  GNSS_BUG_NUM = GNSS_BUG_NUM + ?,                
			  GNSS_BUG_TIME = GNSS_BUG_TIME + ?,               
			  GNSS_UNANTENAN_NUM = GNSS_UNANTENAN_NUM + ?,          
			  GNSS_UNANTENAN_TIME = GNSS_UNANTENAN_TIME + ?,         
			  ANTENAN_SHORTOUT_NUM = ANTENAN_SHORTOUT_NUM + ?,        
			  ANTENAN_SHORTOUT_TIME = ANTENAN_SHORTOUT_TIME + ?,       
			  MPOWER_UNDERVOLTAGE_NUM = MPOWER_UNDERVOLTAGE_NUM + ?,     
			  MPOWER_UNDERVOLTAGE_TIME = MPOWER_UNDERVOLTAGE_TIME + ?,    
			  MPOWER_DOWN_NUM = MPOWER_DOWN_NUM + ?,             
			  MPOWER_DOWN_TIME = MPOWER_DOWN_TIME + ?,            
			  LCD_BUG_NUM = LCD_BUG_NUM + ?,                 
			  LCD_BUG_TIME = LCD_BUG_TIME + ?,                
			  TIS_BUG_NUM = TIS_BUG_NUM + ?,                 
			  TIS_BUG_TIME = TIS_BUG_TIME + ?,                
			  CAMERA_BUG_NUM = CAMERA_BUG_NUM + ?,              
			  CAMERA_BUG_TIME = CAMERA_BUG_TIME + ?,             
			  DRIVER_TIMEOUT_TIME = DRIVER_TIMEOUT_TIME + ?,         
			  STOP_TIMOUT_NUM = STOP_TIMOUT_NUM + ?,             
			  STOP_TIMOUT_TIME = STOP_TIMOUT_TIME + ?,            
			  INAREA_ALARM = INAREA_ALARM + ?,                
			  OUTAREA_ALARM = OUTAREA_ALARM + ?,               
			  IN_ROUTE_NUM = IN_ROUTE_NUM + ?,                
			  OUT_ROUTE_NUM = OUT_ROUTE_NUM + ?,               
			  ROUTE_RUN_DIFF_NUM = ROUTE_RUN_DIFF_NUM + ?,  
			  ROUTE_RUN_NUM = ROUTE_RUN_NUM + ?,         
			  DEVIATE_ROUTE_ALARM = DEVIATE_ROUTE_ALARM + ?,         
			  DEVIATE_ROUTE_TIME = DEVIATE_ROUTE_TIME + ?,          
			  VSS_BUG_NUM = VSS_BUG_NUM + ?,                
			  VSS_BUG_TIME = VSS_BUG_TIME + ?,                
			  OILMASS_UNUSUAL_NUM = OILMASS_UNUSUAL_NUM + ?,         
			  OILMASS_UNUSUAL_TIME = OILMASS_UNUSUAL_TIME + ?,        
			  VEHICLE_BESTOLEN_TIME = VEHICLE_BESTOLEN_TIME + ?,       
			  ILLEGAL_FIRE_NUM = ILLEGAL_FIRE_NUM + ?,            
			  ILLEGAL_MOVE_NUM = ILLEGAL_MOVE_NUM + ?,            
			  CASH_ALARM_NUM = CASH_ALARM_NUM + ?,              
			  CASH_ALARM_TIME = CASH_ALARM_TIME + ?,             
			  E_WATER_TEMP_NUM = E_WATER_TEMP_NUM + ?,          
			  E_WATER_TEMP_TIME = E_WATER_TEMP_TIME + ?,  
			  EOIL_PRESSURE_NUM = EOIL_PRESSURE_NUM + ?,          
			  EOIL_PRESSURE_TIME = EOIL_PRESSURE_TIME + ?,          
			  BATTERY_VOLTAGE_NUM = BATTERY_VOLTAGE_NUM + ?,         
			  BATTERY_VOLTAGE_TIME = BATTERY_VOLTAGE_TIME + ?,        
			  TRIG_PRESSURE_NUM = TRIG_PRESSURE_NUM + ?,           
			  TRIG_PRESSURE_TIME = TRIG_PRESSURE_TIME + ?,          
			  OIL_ALARM_NUM = OIL_ALARM_NUM + ?,               
			  OIL_ALARM_TIME = OIL_ALARM_TIME + ?,              
			  STAGE_LOW_ALARM_NUM = STAGE_LOW_ALARM_NUM + ?,         
			  STAGE_LOW_ALARM_TIME = STAGE_LOW_ALARM_TIME + ?,        
			  FUEL_BLOCKING_ALARM_NUM = FUEL_BLOCKING_ALARM_NUM + ?,     
			  FUEL_BLOCKING_ALARM_TIME = FUEL_BLOCKING_ALARM_TIME + ?,    
			  EOIL_TEMPERATURE_ALARM_NUM = EOIL_TEMPERATURE_ALARM_NUM + ?,  
			  EOIL_TEMPERATURE_ALARM_TIME = EOIL_TEMPERATURE_ALARM_TIME + ?, 
			  RETARDER_HT_ALARM_NUM = RETARDER_HT_ALARM_NUM + ?,       
			  RETARDER_HT_ALARM_TIME = RETARDER_HT_ALARM_TIME + ?,      
			  EHOUSING_HT_ALARM_NUM = EHOUSING_HT_ALARM_NUM + ?,       
			  EHOUSING_HT_ALARM_TIME = EHOUSING_HT_ALARM_TIME + ?,      
			  OVERRPM_ALARM = OVERRPM_ALARM + ?,               
			  OVERRPM_TIME = OVERRPM_TIME + ?,                
			  GEAR_WRONG_NUM = GEAR_WRONG_NUM + ?,             
			  GEAR_WRONG_TIME = GEAR_WRONG_TIME + ?,             
			  GEAR_GLIDE_NUM = GEAR_GLIDE_NUM + ?,              
			  GEAR_GLIDE_TIME = GEAR_GLIDE_TIME + ?,             
			  URGENT_SPEED_NUM = URGENT_SPEED_NUM + ?,            
			  URGENT_SPEED_TIME = URGENT_SPEED_TIME + ?,           
			  URGENT_LOWDOWN_NUM = URGENT_LOWDOWN_NUM + ?,          
			  URGENT_LOWDOWN_TIME = URGENT_LOWDOWN_TIME + ?,         
			  LONG_IDLE_NUM = LONG_IDLE_NUM + ?,               
			  LONG_IDLE_TIME = LONG_IDLE_TIME + ?,              
			  AIR_CONDITION_NUM = AIR_CONDITION_NUM + ?,           
			  AIR_CONDITION_TIME = AIR_CONDITION_TIME + ?,          
			  BRAKE_SHOE_NUM = BRAKE_SHOE_NUM + ?,              
			  BRAKE_SHOE_TIME = BRAKE_SHOE_TIME + ?,             
			  AIR_FILTER_CLOG_NUM = AIR_FILTER_CLOG_NUM + ?,         
			  AIR_FILTER_CLOG_TIME = AIR_FILTER_CLOG_TIME + ?,        
			  ECONOMIC_RUN_TIME = ECONOMIC_RUN_TIME + ?,           
			  AREA_OVERSPEED_ALARM = AREA_OVERSPEED_ALARM + ?,        
			  AREA_OVERSPEED_TIME = AREA_OVERSPEED_TIME + ?,                    
			  HEATUP_TIME = HEATUP_TIME + ?,                 
			  AIRCONDITION_TIME = AIRCONDITION_TIME + ?, 
			  DOOR1_OPEN_NUM = DOOR1_OPEN_NUM + ?,          
			  DOOR2_OPEN_NUM = DOOR2_OPEN_NUM + ?,              
			  DOOR3_OPEN_NUM = DOOR3_OPEN_NUM + ?,              
			  DOOR4_OPEN_NUM = DOOR4_OPEN_NUM + ?, 
			  DOOR_OPEN_NUM = DOOR_OPEN_NUM + ?,                 
			  AREA_OPENDOOR_NUM = AREA_OPENDOOR_NUM + ?,           
			  AREA_OPENDOOR_TIME = AREA_OPENDOOR_TIME + ?,          
			  MWERE_BLOCKING_NUM = MWERE_BLOCKING_NUM + ?,          
			  MWERE_BLOCKING_TIME = MWERE_BLOCKING_TIME + ?,         
			  OVERLOAD_NUM = OVERLOAD_NUM + ?,                
			  ILLEGAL_STOP_NUM = ILLEGAL_STOP_NUM + ?,            
			  ILLEGAL_STOP_TIME = ILLEGAL_STOP_TIME + ?,     
			  GEAR_IMPROPER = GEAR_IMPROPER + ?,               
			  GEAR_TIME = GEAR_TIME + ?,                   
			  IDLING_TIME = IDLING_TIME + ?,
			  RUNNING_OIL = RUNNING_OIL + ?,
			  RETARDER_WORK_TIME = RETARDER_WORK_TIME + ?,
			  RETARDER_WORK_NUM = RETARDER_WORK_NUM + ?,
			  BRAKE_TIME = BRAKE_TIME + ?,
			  BRAKE_NUM = BRAKE_NUM + ?,
			  REVERSE_GEAR_TIME = REVERSE_GEAR_TIME + ?,
			  REVERSE_GEAR_NUM = REVERSE_GEAR_NUM + ?,
			  LOWER_BEAM_TIME = LOWER_BEAM_TIME + ?,
			  LOWER_BEAM_NUM = LOWER_BEAM_NUM + ?,
			  HIGH_BEAM_TIME = HIGH_BEAM_TIME + ?,
			  HIGH_BEAM_NUM = HIGH_BEAM_NUM + ?,
			  LEFT_TURNING_SIGNAL_TIME = LEFT_TURNING_SIGNAL_TIME + ?, 
			  LEFT_TURNING_SIGNAL_NUM = LEFT_TURNING_SIGNAL_NUM + ?,
			  RIGHT_TURNING_SIGNAL_TIME = RIGHT_TURNING_SIGNAL_TIME + ?,
			  RIGHT_TURNING_SIGNAL_NUM = RIGHT_TURNING_SIGNAL_NUM + ?,
			  OUTLINE_LAMP_TIME = OUTLINE_LAMP_TIME + ?,
			  OUTLINE_LAMP_NUM = OUTLINE_LAMP_NUM + ?,
			  TRUMPET_TIME = TRUMPET_TIME + ?,
			  TRUMPET_NUM = TRUMPET_NUM + ?,
			  AIRCONDITION_NUM = AIRCONDITION_NUM + ?,
			  FREE_POSITION_TIME = FREE_POSITION_TIME + ?,
			  FREE_POSITION_NUM = FREE_POSITION_NUM + ?,
			  ABS_WORK_TIME = ABS_WORK_TIME + ?,
			  ABS_WORK_NUM = ABS_WORK_NUM + ?,
			  HEAT_UP_TIME = HEAT_UP_TIME + ?,
			  HEAT_UP_NUM = HEAT_UP_NUM + ?,
			  CLUTCH_TIME = CLUTCH_TIME + ?,
			  CLUTCH_NUM = CLUTCH_NUM + ?,
			  OPENING_DOOR_EX_NUM = OPENING_DOOR_EX_NUM + ?,
			  PRECISE_OIL = PRECISE_OIL + ?,
			  HEAD_COLLIDE = HEAD_COLLIDE + ?,
			  VEHICLE_DEVIATE = VEHICLE_DEVIATE + ?
			  WHERE VID = ?
			</value>
			<type>string</type>
			<comments>更新车辆总累计表 </comments>
			<check></check>
		</item>
		
		<item name="sql_queryOilMonthNum" >
			<value>
				SELECT SUM(D_NUM) AS NUM FROM TH_VEHICLE_OIL O  WHERE O.VID = ? AND O.D_UTC &gt;= ? AND O.D_UTC &lt;= ?
			</value>
			<type>string</type>
			<comments>根据车辆ID，加油时间统计上一月累计加油量 </comments>
			<check></check>
		</item>
		<item name="sql_queryAsseessoil" >
			<value>
				SELECT ASSESS_VALUE FROM TB_ASSESSOIL_SET O WHERE VID = ?
			</value>
			<type>string</type>
			<comments>根据车辆ID查询车辆考核油耗值 </comments>
			<check></check>
		</item>
		<item name="sql_queryVehicleSta" >
			<value>
				SELECT OIL_WEAR,MILEAGE FROM TS_VEHICLE_STAT WHERE VID = ?
			</value>
			<type>string</type>
			<comments>根据车辆ID查询车辆总累计油耗值和里程 </comments>
			<check></check>
		</item>
		
		<item name="sql_saveOilWear" >
			<value>
				INSERT INTO TS_VEHICLE_OILWEAR (TVOID,STAT_YEAR,STAT_MONTH,VID,VEHICLE_NO,CORP_ID,CORP_NAME,CHECK_OILWEAR,FACT_OILWEAR,OILWEAR_GAP,ADDUP_OILING,ADDUP_OILWEAR,ADDUP_OILWEARGAP,FACT_MILEAGE,VBRAND_CODE,CREATE_UTC)
				VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储车辆燃油分析月报 </comments>
			<check></check>
		</item>
		<item name="sql_queryRegUser" >
			<value>
				SELECT O.ENT_ID,(CASE WHEN SB.NUM IS NULL THEN 0 ELSE SB.NUM END ) AS NUM FROM (SELECT COUNT(*) AS NUM,CS.ENT_ID FROM (SELECT S.ENT_ID FROM SYS_SP_OPERATOR S WHERE S.CREATE_TIME > ?) CS GROUP BY CS.ENT_ID)  SB RIGHT JOIN  TB_ORGANIZATION O  ON O.ENT_ID = SB.ENT_ID GROUP BY O.ENT_ID ,O.ENT_TYPE,SB.NUM HAVING O.ENT_TYPE = 1 order by O.ENT_ID 
			</value>
			<type>string</type>
			<comments>根据企业分组查询前一天新注册用户数量 </comments>
			<check></check>
		</item>
		<item name="sql_queryAllRegUser" >
			<value>
				SELECT O.ENT_ID,COUNT(*) AS ALLUSER FROM TB_ORGANIZATION O LEFT JOIN SYS_SP_OPERATOR SP ON SP.ENT_ID = O.ENT_ID GROUP BY O.ENT_ID,O.ENT_TYPE HAVING O.ENT_TYPE = 1
			</value>
			<type>string</type>
			<comments>查询企业所有用户 </comments>
			<check></check>
		</item>
		<item name="sql_queryLogOffUser" >
			<value>
				SELECT O.ENT_ID,COUNT(SP.OP_ID) AS LOGOFFUSER FROM TB_ORGANIZATION O LEFT JOIN SYS_SP_OPERATOR SP ON SP.ENT_ID = O.ENT_ID GROUP BY O.ENT_ID,O.ENT_TYPE,SP.OP_STATUS,SP.CREATE_TIME HAVING O.ENT_TYPE = 1 AND SP.OP_STATUS = 0 AND SP.CREATE_TIME &gt; ?
			</value>
			<type>string</type>
			<comments>查询企业当日注销用户</comments>
			<check></check>
		</item>
		<item name="sql_queryLogInUser" >
			<value>
				SELECT O.ENT_ID,COUNT(OP_ID) AS LOGINUSER FROM TB_ORGANIZATION O INNER JOIN (SELECT DISTINCT LOG.OP_ID,LOG.ENT_ID FROM TL_OPERATE_LOG LOG where LOG.LOG_UTC &gt;= ?) LOGTBL ON LOGTBL.ENT_ID = O.ENT_ID AND O.ENT_TYPE =1 AND O.ENABLE_FLAG =1 GROUP BY O.ENT_ID
			</value>
			<type>string</type>
			<comments>查询企业当日登录用户</comments>
			<check></check>
		</item>
		<item name="sql_queryRegVehicle" >
			<value>
				 SELECT E.ENT_ID,REGVEHICLE FROM  TB_ORGANIZATION E INNER JOIN TB_ORGANIZATION O ON E.ENT_ID = O.PARENT_ID INNER JOIN 
        (SELECT ENT_ID,COUNT(*) AS REGVEHICLE FROM ( SELECT V.VEHICLE_NO,V.ENT_ID FROM TB_VEHICLE V WHERE V.CREATE_TIME &gt;= ?)  GROUP BY ENT_ID) TEAMV ON 
         TEAMV.ENT_ID = O.ENT_ID
			</value>
			<type>string</type>
			<comments>查询企业当日注册车辆</comments>
			<check></check>
		</item>
		
		<item name="sql_queryLogOffVehicle" >
			<value>
				SELECT E.ENT_ID,COUNT(*) AS LOGOFFVEHICLE FROM  TB_ORGANIZATION E INNER JOIN TB_ORGANIZATION O ON E.ENT_ID = O.PARENT_ID LEFT JOIN TB_VEHICLE V 
				ON V.ENT_ID = O.ENT_ID GROUP BY E.ENT_ID,V.UPDATE_TIME,V.VEHICLE_STATE HAVING V.UPDATE_TIME &gt;= ? AND V.VEHICLE_STATE = 3
			</value>
			<type>string</type>
			<comments>查询企业当日吊销车辆数</comments>
			<check></check>
		</item>
		<item name="sql_queryOnLineVehicle" >
			<value>
				SELECT S.CORP_ID,COUNT(*) AS ONLINENUM FROM (SELECT L.CORP_ID,L.SYSUTC FROM TR_VEHICLE_LASTTRACK L WHERE L.SYSUTC &gt;= ? AND L.SYSUTC &lt; ?) S GROUP BY S.CORP_ID
			</value>
			<type>string</type>
			<comments>查询企业当日在线车辆数</comments>
			<check></check>
		</item>
		<item name="sql_queryNewRegOnLineVehicle" >
			<value>
				SELECT NV.ENT_ID, COUNT(NV.VID) AS NEWREGONLINE FROM (SELECT E.ENT_ID,V.VID FROM  TB_ORGANIZATION E INNER JOIN TB_ORGANIZATION O ON E.ENT_ID = O.PARENT_ID LEFT JOIN TB_VEHICLE V 
				ON V.ENT_ID = O.ENT_ID GROUP BY E.ENT_ID,V.VID,V.CREATE_TIME HAVING V.CREATE_TIME &gt;=?) NV INNER JOIN TR_VEHICLE_LASTTRACK L ON NV.VID = L.VID AND L.SYSUTC &gt;= ? GROUP 
          			BY NV.ENT_ID
			</value>
			<type>string</type>
			<comments>查询企业当日新上线车辆数</comments>
			<check></check>
		</item>
		<item name="sql_queryMoveVehicle" >
			<value>
				SELECT MV.CORP_ID,COUNT(*) AS MOVENUM FROM (SELECT L.CORP_ID FROM TR_VEHICLE_LASTTRACK L WHERE L.SYSUTC &gt;= ? AND L.SYSUTC &lt; ? AND L.GPS_SPEED &gt; 0 AND L.ENGINE_ROTATE_SPEED > 0) MV GROUP BY MV.CORP_ID
			</value>
			<type>string</type>
			<comments>查询企业行驶车辆数</comments>
			<check></check>
		</item>
		<item name="sql_queryAlarmVehicle" >
			<value>
				SELECT AV.CORP_ID,COUNT(*) AS ALARMV FROM (SELECT DISTINCT A.CORP_ID,A.VID FROM TS_ALARM_DAYSTAT A WHERE A.STAT_DATE &gt;= ? AND A.STAT_DATE &lt; ?) AV GROUP BY AV.CORP_ID
			</value>
			<type>string</type>
			<comments>查询企业报警车辆</comments>
			<check></check>
		</item>
		<item name="sql_querySendCommandVehicle" >
			<value>
					SELECT VCD.ENT_ID,COUNT(*) AS VNUM FROM (SELECT DISTINCT E.ENT_ID,CD.VID FROM  TB_ORGANIZATION O INNER JOIN TB_ORGANIZATION E ON E.ENT_ID = O.PARENT_ID INNER JOIN TB_VEHICLE VE ON O.ENT_ID = VE.ENT_ID INNER JOIN 
					(SELECT VID FROM TH_VEHICLE_COMMAND C WHERE C.CO_FROM =1 AND C.CO_SUTC &gt;= ? AND C.CO_SUTC &lt; ?) CD ON CD.VID = VE.VID) VCD GROUP BY VCD.ENT_ID
			</value>
			<type>string</type>
			<comments>查询企业监管车辆数(监管平台下发过指令的车辆数)</comments>
			<check></check>
		</item>
		<item name="sql_querySendCommandNum" >
			<value>
					SELECT VCD.ENT_ID,COUNT(*) AS VNUM FROM (SELECT E.ENT_ID,CD.VID FROM  TB_ORGANIZATION O INNER JOIN TB_ORGANIZATION E ON E.ENT_ID = O.PARENT_ID INNER JOIN TB_VEHICLE VE ON O.ENT_ID = VE.ENT_ID INNER JOIN 
					(SELECT VID FROM TH_VEHICLE_COMMAND C WHERE C.CO_FROM =1 AND C.CO_SUTC &gt;= ? AND C.CO_SUTC &lt; ?) CD ON CD.VID = VE.VID) VCD GROUP BY VCD.ENT_ID
			</value>
			<type>string</type>
			<comments>查询企业监管次数(监管平台指令下发个数)</comments>
			<check></check>
		</item>
			<item name="sql_queryCheckOffLineUser" >
			<value>
					SELECT CHL.ENT_ID, COUNT(*) AS CHNUM FROM (SELECT SP.OP_ID,CP.ENT_ID FROM TB_ORGANIZATION CP INNER JOIN SYS_SP_OPERATOR SP ON SP.ENT_ID = CP.ENT_ID AND CP.ENT_TYPE =1 INNER JOIN 
					(SELECT OP_ID FROM TB_OFFLINE_ALARM OA WHERE OA.CHECK_TIME &gt;= ? AND OA.CHECK_TIME &lt; ?) CA ON CA.OP_ID = SP.OP_ID) CHL GROUP BY CHL.ENT_ID
			</value>
			<type>string</type>
			<comments>查询企业查岗次数</comments>
			<check></check>
		</item>

		<item name="sql_saveCorpDayStat" >
			<value>
				INSERT INTO TS_CORP_DAYSTAT (STAT_DATE,CORP_ID,REGISTER_OP_NUM,LOGOUT_VEHICLE_NUM,LOGIN_OP_NUM,UNLOGIN_OP_NUM,REGISTER_VEHICLE_NUM,REVOKE_VEHICLE_NUM,NEW_ONLING_NUM,ONLINE_VEHICLE_NUM,RUN_VEHICLE_NUM,ALARM_UNDISPOSE_NUM,DATAUP_VEHICLE_NUM,CHECK_STATION_NUM,SUPERVISE_VEHICLE_NUM,SUPERVISE_NUM)
				VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储企业业务日报 </comments>
			<check></check>
		</item>
		<!-- ========================评分统计模块     start==================== -->
		<!-- 查询考核月度设置表 -->
		<item name="sql_queryCheckMonthSetSql" >
			<value>
				SELECT tcs.ent_id,
				       to_char(fun_utc2date(tcs.start_time),'YYYY-MM-DD') AS start_time,
				       to_char(fun_utc2date(tcs.end_time),'YYYY-MM-DD') AS end_time,
				       tcs.start_time AS l_startTime,
				       tcs.end_time  AS l_endTime
				FROM tb_checkmonth_set tcs 
				WHERE tcs.check_time_code=?  
				  AND tcs.enable_flag=1 
				  ORDER BY tcs.ent_id
			</value>
			<type>string</type>
			<comments>查询考核月度设置表  获得本月已经进行了考核月度设置的企业 </comments>
			<check></check>
		</item>
		<!-- 根据企业Id删除当月统计的车辆评分结果表TS_GRADE_MONTHSTAT数据 -->
		<item name="sql_delGradeMonthStatSql" >
			<value>
				DELETE FROM ts_grade_monthstat tgm 
				WHERE tgm.stat_year=? 
				  AND tgm.stat_month=? 
				  AND tgm.corp_id=?
			</value>
			<type>string</type>
			<comments>根据企业Id删除月统计的车辆评分结果表TS_GRADE_MONTHSTAT数据 </comments>
			<check></check>
		</item>
		<!-- 根据企业Id,起止日期 查询车辆日统计信息TS_VEHICLE_DAYSTAT表数据 -->
		<item name="sql_queryVehicleDayStatSql" >
			<value>
					SELECT FINAL_SCORE.VID, 
			             TV.VIN_CODE,
			             TV.VEHICLE_NO, 
			             TV.VBRAND_CODE,
			             TV.PROD_CODE, 
			             TV.EMODEL_CODE, 
			             '' VLINE_ID,
			             '' LINE_NAME, 
			             (SELECT TOR.PARENT_ID FROM TB_ORGANIZATION TOR WHERE TOR.ENT_ID = TV.ENT_ID AND ROWNUM=1) AS CORP_ID,  
			             (SELECT N.ENT_NAME FROM TB_ORGANIZATION N   
			               WHERE N.ENT_ID = (SELECT TOR.PARENT_ID   
			                                   FROM TB_ORGANIZATION TOR  
			                                  WHERE TOR.ENT_ID = TV.ENT_ID) AND ROWNUM=1) AS CORP_NAME, 
			             TV.ENT_ID AS TEAM_ID, 
			             (SELECT TOR.ENT_NAME FROM TB_ORGANIZATION TOR WHERE TOR.ENT_ID = TV.ENT_ID AND ROWNUM=1) AS TEAM_NAME,
			             FINAL_SCORE.MILEAGE_SUM, 
			             FINAL_SCORE.OVERSPEED_SUM,
			             FINAL_SCORE.OVERSPEED_TIMES,
			             FINAL_SCORE.OIL_OVERSPEED_SCORE, 
			             FINAL_SCORE.SAFE_OVERSPEED_SCORE, 
			             FINAL_SCORE.OVERRPM_SUM, 
			             FINAL_SCORE.OVERRPM_TIMES, 
			             FINAL_SCORE.OIL_OVERRPM_SCORE, 
			             FINAL_SCORE.GEAR_GLIDE_SUM,
			             FINAL_SCORE.GEAR_GLIDE_TIMES, 
			             FINAL_SCORE.OIL_GEAR_GLIDE_SCORE,
			             FINAL_SCORE.SAFE_GEAR_GLIDE_SCORE, 
			             FINAL_SCORE.LONG_IDLE_SUM, 
			             FINAL_SCORE.LONG_IDLE_TIMES, 
			             FINAL_SCORE.OIL_LONG_IDLE_SCORE, 
			             FINAL_SCORE.FATIGUE_SUM, 
			             FINAL_SCORE.FATIGUE_TIMES, 
			             FINAL_SCORE.SAFE_FATIGUE_SCORE, 
			             FINAL_SCORE.ECONOMIC_RUN_BL,
			             FINAL_SCORE.ECONOMIC_RUN_TIMES,
			             FINAL_SCORE.OIL_ECONOMIC_RUN_SCORE, 
			             FINAL_SCORE.AIR_CONDITION_SUM, 
			             FINAL_SCORE.AIR_CONDITION_TIMES, 
			             FINAL_SCORE.OIL_AIR_CONDITION_SCORE, 
			             FINAL_SCORE.ENGINE_ROTATE_TIMES,
			             FINAL_SCORE.OIL_SCORE_SUM, 
			             FINAL_SCORE.SAFE_SCORE_SUM, 
			             FINAL_SCORE.FAT_OILWEAR_100,
			             FINAL_SCORE.CHECK_OILWEAR_100, 
			             FINAL_SCORE.SAVEOIL_SUM, 
			             FINAL_SCORE.SAVEOIL_RATIO, 
			             FINAL_SCORE.OILWEAR_SCORE_SUM AS OILWEAR_SCORE,
			             ROUND(FINAL_SCORE.OIL_SCORE_SUM +
			                   FINAL_SCORE.SAFE_SCORE_SUM  +
			                   FINAL_SCORE.OILWEAR_SCORE_SUM,2) AS ALL_SCORE_SUM,
			             FINAL_SCORE.URGENT_SPEED_NUM,      
			             FINAL_SCORE.OIL_URGENT_SPEEDUP_SCORE,
			             FINAL_SCORE.SAFE_URGENT_SPEEDUP_SCORE,
			              FINAL_SCORE.URGENT_LOWDOWN_NUM,
			             FINAL_SCORE.OIL_URGENT_SPEEDDOWN_SCORE,
			            FINAL_SCORE.SAFE_URGENT_SPEEDDOWN_SCORE,
			                 TV.INNER_CODE,
			            FINAL_SCORE.OIL_WEAR_SUM
			        FROM TB_VEHICLE TV,
			             (SELECT BASE_SCORE.*,
			               (OIL_OVERSPEED_SCORE +
			                      OIL_OVERRPM_SCORE +
			                      OIL_LONG_IDLE_SCORE +
			                      OIL_GEAR_GLIDE_SCORE +
			                      OIL_URGENT_SPEEDUP_SCORE +
			                      OIL_URGENT_SPEEDDOWN_SCORE +
			                      OIL_AIR_CONDITION_SCORE +
			                      OIL_ECONOMIC_RUN_SCORE) AS OIL_SCORE_SUM, 
			                     (SAFE_OVERSPEED_SCORE +
			                           SAFE_GEAR_GLIDE_SCORE +
			                           SAFE_URGENT_SPEEDUP_SCORE +
			                           SAFE_URGENT_SPEEDDOWN_SCORE +
			                           SAFE_FATIGUE_SCORE) AS SAFE_SCORE_SUM, 
			      OILWEAR_SCORE AS OILWEAR_SCORE_SUM
			                FROM (SELECT MONTHLY.*, 
			                             TVS.OIL_RIGHT,
			                             TVS.SPEEDING_RIGHT, 
			                             TVS.RPM_RIGHT, 
			                             TVS.LONGIDLE_RIGHT, 
			                             TVS.GEARGLIDE_RIGHT, 
			                             TVS.URGENT_SPEEDUP_RIGHT,
			                             TVS.URGENT_SPEEDDOWN_RIGHT,
			                             TVS.AIRCOND_RIGHT, 
			                             TVS.ECONOMIC_RIGHT,
			                             TVS.SAFE_RIGHT,
			                             TVS.ANSPEED_RIGHT,
			                             TVS.ANGEARGLIDE_RIGHT, 
			                             TVS.ANURGENT_SPEEDUP_RIGHT,
			                             TVS.ANURGENT_SPEEDDOWN_RIGHT,
			                             TVS.FATIGUE_RIGHT, 
			                             TVS.OILWEAR_RIGHT,
			                             TVS.OILWEARCHK_RIGHT,
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERSPEED_SUM, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.SPEEDING_MIN,?),
			                                                               NVL(TVS.SPEEDING_MAX,?))*TVS.SPEEDING_RIGHT/100,2) AS OIL_OVERSPEED_SCORE, 
			      
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERRPM_SUM, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.RPM_MIN,?),
			                                                               NVL(TVS.RPM_MAX,?))*TVS.RPM_RIGHT /100,2) AS OIL_OVERRPM_SCORE, 
			      
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.LONG_IDLE_TIMES, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.LONGIDLE_MIN,?),
			                                                               NVL(TVS.LONGIDLE_MAX,?))*TVS.LONGIDLE_RIGHT /100,2) AS OIL_LONG_IDLE_SCORE, 
			      
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.GEAR_GLIDE_TIMES, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.GEARGLIDE_MIN,?),
			                                                               NVL(TVS.GEARGLIDE_MAX,?))*TVS.GEARGLIDE_RIGHT /100,2) AS OIL_GEAR_GLIDE_SCORE, 
			                                                               
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_SPEED_NUM, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.URGENT_SPEEDUP_MIN,?),
			                                                               NVL(TVS.URGENT_SPEEDUP_MAX,?))*TVS.URGENT_SPEEDUP_RIGHT /100,2) AS OIL_URGENT_SPEEDUP_SCORE,
			                                                               
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_LOWDOWN_NUM, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.URGENT_SPEEDDOWN_MIN,?),
			                                                               NVL(TVS.URGENT_SPEEDDOWN_MAX,?))*TVS.URGENT_SPEEDDOWN_RIGHT /100,2) AS OIL_URGENT_SPEEDDOWN_SCORE,
			      
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.AIR_CONDITION_TIMES, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.AIRCOND_MIN,?),
			                                                               NVL(TVS.AIRCOND_MAX,?))*TVS.AIRCOND_RIGHT/100,2) AS OIL_AIR_CONDITION_SCORE, 
			      
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.ECONOMIC_RUN_BL, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.ECONOMIC_MIN,?),
			                                                               NVL(TVS.ECONOMIC_MAX,?))*TVS.ECONOMIC_RIGHT /100,2) AS OIL_ECONOMIC_RUN_SCORE, 
			      
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERSPEED_SUM, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.ANSPEED_MIN,?),
			                                                               NVL(TVS.ANSPEED_MAX,?))*TVS.ANSPEED_RIGHT /100,2) AS SAFE_OVERSPEED_SCORE, 
			      
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.GEAR_GLIDE_TIMES, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.ANGEARGLIDE_MIN,?),
			                                                               NVL(TVS.ANGEARGLIDE_MAX,?))*TVS.ANGEARGLIDE_RIGHT /100,2) AS SAFE_GEAR_GLIDE_SCORE, 
			
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_SPEED_NUM, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.ANURGENT_SPEEDUP_MIN,?),
			                                                               NVL(TVS.ANURGENT_SPEEDUP_MAX,?))*TVS.ANURGENT_SPEEDUP_RIGHT /100,2) AS SAFE_URGENT_SPEEDUP_SCORE,
			                                                               
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_LOWDOWN_NUM, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.ANURGENT_SPEEDDOWN_MIN,?),
			                                                               NVL(TVS.ANURGENT_SPEEDDOWN_MAX,?))*TVS.ANURGENT_SPEEDDOWN_RIGHT /100,2) AS SAFE_URGENT_SPEEDDOWN_SCORE,
			      
			                             ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.FATIGUE_SUM, 
			                                                               MONTHLY.MILEAGE_SUM,
			                                                               NVL(TVS.FATIGUE_MIN,?),
			                                                               NVL(TVS.FATIGUE_MAX,?))*TVS.FATIGUE_RIGHT /100,2) AS SAFE_FATIGUE_SCORE, 
			                             
			                             GRADE_SCORE_PACK.COUNT_FACTOILWEAR_VALUE(MONTHLY.OIL_WEAR_SUM,
			                                                                      MONTHLY.MILEAGE_SUM) AS FAT_OILWEAR_100,
			                                         NVL(MONTHLY.ASSESS_VALUE,0)  AS CHECK_OILWEAR_100, 
			      
			                             GRADE_SCORE_PACK.COUNT_SAVEOIL_VALUE(NVL(MONTHLY.ASSESS_VALUE, 0),MONTHLY.MILEAGE_SUM,MONTHLY.OIL_WEAR_SUM) AS SAVEOIL_SUM,
			      
			                             GRADE_SCORE_PACK.COUNT_SAVEOIL_RATIO(NVL(MONTHLY.ASSESS_VALUE, 0),MONTHLY.MILEAGE_SUM,MONTHLY.OIL_WEAR_SUM) AS SAVEOIL_RATIO, 
			                                                          
			                             ROUND(GRADE_SCORE_PACK.COUNT_CHECKOILWEAR_SCORE_REAL(MONTHLY.OIL_WEAR_SUM,MONTHLY.MILEAGE_SUM,
			                                                               NVL(MONTHLY.ASSESS_VALUE,0),NVL(TVS.OILWEARCHK_MIN,0),
			                                                               NVL(TVS.OILWEARCHK_MAX,10))*TVS.OILWEARCHK_RIGHT/100,2) AS OILWEAR_SCORE 
			      
			                        FROM 
			                           (SELECT BASEINFO.*,ASSINFO.ASSESS_VALUE FROM 
			                             (SELECT TVD.VID,   
			                                     TVD.CORP_ID,                                      
			                                     SUM(NVL(TVD.MILEAGE, 0)) * 0.1 AS MILEAGE_SUM, 
			                                     SUM(NVL(TVD.OIL_WEAR, 0)) * 0.5 AS OIL_WEAR_SUM, 
			                                     SUM(NVL(TVD.OVERSPEED_ALARM, 0)) AS OVERSPEED_SUM, 
			                                     SUM(NVL(TVD.OVERSPEED_TIME, 0)) AS OVERSPEED_TIMES, 
			                                     SUM(NVL(TVD.OVERRPM_ALARM, 0)) AS OVERRPM_SUM, 
			                                     SUM(NVL(TVD.OVERRPM_TIME, 0)) AS OVERRPM_TIMES, 
			                                     SUM(NVL(TVD.LONG_IDLE_NUM, 0)) AS LONG_IDLE_SUM, 
			                                     SUM(NVL(TVD.LONG_IDLE_TIME, 0)) AS LONG_IDLE_TIMES, 
			                                     SUM(NVL(TVD.GEAR_GLIDE_NUM, 0)) AS GEAR_GLIDE_SUM,
			                                     SUM(NVL(TVD.GEAR_GLIDE_TIME, 0)) AS GEAR_GLIDE_TIMES,
			                                     SUM(NVL(TVD.URGENT_SPEED_NUM, 0)) AS URGENT_SPEED_NUM,
			                                     SUM(NVL(TVD.URGENT_SPEED_TIME, 0)) AS URGENT_SPEED_TIME,
			                                     SUM(NVL(TVD.URGENT_LOWDOWN_NUM, 0)) AS URGENT_LOWDOWN_NUM,
			                                     SUM(NVL(TVD.URGENT_LOWDOWN_TIME, 0)) AS URGENT_LOWDOWN_TIME, 
			                                     SUM(NVL(TVD.AIR_CONDITION_NUM, 0)) AS AIR_CONDITION_SUM,
			                                     SUM(NVL(TVD.AIR_CONDITION_TIME, 0)) AS AIR_CONDITION_TIMES, 
			                                     SUM(NVL(TVD.FATIGUE_ALARM, 0)) AS FATIGUE_SUM, 
			                                     SUM(NVL(TVD.FATIGUE_TIME, 0)) AS FATIGUE_TIMES,
			                                     SUM(NVL(TVD.ENGINE_ROTATE_TIME, 0)) AS ENGINE_ROTATE_TIMES, 
			                                     SUM(NVL(TVD.ECONOMIC_RUN_TIME, 0)) AS ECONOMIC_RUN_TIMES, 
			                                     NVL(ROUND(DECODE(SUM(CASE
			                                                            WHEN TVD.ENGINE_ROTATE_TIME IS NULL THEN
			                                                             0
			                                                            ELSE
			                                                             TVD.ENGINE_ROTATE_TIME
			                                                          END),
			                                                      0,
			                                                      0,
			                                                      SUM(CASE
			                                                            WHEN TVD.ECONOMIC_RUN_TIME IS NULL THEN
			                                                             0
			                                                            ELSE
			                                                             TVD.ECONOMIC_RUN_TIME
			                                                          END) * 100 /
			                                                      SUM(CASE
			                                                            WHEN TVD.ENGINE_ROTATE_TIME IS NULL THEN
			                                                             0
			                                                            ELSE
			                                                             TVD.ENGINE_ROTATE_TIME
			                                                          END)),
			                                               2),
			                                         0) AS ECONOMIC_RUN_BL 
			                                FROM TS_VEHICLE_DAYSTAT TVD,TB_VEHICLE TV
			                               WHERE  TVD.VID = TV.VID
			                               		AND (TV.PROG_ID IS NULL OR TV.PROG_ID IN (
			                               		SELECT P.PROG_ID FROM TB_VEHICLE_CONFIGUER_PROGRAMME P,TB_VEHICLE_CONFIGUER_DETAIL D
			                               		WHERE P.PROG_ID = D.PROG_ID 
			                               		AND P.ENABLE_FLAG = '1'
			                               		AND D.CODE_ID = '000100050003'
			                               		))
			                               	AND TVD.STAT_DATE &gt;=
			                                     FUN_DATE2UTC(TO_DATE(?, 'YYYY-MM-DD'))
			                                 AND TVD.STAT_DATE &lt;=
			                                     FUN_DATE2UTC(TO_DATE(?, 'YYYY-MM-DD'))
			                                  AND TVD.CORP_ID=?
			                               GROUP BY TVD.VID,TVD.CORP_ID
			                               ORDER BY TVD.VID) BASEINFO,
			                               (SELECT ASS.VID,ASS.CORP_ID,ASS.ASSESS_VALUE FROM TB_CHECKMONTH_SET CHKMONTH,
			              TB_ASSESSOIL_SET ASS
			              WHERE CHKMONTH.CHECK_TIME_ID = ASS.CHECK_TIME_ID(+)
			                    AND CHKMONTH.ENABLE_FLAG='1' AND ASS.ENABLE_FLAG='1'
			                    AND CHKMONTH.CHECK_TIME_CODE=?
			                    AND CORP_ID = ?) ASSINFO
			                    WHERE BASEINFO.VID=ASSINFO.VID(+)  ) MONTHLY,
			                     (SELECT SET0.ENT_ID,SCORE.* FROM TB_VEHICLE_SCORE SCORE,TB_CHECKMONTH_SET SET0 
			                     WHERE SCORE.CHECK_TIME_ID = SET0.CHECK_TIME_ID
			                     AND SCORE.ENABLE_FLAG =1 AND SET0.ENABLE_FLAG =1
			                     AND SET0.ENT_ID=?
			                    AND SET0.CHECK_TIME_CODE=? 
			                    ) TVS
			                    WHERE MONTHLY.CORP_ID = TVS.ENT_ID
			                         ) BASE_SCORE) FINAL_SCORE
			       WHERE FINAL_SCORE.VID = TV.VID(+)
			        ORDER BY FINAL_SCORE.VID
			</value>
			<type>string</type>
			<comments>根据企业Id,起止日期 查询车辆日统计信息TS_VEHICLE_DAYSTAT表数据 </comments>
			<check></check>
		</item>
		
		<!-- 插入当月统计数据到车辆评分结果表TS_GRADE_MONTHSTAT -->
		<item name="sql_insertGradeMonthStatSql" >
			<value>
				 INSERT INTO TS_GRADE_MONTHSTAT  
				  (STAT_YEAR,STAT_MONTH,YEAR_MONTH,VID,C_VIN,  
				   VEHICLE_NO,VBRAND_CODE,PROD_CODE,EMODEL_CODE,VLINE_ID,
				   VLINE_NAME,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,
				   TRAVEL_MILEAGE,OVERSPEED_SUM,OVERSPEED_TIME,OIL_OVERSPEED_SCORE,SAFE_OVERSPEED_SCORE,
				   OVERRPM_SUM,OVERRPM_TIME,OIL_OVERRPM_SCORE,GEAR_GLIDE_SUM,GEAR_GLIDE_TIME,
				   OIL_GEAR_GLIDE_SCORE,SAFE_GEAR_GLIDE_SCORE,LONG_IDLE_SUM,LONG_IDLE_TIME,OIL_LONG_IDLE_SCORE,
				   FATIGUE_SUM,FATIGUE_TIME,SAFE_FATIGUE_SCORE,ECONOMIC_RUN_SUM,ECONOMIC_RUN_TIME,  
				   OIL_ECONOMIC_RUN_SCORE,AIR_CONDITION_SUM,
				   AIR_CONDITION_TIME,OIL_AIR_CONDITION_SCORE, ENGINE_ROTATE_TIME,OIL_SCORE_SUM,SAFE_SCORE_SUM,
				   FACT_OILWEAR,CHECK_OILWEAR,SAVEOIL_SUM,SAVEOIL_RATIO,OILWEAR_SCORE,
				   ALL_SCORE_SUM,URGENT_LOWDOWN_NUM,OIL_URGENT_LOWDOWN_SCORE,SAFE_URGENT_LOWDOWN_SCORE,
           URGENT_SPEED_NUM,OIL_URGENT_SPEED_SCORE,SAFE_URGENT_SPEED_SCORE,INNER_CODE,OIL_WEAR_SUM)  
				VALUES  
				  (?,?,?,?,?,  
				   ?,?,?,?,?,
				   ?,?,?,?,?,  
				   ?,?,?,?,?,
				   ?,?,?,?,?,
				   ?,?,?,?,?,
				   ?,?,?,?,?,  
				   ?,?,?,?,?,
				   ?,?,?,?,?,
				   ?,?,?,?,?,
           			?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments> 插入当月统计数据到车辆评分结果表TS_GRADE_MONTHSTAT  </comments>
			<check></check>
		</item>
		<!-- ========================评分统计模块     end==================== -->
		
			<!-- ========================车速分析存储模块    ==================== -->
		<item name="sql_saveSpeeddistDayStat" >
			<value>
			 insert into TH_SPEEDDIST_DAY (AUTO_ID, VID, VEHICLE_NO, C_VIN, STAT_TIME, SPEED_0, SPEED_0_TIME,
		      SPEED_0_10, SPEED_0_10_TIME, SPEED_10_20, SPEED_10_20_TIME, SPEED_20_30, SPEED_20_30_TIME,
		      SPEED_30_40, SPEED_30_40_TIME, SPEED_40_50, SPEED_40_50_TIME, SPEED_50_60, SPEED_50_60_TIME,
		      SPEED_60_70, SPEED_60_70_TIME, SPEED_70_80, SPEED_70_80_TIME, SPEED_80_90, SPEED_80_90_TIME,
		      SPEED_90_100, SPEED_90_100_TIME, SPEED_100_110, SPEED_100_110_TIME, SPEED_110_120,
		      SPEED_110_120_TIME, SPEED_120_130, SPEED_120_130_TIME, SPEED_130_140, SPEED_130_140_TIME,
		      SPEED_140_150, SPEED_140_150_TIME, SPEED_150_160, SPEED_150_160_TIME, SPEED_160_170,
		      SPEED_160_170_TIME, SPEED_170_180, SPEED_170_180_TIME, SPEED_180_190, SPEED_180_190_TIME,
		      SPEED_190_200, SPEED_190_200_TIME, SPEED_MAX, SPEED_MAX_TIME, MAX_SPEED, MIN_SPEED)				      
		    values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?)
			</value>						
			<type>string</type>
			<comments>车速分析存储 </comments>
			<check></check>
		</item>
		<!-- ========================转速分析存储模块    ==================== -->
		<item name="sql_saveRotateDayStat" >
			<value>
			insert into TH_ROTATESPEED_DAY (ROTATE_ID, VID, VEHICLE_NO, C_VIN, TERMINAL_UTC, CREATE_TIME,
		      ROTATE_SPEED_0, ROTATE_SPEED_0_TIME, ROTATE_SPEED_0_100, ROTATE_SPEED_0_100_TIME,
		      ROTATE_SPEED_100_200, ROTATE_SPEED_100_200_TIME, ROTATE_SPEED_200_300,
		      ROTATE_SPEED_200_300_TIME, ROTATE_SPEED_300_400, ROTATE_SPEED_300_400_TIME,
		      ROTATE_SPEED_400_500, ROTATE_SPEED_400_500_TIME, ROTATE_SPEED_500_600,
		      ROTATE_SPEED_500_600_TIME, ROTATE_SPEED_600_700, ROTATE_SPEED_600_700_TIME,
		      ROTATE_SPEED_700_800, ROTATE_SPEED_700_800_TIME, ROTATE_SPEED_800_900,
		      ROTATE_SPEED_800_900_TIME, ROTATE_SPEED_900_1000, ROTATE_SPEED_900_1000_TIME,
		      ROTATE_SPEED_1000_1100, ROTATE_SPEED_1000_1100_TIME, ROTATE_SPEED_1100_1200,
		      ROTATE_SPEED_1100_1200_TIME, ROTATE_SPEED_1200_1300, ROTATE_SPEED_1200_1300_TIME,
		      ROTATE_SPEED_1300_1400, ROTATE_SPEED_1300_1400_TIME, ROTATE_SPEED_1400_1500,
		      ROTATE_SPEED_1400_1500_TIME, ROTATE_SPEED_1500_1600, ROTATE_SPEED_1500_1600_TIME,
		      ROTATE_SPEED_1600_1700, ROTATE_SPEED_1600_1700_TIME, ROTATE_SPEED_1700_1800,
		      ROTATE_SPEED_1700_1800_TIME, ROTATE_SPEED_1800_1900, ROTATE_SPEED_1800_1900_TIME,
		      ROTATE_SPEED_1900_2000, ROTATE_SPEED_1900_2000_TIME, ROTATE_SPEED_2000_2100,
		      ROTATE_SPEED_2000_2100_TIME, ROTATE_SPEED_2100_2200, ROTATE_SPEED_2100_2200_TIME,
		      ROTATE_SPEED_2200_2300, ROTATE_SPEED_2200_2300_TIME, ROTATE_SPEED_2300_2400,
		      ROTATE_SPEED_2300_2400_TIME, ROTATE_SPEED_2400_2500, ROTATE_SPEED_2400_2500_TIME,
		      ROTATE_SPEED_2500_2600, ROTATE_SPEED_2500_2600_TIME, ROTATE_SPEED_2600_2700,
		      ROTATE_SPEED_2600_2700_TIME, ROTATE_SPEED_2700_2800, ROTATE_SPEED_2700_2800_TIME,
		      ROTATE_SPEED_2800_2900, ROTATE_SPEED_2800_2900_TIME, ROTATE_SPEED_2900_3000,
		      ROTATE_SPEED_2900_3000_TIME, ROTATE_SPEED_MAX, ROTATE_SPEED_MAX_TIME, PERCENT_60_80_FUHELV,
		      MIN_ROTATE_SPEED, MAX_ROTATE_SPEED)
		    values (?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?)
			</value>						
			<type>string</type>
			<comments>转速分析存储 </comments>
			<check></check>
		</item>
		<!-- ========================蓄电池电压分布统计模块    ==================== -->
		<item name="sql_saveVoltageDayStat" >
			<value>
			 insert into TH_VOLTAGEDIST_DAY (AUTO_ID, VID, VEHICLE_NO, VIN_CODE, STAT_TIME, VOLTAGE_0,
		      VOLTAGE_0_TIME, VOLTAGE_0_20, VOLTAGE_0_20_TIME, VOLTAGE_20_21_1, VOLTAGE_20_21_1_TIME,
		      VOLTAGE_20_21_2, VOLTAGE_20_21_2_TIME, VOLTAGE_21_22_1, VOLTAGE_21_22_1_TIME, VOLTAGE_21_22_2,
		      VOLTAGE_21_22_2_TIME, VOLTAGE_22_23_1, VOLTAGE_22_23_1_TIME, VOLTAGE_22_23_2,
		      VOLTAGE_22_23_2_TIME, VOLTAGE_23_24_1, VOLTAGE_23_24_1_TIME, VOLTAGE_23_24_2,
		      VOLTAGE_23_24_2_TIME, VOLTAGE_24_25_1, VOLTAGE_24_25_1_TIME, VOLTAGE_24_25_2,
		      VOLTAGE_24_25_2_TIME, VOLTAGE_25_26_1, VOLTAGE_25_26_1_TIME, VOLTAGE_25_26_2,
		      VOLTAGE_25_26_2_TIME, VOLTAGE_26_27_1, VOLTAGE_26_27_1_TIME, VOLTAGE_26_27_2,
		      VOLTAGE_26_27_2_TIME, VOLTAGE_27_28_1, VOLTAGE_27_28_1_TIME, VOLTAGE_27_28_2,
		      VOLTAGE_27_28_2_TIME, VOLTAGE_28_29_1, VOLTAGE_28_29_1_TIME, VOLTAGE_28_29_2,
		      VOLTAGE_28_29_2_TIME, VOLTAGE_29_MAX, VOLTAGE_29_MAX_TIME, MAX_VOLTAGE, MIN_VOLTAGE, SUMTIME,
		      SUMCOUNT, VOLTAGE_0_12_1, VOLTAGE_0_12_1_TIME, VOLTAGE_0_12_2, VOLTAGE_0_12_2_TIME,
		      VOLTAGE_12_13_1, VOLTAGE_12_13_1_TIME, VOLTAGE_12_13_2, VOLTAGE_12_13_2_TIME, VOLTAGE_13_14_1,
		      VOLTAGE_13_14_1_TIME, VOLTAGE_13_14_2, VOLTAGE_13_14_2_TIME, VOLTAGE_14_1, VOLTAGE_14_1_TIME,
		      VOLTAGE_14_MAX, VOLTAGE_14_MAX_TIME)
		    values (?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
		      ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>						
			<type>string</type>
			<comments>蓄电池电压分布统计模块 </comments>
			<check></check>
		</item>
		<item name="sql_saveOilPressureDayStat" >
			<value>
				 INSERT INTO TH_OILPRESSUREDIST_DAY  
				  (AUTO_ID               ,
				  VID                   ,
				  VEHICLE_NO            ,
				  VIN_CODE              ,
				  STAT_TIME             ,
				  PRESSURE_0            ,
				  PRESSURE_0_TIME       ,
				  PRESSURE_0_50         ,
				  PRESSURE_0_50_TIME    ,
				  PRESSURE_50_100       ,
				  PRESSURE_50_100_TIME  ,
				  PRESSURE_100_150      ,
				  PRESSURE_100_150_TIME ,
				  PRESSURE_150_200      ,
				  PRESSURE_150_200_TIME ,
				  PRESSURE_200_250      ,
				  PRESSURE_200_250_TIME ,
				  PRESSURE_250_300      ,
				  PRESSURE_250_300_TIME ,
				  PRESSURE_300_350      ,
				  PRESSURE_300_350_TIME ,
				  PRESSURE_350_400      ,
				  PRESSURE_350_400_TIME ,
				  PRESSURE_400_450      ,
				  PRESSURE_400_450_TIME ,
				  PRESSURE_450_500      ,
				  PRESSURE_450_500_TIME ,
				  PRESSURE_500_550      ,
				  PRESSURE_500_550_TIME ,
				  PRESSURE_550_600      ,
				  PRESSURE_550_600_TIME ,
				  PRESSURE_600_650      ,
				  PRESSURE_600_650_TIME ,
				  PRESSURE_650_700      ,
				  PRESSURE_650_700_TIME ,
				  PRESSURE_700_750      ,
				  PRESSURE_700_750_TIME ,
				  PRESSURE_750_800      ,
				  PRESSURE_750_800_TIME ,
				  PRESSURE_800_MAX      ,
				  PRESSURE_800_MAX_TIME ,
				  MAX_PRESSURE          ,
				  MIN_PRESSURE) 
				  VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储机油压力 </comments>
			<check></check>
		</item>
		<item name="sql_saveCoolLiquidtemDayStat" >
			<value>
				 INSERT INTO TH_COOLLIQUIDTEM_DIST_DAY (
				  AUTO_ID                  ,
				  VID                      ,
				  VEHICLE_NO               ,
				  VIN_CODE                 ,
				  STAT_TIME                ,
				  TEMPERATURE_0            ,
				  TEMPERATURE_0_TIME       ,
				  TEMPERATURE_0_5          ,
				  TEMPERATURE_0_5_TIME     ,
				  TEMPERATURE_5_10         ,
				  TEMPERATURE_5_10_TIME    ,
				  TEMPERATURE_10_15        ,
				  TEMPERATURE_10_15_TIME   ,
				  TEMPERATURE_15_20        ,
				  TEMPERATURE_15_20_TIME   ,
				  TEMPERATURE_20_25        ,
				  TEMPERATURE_20_25_TIME   ,
				  TEMPERATURE_25_30        ,
				  TEMPERATURE_25_30_TIME   ,
				  TEMPERATURE_30_35        ,
				  TEMPERATURE_30_35_TIME   ,
				  TEMPERATURE_35_40        ,
				  TEMPERATURE_35_40_TIME   ,
				  TEMPERATURE_40_45        ,
				  TEMPERATURE_40_45_TIME   ,
				  TEMPERATURE_45_50        ,
				  TEMPERATURE_45_50_TIME   ,
				  TEMPERATURE_50_55        ,
				  TEMPERATURE_50_55_TIME   ,
				  TEMPERATURE_55_60        ,
				  TEMPERATURE_55_60_TIME   ,
				  TEMPERATURE_60_65        ,
				  TEMPERATURE_60_65_TIME   ,
				  TEMPERATURE_65_70        ,
				  TEMPERATURE_65_70_TIME   ,
				  TEMPERATURE_70_75        ,
				  TEMPERATURE_70_75_TIME   ,
				  TEMPERATURE_75_80        ,
				  TEMPERATURE_75_80_TIME   ,
				  TEMPERATURE_80_85        ,
				  TEMPERATURE_80_85_TIME   ,
				  TEMPERATURE_85_90        ,
				  TEMPERATURE_85_90_TIME   ,
				  TEMPERATURE_90_95        ,
				  TEMPERATURE_90_95_TIME   ,
				  TEMPERATURE_95_100       ,
				  TEMPERATURE_95_100_TIME  ,
				  TEMPERATURE_100_105      ,
				  TEMPERATURE_100_105_TIME ,
				  TEMPERATURE_105_110      ,
				  TEMPERATURE_105_110_TIME ,
				  TEMPERATURE_110_115      ,
				  TEMPERATURE_110_115_TIME ,
				  TEMPERATURE_115_120      ,
				  TEMPERATURE_115_120_TIME ,
				  TEMPERATURE_120_MAX      ,
				  TEMPERATURE_120_MAX_TIME ,
				  MAX_TEMPERATURE          ,
				  MIN_TEMPERATURE          
				)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储冷却液温度 </comments>
			<check></check>
		</item>
		<item name="sql_saveGasPressureDayStat" >
			<value>
				 INSERT INTO TH_GASPRESSURE_DIST_DAY (
				  AUTO_ID               ,
				  VID                   ,
				  VEHICLE_NO            ,
				  VIN_CODE              ,
				  STAT_TIME             ,
				  PRESSURE_0            ,
				  PRESSURE_0_TIME       ,
				  PRESSURE_0_50         ,
				  PRESSURE_0_50_TIME    ,
				  PRESSURE_50_55        ,
				  PRESSURE_50_55_TIME   ,
				  PRESSURE_55_60        ,
				  PRESSURE_55_60_TIME   ,
				  PRESSURE_60_65        ,
				  PRESSURE_60_65_TIME   ,
				  PRESSURE_65_70        ,
				  PRESSURE_65_70_TIME   ,
				  PRESSURE_70_75        ,
				  PRESSURE_70_75_TIME   ,
				  PRESSURE_75_80        ,
				  PRESSURE_75_80_TIME   ,
				  PRESSURE_80_85        ,
				  PRESSURE_80_85_TIME   ,
				  PRESSURE_85_90        ,
				  PRESSURE_85_90_TIME   ,
				  PRESSURE_90_95        ,
				  PRESSURE_90_95_TIME   ,
				  PRESSURE_95_100       ,
				  PRESSURE_95_100_TIME  ,
				  PRESSURE_100_105      ,
				  PRESSURE_100_105_TIME ,
				  PRESSURE_105_110      ,
				  PRESSURE_105_110_TIME ,
				  PRESSURE_110_115      ,
				  PRESSURE_110_115_TIME ,
				  PRESSURE_115_120      ,
				  PRESSURE_115_120_TIME ,
				  PRESSURE_120_MAX      ,
				  PRESSURE_120_MAX_TIME ,
				  MAX_PRESSURE          ,
				  MIN_PRESSURE          
				)
				  VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储进气压力 </comments>
			<check></check>
		</item>
		
	    <!-- 查询智能维保【计划】表 -->
		<item name="sql_queryMainTainPlanSql" >
			<value>
				 SELECT
			          A.PLAN_ID,
			          A.MAINTAIN_ID,
			          B.MAINTAIN_NAME,
			          A.EXE_FREQUENCY,
			          A.INTERVAL_MILEAGE,
			          A.WARN_MILEAGE,
			          A.INTERVAL_DAYS,
			          A.WARN_DAYS,
			          TO_CHAR(FUN_UTC2DATE(A.EXE_TIME),'YYYY-MM-DD') AS EXE_TIME,
			          A.ENT_ID,
			          A.ENT_NAME,
			          A.CREATE_BY,
			          A.CREATE_TIME,
			          A.MODIFY_BY,
			          A.MODIFY_TIME,
			          A.ENABLE_FLAG	                                 
                 FROM  TB_MAINTAIN_PLAN A,TB_MAINTAIN_CLASS B		          	          
                    WHERE  A.MAINTAIN_ID=B.MAINTAIN_ID  AND A.ENABLE_FLAG='1'
			</value>
			<type>string</type>
			<comments>查询智能维保【计划】表  </comments>
			<check></check>
		</item>
		<!-- 查询智能维保【明细】表 -->
		<item name="sql_queryMainTainDetailSql" category="3">
					<value>
						 SELECT
			                 A.VID,                  
			                 A.C_VIN,
			                 A.VEHICLE_NO,
			                 B.EXE_FREQUENCY,
			                 NVL(A.MAINTAIN_TIMES,0) AS MAINTAIN_TIMES,
			                 NVL(C.MILEAGE,0) * 0.1 AS MILEAGE,				                 		               
			                 NVL(B.INTERVAL_MILEAGE,0) AS INTERVAL_MILEAGE,
			                 NVL(B.WARN_MILEAGE,0) AS WARN_MILEAGE,
			                 NVL(B.INTERVAL_DAYS,0) AS INTERVAL_DAYS,
			                 NVL(B.WARN_DAYS,0) AS WARN_DAYS,
			                 TO_CHAR(FUN_UTC2DATE(B.EXE_TIME),'YYYY-MM-DD') AS EXE_TIME, 
			                 TO_CHAR(FUN_UTC2DATE(A.MAINTAIN_DATE),'YYYY-MM-DD') AS MAINTAIN_DATE,  
			                 NVL(A.MAINTAIN_MILEAGE,0) AS MAINTAIN_MILEAGE,            
			                 A.MAINTAIN_ID,            
			                 A.PLAN_ID,  
			                 A.PLAN_CODE,    
			                 A.ENT_ID,            
			                 A.MAINTAIN_STAT, 
			                 A.MAINTAIN_NAME,
			                 A.MAINTAIN_ONTIME_STAT,
			                 TO_CHAR(FUN_UTC2DATE(A.PLAN_MAINTAIN_DATE),'YYYY-MM-DD') as PLAN_MAINTAIN_DATE,
			                 NVL(A.PLAN_MAINTAIN_MILEAGE,0) as PLAN_MAINTAIN_MILEAGE
			             FROM  th_maintain_vehicle t,TH_MAINTAIN_DETAIL A,TB_MAINTAIN_PLAN B,TR_VEHICLE_LASTTRACK C,tb_vehicle V               
			             WHERE  t.plan_id=a.plan_id
                       		and t.vid=a.vid
                       		and t.vid=C.vid(+)
			                AND t.PLAN_ID=B.PLAN_ID
							AND t.Vid=V.Vid
							AND V.enable_flag='1'
			                AND A.EXE_FREQUENCY='0'
			                AND a.auto_id in (select auto_id from (
							select t.auto_id, row_number() over (partition by plan_id, vid order by maintain_times desc) rw from th_maintain_detail t
							) where rw = 1)	                                   
					</value>
					<type>string</type>
					<comments>查询智能维保【明细】表  </comments>
					<check></check>
				</item>	
		
		<!-- 更新智能维保【明细】表   MILEAGE_MESS字段 TIME_MESS字段-->
		<item name="sql_updateMainTainDetailSql" >
			<value>
			     UPDATE  TH_MAINTAIN_DETAIL A SET A.MILEAGE_MESS=?,A.TIME_MESS=? WHERE  A.PLAN_CODE=?			                 
			</value>
			<type>string</type>
			<comments>更新智能维保【明细】表   MILEAGE_MESS字段 TIME_MESS字段 </comments>
			<check></check>
		</item>			
		
		<!-- 更新智能维保【明细】表   MAINTAIN_ONTIME_STAT字段-->
		<item name="sql_updateMainTainDetailStatSql" category="3">
			<value>
				UPDATE  TH_MAINTAIN_DETAIL A SET A.MAINTAIN_ONTIME_STAT=? WHERE  A.PLAN_CODE=?
			</value>
			<type>string</type>
			<comments>更新智能维保【明细】表   MAINTAIN_ONTIME_STAT字段  </comments>
			<check></check>
		</item>
				
		<!--生成一条记录 智能维保【明细】表  -->
		<!-- 先根据PLAN_ID、VId查询 已经维护的(maintain_stat='1')的最大的维护次数，
                                    从而保证同一辆车、同一种维护类型在任何时间内只能有一条未维护(maintain_stat='0')记录-->       
		<item name="sql_queryVehicleMaintainTimesSql" category="3">
			<value>
				SELECT NVL(MAX(TMD.MAINTAIN_TIMES), 0) AS V_TIMES
				  FROM TH_MAINTAIN_DETAIL TMD
				 WHERE TMD.PLAN_ID = ?
				   AND TMD.EXE_FREQUENCY = ?
				   AND TMD.VID = ?
				   AND TMD.MAINTAIN_STAT = '1'
			</value>
			<type>string</type>
			<comments>查询车辆已维保次数</comments>
			<check></check>
		</item>
		<item name="sql_queryVehicleMaintainNumSql" category="3">
			<value>
				SELECT COUNT(1) + 1 AS V_PLAN_NUM
				  FROM TH_MAINTAIN_DETAIL
				 WHERE VID = ?
				   AND PLAN_ID = ?
			</value>
			<type>string</type>
			<comments>查询车辆最新的维护项目编号</comments>
			<check></check>
		</item>
		<item name="sql_queryMaintainClassSql" category="3">
			<value>
				SELECT MAINTAIN_ABBREVIATION_NAME
				  AS V_ABBREVIATION_NAME
				  FROM TB_MAINTAIN_CLASS
				 WHERE MAINTAIN_ID = ?
			</value>
			<type>string</type>
			<comments>查询维护项目简称</comments>
			<check></check>
		</item>
		<item name="sql_queryExtendMaintainDetailSql" category="3">
			<value>
				SELECT TMD.MAINTAIN_ID,
			       TMD.MAINTAIN_NAME,
			       TMD.PLAN_ID,
			       SUBSTR(TMD.VEHICLE_NO, 2, 7) || '_' || ? || '_' ||
			       LPAD(TO_CHAR(?), 3, '0') AS PLAN_CODE,
			       TMD.EXE_FREQUENCY,
			       TMD.VID,
			       TMD.C_VIN,
			       TMD.VEHICLE_NO,
			       TMD.PROD_CODE,
			       TMD.PROD_NAME,
			       TMD.LINE_ID,
			       TMD.LINE_NAME,
			       TMD.TEAM_ID,
			       TMD.TEAM_NAME,
			       TMD.ENT_ID,
			       TMD.ENT_NAME,
			       (? + 1) AS MAINTAIN_TIMES,
			       FUN_DATE2UTC(TO_DATE(?, 'YYYY-MM-DD')) PLAN_MAINTAIN_DATE,
			       ? PLAN_MAINTAIN_MILEAGE,
			       '0' MAINTAIN_ONTIME_STAT
			  FROM TH_MAINTAIN_DETAIL TMD
			 WHERE TMD.PLAN_ID = ?
			   AND TMD.EXE_FREQUENCY = ?
			   AND TMD.VID = ?
			   AND TMD.MAINTAIN_TIMES = ?
			   AND NOT EXISTS (SELECT 1
			          FROM TH_MAINTAIN_DETAIL TMD
			         WHERE TMD.PLAN_ID = ?
			           AND TMD.EXE_FREQUENCY = ?
			           AND TMD.VID = ?
			           AND TMD.MAINTAIN_STAT = '0'
			           AND TMD.MAINTAIN_TIMES = (? + 1))
			</value>
			<type>string</type>
			<comments>查询维护项目简称</comments>
			<check></check>
		</item>
		<item name="sql_saveMaintainDetailSql" category="3">
			<value>
				INSERT INTO TH_MAINTAIN_DETAIL
				  (AUTO_ID,MAINTAIN_ID,MAINTAIN_NAME,PLAN_ID,PLAN_CODE,
				   EXE_FREQUENCY,VID,C_VIN,VEHICLE_NO,PROD_CODE,
				   PROD_NAME,LINE_ID,LINE_NAME,TEAM_ID,TEAM_NAME,
				   ENT_ID,ENT_NAME,MAINTAIN_TIMES,PLAN_MAINTAIN_DATE,
				   PLAN_MAINTAIN_MILEAGE,MAINTAIN_ONTIME_STAT)
				   VALUES
				   (?,?,?,?,?,?,?,?,?,?,
				    ?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>查询维护项目简称</comments>
			<check></check>
		</item>
		<item name="sql_queryUnparseRecorderSql" >
			<value>
				SELECT PID,A.VID,A.UTC,CONTENT,B.VEHICLE_NO,B.VIN_CODE,B.VEHICLE_TYPE,A.CO_SEQ,B.ENT_ID 
				FROM TH_VEHICLE_RECORDER A,TB_VEHICLE B
				WHERE A.VID=B.VID AND NVL(A.ISPARSE,0)=0 AND NVL(A.PARSENUM,0) &lt; 3 ORDER BY A.UTC
			</value>
			<type>string</type>
			<comments>提取未解析的行驶记录数据</comments>
			<check></check>
		</item>
		<item name="sql_updateRecorderStatusSql" >
			<value>
				UPDATE TH_VEHICLE_RECORDER SET ISPARSE=1 
				WHERE PID=?
			</value>
			<type>string</type>
			<comments>修改行驶记录解析状态查询</comments>
			<check></check>
		</item>
		<item name="sql_selectAlarmEvent" >
			<value>
				SELECT VID,DEVICE_NO,ALARM_CODE,COUNT(*) AS NUM,SUM(TIME) AS TIME,SUM(A.MILEAGE) AS MILEAGE,SUM(A.OIL_WEAR) AS OIL_WEAR FROM (SELECT VID,DEVICE_NO,ALARM_CODE,(END_UTC - BEGIN_UTC)/1000 AS TIME,MILEAGE,OIL_WEAR FROM TH_VEHICLE_ALARM_EVENT T WHERE T.VID = ? AND T.BEGIN_UTC &gt;= ? and T.BEGIN_UTC &lt;= ?) A GROUP BY A.VID,DEVICE_NO,ALARM_CODE
			</value>
			<type>string</type>
			<comments>查询车辆日报警明细表</comments>
			<check></check>
		</item>
		<item name="sql_searchAlarmDays" >
			<value>
				SELECT T.ALARM_CODE,T.ALARM_NUM,T.ALARM_TIME FROM TS_ALARM_DAYSTAT T WHERE VID = ? AND T.STAT_DATE &gt;= ? AND T.STAT_DATE &lt; ?
			</value>
			<type>string</type>
			<comments>查询前一天日报警</comments>
			<check></check>
		</item>
		<item name="sql_saveEloaddDayStat">
				<value>
					INSERT INTO TH_ELOADDIST_DAY
					(
					  ROTATE_ID              ,
					  LINK_ID                ,
					  VID                    ,
					  CREATE_TIME            ,
					  ROTATE_SPEED_0_700     ,
					  ROTATE_SPEED_700_800   ,
					  ROTATE_SPEED_800_900   ,
					  ROTATE_SPEED_900_1000  ,
					  ROTATE_SPEED_1000_1100 ,
					  ROTATE_SPEED_1100_1200 ,
					  ROTATE_SPEED_1200_1300 ,
					  ROTATE_SPEED_1300_1400 ,
					  ROTATE_SPEED_1400_1500 ,
					  ROTATE_SPEED_1500_1600 ,
					  ROTATE_SPEED_1600_1800 ,
					  ROTATE_SPEED_1800_2000 ,
					  ROTATE_SPEED_2000_2400 ,
					  ROTATE_SPEED_2400_MAX,
					  IDX          
					)
					VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
				</value>
				<type>string</type>
				<comments>存储发动机负荷率 </comments>
				<check></check>
		</item>
		<item name="sql_queryVehicleOrg" >
			<value> 
				SELECT O.ENT_ID,O.ENT_NAME,E.ENT_ID AS EID, E.ENT_NAME AS ENAME FROM  TB_ORGANIZATION O INNER JOIN TB_ORGANIZATION E ON E.ENT_ID = O.PARENT_ID WHERE O.ENT_ID = ?
			</value>
			<type>string</type>
			<comments>查询实体ID所属企业，车队</comments>
			<check></check>
		</item>
		<item name="sql_queryVehicleStatusCode" >
			<value> 
				SELECT V.VID, TERMINAL_STATUS_VALTYPE,MIN_TERMINAL_STATUS,MAX_TERMINAL_STATUS,
				 GPS_STATUS_VALTYPE,MIN_GPS_STATUS,MAX_GPS_STATUS,
				 E_WATER_TEMP_VALTYPE,MIN_E_WATER_TEMP,MAX_E_WATER_TEMP,
				 EXT_VOLTAGE_VALTYPE,MIN_EXT_VOLTAGE,MAX_EXT_VOLTAGE,
				 OIL_PRESSURE_VALTYPE,MIN_OIL_PRESSURE,MAX_OIL_PRESSURE,
				 BRAKE_PRESSURE_VALTYPE,MIN_BRAKE_PRESSURE,MAX_BRAKE_PRESSURE,
				 BRAKEPAD_FRAY_VALTYPE,MIN_BRAKEPAD_FRAY,MAX_BRAKEPAD_FRAY,
				 OIL_ALARM_VALTYPE,MIN_OIL_ALARM,MAX_OIL_ALARM,ABS_BUG_VALTYPE,
				 MIN_ABS_BUG,MAX_ABS_BUG,COOLANT_LEVEL_VALTYPE,MIN_COOLANT_LEVEL,
				 MAX_COOLANT_LEVEL,AIR_FILTER_CLOG_VALTYPE,MIN_AIR_FILTER_CLOG,
				 MAX_AIR_FILTER_CLOG,MWERE_BLOCKING_VALTYPE,MIN_MWERE_BLOCKING,
				 MAX_MWERE_BLOCKING,FUEL_BLOCKING_VALTYPE,MIN_FUEL_BLOCKING,
				 MAX_FUEL_BLOCKING,EOIL_TEMPERATURE_VALTYPE,MIN_EOIL_TEMPERATURE_ALARM,
				 MAX_EOIL_TEMPERATURE_ALARM,RETARDER_HT_ALARM_VALTYPE,MIN_RETARDER_HT_ALARM,
				 MAX_RETARDER_HT_ALARM,EHOUSING_HT_ALARM_VALTYPE,MIN_EHOUSING_HT_ALARM
				 ,MAX_EHOUSING_HT_ALARM,AIR_PRESSURE_VALTYPE,MIN_AIR_PRESSURE,MAX_AIR_PRESSURE,V.VOLTAGE FROM TB_VSTATUS_REF S INNER JOIN TB_VEHICLE V ON S.VS_REF_ID = V.VS_REF_ID
			</value>
			<type>string</type>
			<comments>根据车辆ID查询车辆状态编码信息</comments>
			<check></check>
		</item>
		<item name="sql_queryStatisticalAllAlarmType" >
			<value>
				SELECT B.ALARM_CODE,A.ALARM_CODE AS PARENT_CODE FROM SYS_ALARM_TYPE A INNER JOIN SYS_ALARM_TYPE B ON A.ALARM_CODE = B.PARENT_CODE
			</value>
			<type>string</type>
			<comments>初始化加载所有报警类型编码 </comments>
			<check></check>
		</item>
		<item name="sql_queryVehicleInfo" >
			<value>
				SELECT V.VID, V.VEHICLE_NO,V.VIN_CODE,L.CLASS_LINE_ID,CL.LINE_NAME,V.INNER_CODE, O.ENT_ID, O.ENT_NAME,E.ENT_ID AS EID, E.ENT_NAME AS ENAME,V.VEHICLE_TYPE,
				(SELECT WM_CONCAT(STAFF.STAFF_ID) CID FROM (SELECT SF.VID, SF.STAFF_ID FROM TB_EMPLOYEE EP, TR_VEHICLE_STAFF SF WHERE EP.STAFF_ID = SF.STAFF_ID) 
				STAFF GROUP BY STAFF.VID HAVING STAFF.VID = V.VID) AS STAFF_ID,(SELECT WM_CONCAT(STAFF.STAFF_NAME) CID FROM (SELECT SF.VID, EP.STAFF_NAME FROM TB_EMPLOYEE EP, TR_VEHICLE_STAFF SF WHERE EP.STAFF_ID = SF.STAFF_ID) STAFF GROUP BY STAFF.VID HAVING STAFF.VID = V.VID ) AS STAFF_NAME,
				V.VBRAND_CODE,SIM.COMMADDR,T.OEM_CODE,DECODE(PROG.CFG_FLAG,'1','1','0') CFG_FLAG,TO_NUMBER(NVL(PARAM.PARAM_VALUE,0))*10 MAX_SPEED
				FROM TB_VEHICLE V 
				LEFT JOIN TB_ORGANIZATION O ON V.ENT_ID = O.ENT_ID 
				LEFT JOIN TB_ORGANIZATION E ON E.ENT_ID = O.PARENT_ID 
				LEFT JOIN TR_SERVICEUNIT S ON S.VID = V.VID 
				LEFT JOIN TB_SIM SIM ON SIM.SID = S.SID 
				LEFT JOIN TR_LINE_VEHICLE L ON L.VID = V.VID 
				LEFT JOIN TB_CLASS_LINE CL ON CL.LINE_ID = L.CLASS_LINE_ID
				LEFT JOIN TB_TERMINAL T ON T.TID = S.TID
				LEFT JOIN (SELECT P.PROG_ID,'1' CFG_FLAG FROM TB_VEHICLE_CONFIGUER_PROGRAMME P,TB_VEHICLE_CONFIGUER_DETAIL D
                                         WHERE P.PROG_ID = D.PROG_ID 
                                         AND P.ENABLE_FLAG = '1'
                                         AND D.CODE_ID = '000100060001') PROG ON PROG.PROG_ID = V.PROG_ID
				LEFT JOIN (SELECT TID,PARAM_VALUE FROM TB_TERMINAL_PARAM WHERE  PARAM_ID = '128') PARAM
					ON　T.TID = PARAM.TID                                         
          		WHERE V.VID = ?
			</value>
			<type>string </type>
			<comments>查询车辆编号，车架号，企业编号，企业名称，车队编号，车队名称,车牌号、车辆内部编码、线路ID,线路名称、司机、手机号 </comments>
			<check></check>
		</item>
		<item name="sql_saveStopstartInfo" category="3">
			<value>
				INSERT INTO TH_VEHICLE_STOPSTART
				(AUTO_ID,VID,VEHICLE_NO,LAUNCH_TIME,START_TIME,
				STOP_TIME,FIREOFF_TIME,LAUNCH_MAPLON,LAUNCH_MAPLAT,FIREOFF_MAPLON,
				FIREOFF_MAPLAT,LAUNCH_MILEAGE,FIREOFF_MILEAGE,MILEAGE,LAUNCH_OIL,
				FIREOFF_OIL,OIL_WEAR,MAX_ROATE_SPEED,MAX_SPEED,RUNNING_NUM,
				IDLING_OIL_WEAR,RUNNING_OIL_WEAR,
				ENGINE_ROTATE_TIME,RUNNING_TIME,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VIN_CODE,VLINE_ID,LINE_NAME,STAT_DATE,
				ECU_OIL_WEAR,ECU_RUNNING_OIL_WEAR,ECU_IDLING_OIL_WEAR,MET_OIL_WEAR,MET_IDLING_OIL_WEAR,MET_RUNNING_OIL_WEAR,OIL_FLAG,
				HEATER_WORKING_TIME,AIRC_WORKING_TIME,DOOR1_OPEN_NUM,DOOR2_OPEN_NUM,
				BRAKING_NUM,HORN_WORKING_NUM,RETARDER_WORK_NUM,ABS_WORKING_NUM,
				DRIVER_ID,DRIVER_NAME,DRIVER_SRC) 
				values( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,?,
				?,?,?)
			</value>
			<type>string</type>
			<comments>保存起步停车信息</comments>
			<check></check>
		</item>
		<item name="sql_queryStopstartInfo" category="3">
			<value>
				SELECT AUTO_ID,VID,STAT_DATE,LAUNCH_TIME,FIREOFF_TIME FROM TH_VEHICLE_STOPSTART
				WHERE STAT_DATE = ? AND LAUNCH_TIME &gt;= ? AND LAUNCH_TIME &lt; ?
			</value>
			<type>string</type>
			<comments>查询起步停车信息</comments>
			<check></check>
		</item>
		<item name="sql_updateStopstartInfo" category="3">
			<value>
				UPDATE TH_VEHICLE_STOPSTART SET 
				HEATER_WORKING_TIME =nvl((SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT 
				WHERE VID=? AND STATE_CODE='EV0001' AND ((BEGIN_UTC &gt;= ? AND END_UTC &lt;= ? ) or (BEGIN_UTC &lt; ? AND END_UTC &gt; ?))),0),
				AIRC_WORKING_TIME=nvl((SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT 
				WHERE VID=? AND STATE_CODE='EV0002' AND ((BEGIN_UTC &gt;= ? AND END_UTC &lt;= ?) or (BEGIN_UTC &lt; ? AND END_UTC &gt; ?))),0),
				DOOR1_OPEN_NUM=nvl((SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT 
				WHERE VID=? AND STATE_CODE='BS0013' AND ((BEGIN_UTC &gt;= ? AND  END_UTC &lt;= ?) or (BEGIN_UTC &lt; ? AND END_UTC &gt; ?))),0),
				DOOR2_OPEN_NUM=nvl((SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT 
				WHERE VID=? AND STATE_CODE='BS0014' AND ((BEGIN_UTC &gt;= ? AND  END_UTC &lt;= ?) or (BEGIN_UTC &lt; ? AND END_UTC &gt; ?))),0),
				BRAKING_NUM=nvl((SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT 
				WHERE VID=? AND STATE_CODE='ES0004' AND ((BEGIN_UTC &gt;= ? AND  END_UTC &lt;= ?) or (BEGIN_UTC &lt; ? AND END_UTC &gt; ?))),0),
				HORN_WORKING_NUM=nvl((SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT 
				WHERE VID=? AND STATE_CODE='ES0008' AND ((BEGIN_UTC &gt;= ? AND  END_UTC &lt;= ?) or (BEGIN_UTC &lt; ? AND END_UTC &gt; ?))),0),
				RETARDER_WORK_NUM=nvl((SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT 
				WHERE VID=? AND STATE_CODE='ES0011' AND ((BEGIN_UTC &gt;= ? AND  END_UTC &lt;= ?) or (BEGIN_UTC &lt; ? AND END_UTC &gt; ?))),0),
				ABS_WORKING_NUM=nvl((SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT 
				WHERE VID=? AND STATE_CODE='ES0012' AND ((BEGIN_UTC &gt;= ? AND  END_UTC &lt;= ?) or (BEGIN_UTC &lt; ? AND END_UTC &gt; ?))),0)
				WHERE AUTO_ID = ? AND STAT_DATE = ? 
			</value>
			<type>string</type>
			<comments>填充起步停车信息状态及告警统计数据</comments>
			<check></check>
		</item>
		<item name="sql_saveRunningInfo" category="3">
			<value>
				INSERT INTO TH_VEHICLE_RUNNING
				(AUTO_ID,STOPSART_ID,VID,VEHICLE_NO,START_TIME,
				STOP_TIME,START_MAPLON,START_MAPLAT,STOP_MAPLON,STOP_MAPLAT,
				START_MILEAGE,STOP_MILEAGE,MILEAGE,START_OIL,STOP_OIL,
				OIL_WEAR,MAX_ROATE_SPEED,MAX_SPEED,CORP_ID,CORP_NAME,
				TEAM_ID,TEAM_NAME,VIN_CODE,VLINE_ID,LINE_NAME,
				ECU_OIL_WEAR,MET_OIL_WEAR,OIL_FLAG
				) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>保存行车信息</comments>
			<check></check>
		</item>
		<item name="sql_saveStateEventInfo" category="3">
			<value>
				INSERT INTO TH_VEHICLE_STATE_EVENT
				(AUTO_ID,VID,VEHICLE_NO,CORP_ID,CORP_NAME,
				TEAM_ID,TEAM_NAME,VLINE_ID,VLINE_NAME,STATE_CODE,
				BEGIN_UTC,BEGIN_LAT,BEGIN_LON,BEGIN_MAPLON,BEGIN_MAPLAT,
				BEGIN_ELEVATION,BEGIN_DIRECTION,BEGIN_GPS_SPEED,END_UTC,END_LAT,
				END_LON,END_MAPLON,END_MAPLAT,END_ELEVATION,END_DIRECTION,
				END_GPS_SPEED,STATE_EVENT_TIME,KEYPOINT_SPEED,MILEAGE,USE_OIL,
				DRIVER_ID,DRIVER_NAME,DRIVER_SRC
				) VALUES(
				?,?,?,?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,?,?,?,
				?,?,?)
			</value>
			<type>string</type>
			<comments>保存状态事件信息</comments>
			<check></check>
		</item>
		<item name="sql_deleteStateEventInfo" category="3">
			<value>
			  TRUNCATE TABLE TH_VEHICLE_STATE_EVENT
			</value>
			<type>string</type>
			<comments>删除状态事件信息</comments>
			<check></check>
		</item>
		<item name="sql_deleteServicestatInfo" category="3">
			<value>
			  TRUNCATE TABLE TS_VEHICLE_SERVICE_DAYSTAT
			</value>
			<type>string</type>
			<comments>删除车辆运营日统计中间表信息</comments>
			<check></check>
		</item>
		<item name="sql_saveDriverEventInfo" category="3">
			<value>
				INSERT INTO TH_DRIVER_BEHAVIOUR_INFO (
				AUTO_ID,VID,DEVICE_NO,EVENT_CODE,BEGIN_UTC,
				BEGIN_LAT,BEGIN_LON,BEGIN_MAPLON,BEGIN_MAPLAT,BEGIN_ELEVATION,
				BEGIN_DIRECTION,BEGIN_GPS_SPEED,END_UTC,END_LAT,END_LON,
				END_MAPLON,END_MAPLAT,END_ELEVATION,END_DIRECTION,END_GPS_SPEED)
				VALUES(?
				,?,?,?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>添加驾驶行为事件信息</comments>
			<check></check>
		</item>
		<item name="sql_deleteDriverEventInfo" category="3">
			<value>
				DELETE FROM TH_DRIVER_BEHAVIOUR_INFO WHERE VID=?
			</value>
			<type>string</type>
			<comments>删除驾驶行为事件信息</comments>
			<check></check>
		</item>
	<item name="sql_updateDayStat" category="3">
		<value>
			update TS_VEHICLE_DAYSTAT VD SET VD.RETARDER_WORK_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0011' AND VID=?),VD.RETARDER_WORK_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0011' AND VID=?),VD.BRAKE_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0004' AND VID=?),VD.BRAKE_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0004' AND VID=?),VD.REVERSE_GEAR_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0005' AND VID = ?),VD.REVERSE_GEAR_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0005' AND VID=?),VD.LOWER_BEAM_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0000' AND VID=?),VD.LOWER_BEAM_NUM = (SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0000' AND VID=?),VD.HIGH_BEAM_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0001' AND VID=?),VD.HIGH_BEAM_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0001' AND VID=?),VD.LEFT_TURNING_SIGNAL_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0003' AND VID=?),VD.LEFT_TURNING_SIGNAL_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0003' AND VID=?),VD.RIGHT_TURNING_SIGNAL_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0002' AND VID=?),VD.RIGHT_TURNING_SIGNAL_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0002' AND VID=?),VD.OUTLINE_LAMP_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0007' AND VID = ?),VD.OUTLINE_LAMP_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0007' AND VID=?),VD.TRUMPET_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0008' AND VID=?),VD.TRUMPET_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0008' AND VID=?),VD.AIRCONDITION_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0009' AND VID=?),VD.FREE_POSITION_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0010' AND VID=?),VD.FREE_POSITION_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0010' AND VID=?),VD.ABS_WORK_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0012' AND VID=?),VD.ABS_WORK_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0012' AND VID=?),VD.HEAT_UP_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0013' AND VID=?),VD.HEAT_UP_NUM=(SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0013' AND VID=?),VD.CLUTCH_TIME=(SELECT SUM(END_UTC-BEGIN_UTC)/1000 FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0014' AND VID=?),VD.CLUTCH_NUM = (SELECT COUNT(1) FROM TH_VEHICLE_STATE_EVENT WHERE STATE_CODE='ES0014' AND VID=?) WHERE VD.VID=? AND VD.STAT_DATE&gt;? AND VD.STAT_DATE&lt;?
		</value>
		<type>string</type>
		<comments>更新车辆日统计表车辆信号状态信息</comments>
		<check></check>
	</item>
	<item name="sql_selectVehicleDayStat">
		<value>
			SELECT *  FROM TS_VEHICLE_DAYSTAT T WHERE STAT_DATE &gt; ? AND STAT_DATE &lt; ?
		</value>
		<type>string</type>
		<comments>查询车辆日统计表</comments>
		<check></check>
	</item>
	<item name="sql_saveAirTemperture">
		<value>
			INSERT INTO TH_ENTERING_AIR_TEMPERATURE
			(
			  AUTO_ID                 ,
			  VID                     ,
			  VEHICLE_NO              ,
			  VIN_CODE                ,
			  STAT_TIME               ,
			  TEMPERATURE_0           ,
			  TEMPERATURE_0_TIME      ,
			  TEMPERATURE_0_10        ,
			  TEMPERATURE_0_10_TIME   ,
			  TEMPERATURE_10_20       ,
			  TEMPERATURE_10_20_TIME  ,
			  TEMPERATURE_20_25       ,
			  TEMPERATURE_20_25_TIME  ,
			  TEMPERATURE_25_30       ,
			  TEMPERATURE_25_30_TIME  ,
			  TEMPERATURE_30_35       ,
			  TEMPERATURE_30_35_TIME  ,
			  TEMPERATURE_35_40       ,
			  TEMPERATURE_35_40_TIME  ,
			  TEMPERATURE_40_45       ,
			  TEMPERATURE_40_45_TIME  ,
			  TEMPERATURE_45_50       ,
			  TEMPERATURE_45_50_TIME  ,
			  TEMPERATURE_50_60       ,
			  TEMPERATURE_50_60_TIME  ,
			  TEMPERATURE_60_70       ,
			  TEMPERATURE_60_70_TIME  ,
			  TEMPERATURE_70_MAX      ,
			  TEMPERATURE_70_MAX_TIME ,
			  MAX_TEMPERATURE         ,
			  MIN_TEMPERATURE         
			)
			VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
		</value>
		<type>string</type>
		<comments>存储进气温度</comments>
		<check></check>
	</item>
	<!-- Begin 自动延展运营考核设置任务所需sql********************************************** -->
    <item name="sql_extendAssessSet_selectLastMonthsEndTime" category="3">
        <comments>查询所有企业的最后一个考核月结束时间</comments>
        <value>
           <!--  select ent_id,max(end_time) last_end_time from tb_checkmonth_set where enable_flag = '1' group by ent_id  修改删除的企业不在生成考核月-->
            select checkmonthset.ent_id, max(checkmonthset.end_time) last_end_time   
            from tb_checkmonth_set checkmonthset,tb_organization orga 
            where checkmonthset.ent_id = orga.ent_id and checkmonthset.enable_flag = '1' and orga.enable_flag='1' 
            group by checkmonthset.ent_id
        </value>
        <type>string</type>
        <check></check>
    </item>
    <item name="sql_extendAssessSet_selectByEntAndEndTime" category="3">
        <comments>根据ent_id和end_time查询一条考核月记录</comments>
        <value>
            SELECT *
            FROM   tb_checkmonth_set
            WHERE  ent_id = ?
                   AND end_time = ? and enable_flag=1
        </value>
        <type>string</type>
        <check></check>
    </item>
    <item name="sql_extendAssessSet_insertToMonthSet" category="3">
        <comments>插入一条新记录到tb_checkmonth_set表中</comments>
        <value>
            INSERT INTO tb_checkmonth_set
              (check_time_id,
               ent_id,
               check_time_code,
               check_time_desc,
               start_time,
               end_time,
               create_by,
               create_time,                           
               enable_flag)
            VALUES
              (?, ?, ?, ?, ?, ?, ?, ?, ?)
        </value>
        <type>string</type>
        <check></check>
    </item>
    <item name="sql_queryAssessSetWithCheckTimeId" category="3">
        <comments>查询原考核月设置信息</comments>
        <value>
              SELECT EFFECTTYPE_CODE,
			       CHECK_TIME_ID,
			       VBRAND_CODE,
			       VMODULE_CODE,
			       CLASSLINE_ID,
			       VID,
			       ASSESS_VALUE,
			       CORP_ID,
			       CORP_NAME,
			       TEAM_ID,
			       TEAM_NAME,
			       CREATE_BY,
			       CREATE_TIME,
			       UPDATE_BY,
			       UPDATE_TIME,
			       ENABLE_FLAG
			  FROM TB_ASSESSOIL_SET
			 WHERE CHECK_TIME_ID = ?
        </value>
        <type>string</type>
        <check></check>
    </item>
    <item name="sql_saveAssessSetInfo" category="3">
        <comments>保存tb_assessoil_set表中</comments>
        <value>
            INSERT INTO TB_ASSESSOIL_SET
			  (AUTO_ID,
			   EFFECTTYPE_CODE,
			   CHECK_TIME_ID,
			   VBRAND_CODE,
			   VMODULE_CODE,
			   CLASSLINE_ID,
			   VID,
			   ASSESS_VALUE,
			   CORP_ID,
			   CORP_NAME,
			   TEAM_ID,
			   TEAM_NAME,
			   CREATE_BY,
			   CREATE_TIME,
			   UPDATE_BY,
			   UPDATE_TIME,
			   ENABLE_FLAG)
			VALUES
			  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        </value>
        <type>string</type>
        <check></check>
    </item>
    <item name="sql_queryVehicleScoreSetWithCheckTimeId" category="3">
        <comments>复制并修改check_time_id后插入到tb_vehicle_score表中</comments>
        <value>
            	SELECT CHECK_TIME_ID,
			       OIL_RIGHT,
			       SPEEDING_RIGHT,
			       SPEEDING_MIN,
			       SPEEDING_MAX,
			       RPM_RIGHT,
			       RPM_MIN,
			       RPM_MAX,
			       LONGIDLE_RIGHT,
			       LONGIDLE_MIN,
			       LONGIDLE_MAX,
			       GEARGLIDE_RIGHT,
			       GEARGLIDE_MIN,
			       GEARGLIDE_MAX,
			       URGENT_SPEEDUP_RIGHT,
			       URGENT_SPEEDUP_MIN,
			       URGENT_SPEEDUP_MAX,
			       AIRCOND_RIGHT,
			       AIRCOND_MIN,
			       AIRCOND_MAX,
			       ECONOMIC_RIGHT,
			       ECONOMIC_MIN,
			       ECONOMIC_MAX,
			       SAFE_RIGHT,
			       ANSPEED_RIGHT,
			       ANSPEED_MIN,
			       ANSPEED_MAX,
			       ANGEARGLIDE_RIGHT,
			       ANGEARGLIDE_MIN,
			       ANGEARGLIDE_MAX,
			       ANURGENT_SPEEDUP_RIGHT,
			       ANURGENT_SPEEDUP_MIN,
			       ANURGENT_SPEEDUP_MAX,
			       FATIGUE_RIGHT,
			       FATIGUE_MIN,
			       FATIGUE_MAX,
			       OILWEAR_RIGHT,
			       OILWEARCHK_RIGHT,
			       CREATER,
			       CREATE_TIME,
			       UPDATE_BY,
			       UPDATE_TIME,
			       ENABLE_FLAG,
			       CORP_ID,
			       SPECIAL_RECORD_FLAG,
			       URGENT_SPEEDDOWN_RIGHT,
			       URGENT_SPEEDDOWN_MIN,
			       URGENT_SPEEDDOWN_MAX,
			       ANURGENT_SPEEDDOWN_RIGHT,
			       ANURGENT_SPEEDDOWN_MIN,
			       ANURGENT_SPEEDDOWN_MAX
			  FROM TB_VEHICLE_SCORE
			 WHERE CHECK_TIME_ID = ?
        </value>
        <type>string</type>
        <check></check>
    </item>
    <item name="sql_saveTbVehicleScore" category="3">
        <comments>复制并修改check_time_id后插入到tb_vehicle_score表中</comments>
        <value>
            INSERT INTO TB_VEHICLE_SCORE
			  (SCORECHK_ID,
			   CHECK_TIME_ID,
			   OIL_RIGHT,
			   SPEEDING_RIGHT,
			   SPEEDING_MIN,
			   SPEEDING_MAX,
			   RPM_RIGHT,
			   RPM_MIN,
			   RPM_MAX,
			   LONGIDLE_RIGHT,
			   LONGIDLE_MIN,
			   LONGIDLE_MAX,
			   GEARGLIDE_RIGHT,
			   GEARGLIDE_MIN,
			   GEARGLIDE_MAX,
			   URGENT_SPEEDUP_RIGHT,
			   URGENT_SPEEDUP_MIN,
			   URGENT_SPEEDUP_MAX,
			   AIRCOND_RIGHT,
			   AIRCOND_MIN,
			   AIRCOND_MAX,
			   ECONOMIC_RIGHT,
			   ECONOMIC_MIN,
			   ECONOMIC_MAX,
			   SAFE_RIGHT,
			   ANSPEED_RIGHT,
			   ANSPEED_MIN,
			   ANSPEED_MAX,
			   ANGEARGLIDE_RIGHT,
			   ANGEARGLIDE_MIN,
			   ANGEARGLIDE_MAX,
			   ANURGENT_SPEEDUP_RIGHT,
			   ANURGENT_SPEEDUP_MIN,
			   ANURGENT_SPEEDUP_MAX,
			   FATIGUE_RIGHT,
			   FATIGUE_MIN,
			   FATIGUE_MAX,
			   OILWEAR_RIGHT,
			   OILWEARCHK_RIGHT,
			   CREATER,
			   CREATE_TIME,
			   UPDATE_BY,
			   UPDATE_TIME,
			   ENABLE_FLAG,
			   CORP_ID,
			   SPECIAL_RECORD_FLAG,
			   URGENT_SPEEDDOWN_RIGHT,
			   URGENT_SPEEDDOWN_MIN,
			   URGENT_SPEEDDOWN_MAX,
			   ANURGENT_SPEEDDOWN_RIGHT,
			   ANURGENT_SPEEDDOWN_MIN,
			   ANURGENT_SPEEDDOWN_MAX)
			VALUES
			(?,?,?,?,?,?,?,?,?,?,
			 ?,?,?,?,?,?,?,?,?,?,
			 ?,?,?,?,?,?,?,?,?,?,
			 ?,?,?,?,?,?,?,?,?,?,
			 ?,?,?,?,?,?,?,?,?,?,
			 ?,?)
        </value>
        <type>string</type>
        <check></check>
    </item>
    <!-- End 自动延展运营考核设置任务所需sql************************************************* -->
    <item name="sql_saveOutLineInfo" >
		<value>
			INSERT INTO TS_OUTLINE_DAYSTAT (AUTO_ID,STAT_DATE,VID,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VEHICLE_NO,VIN_CODE,OUTLINE_CODE,OUTLINE_NUM,OUTLINE_CLASS,OUTLINE_TIME,VLINE_ID,LINE_NAME) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
		</value>
		<type>string</type>
		<comments>存储非法营运日统计信息 </comments>
		<check></check>
	</item>
	<item name="sql_saveOutLineMonthInfo" >
		<value>
			INSERT INTO TS_OUTLINE_MONTHSTAT (AUTO_ID,STAT_DATE,STAT_YEAR,VID,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VEHICLE_NO,VIN_CODE,OUTLINE_CODE,OUTLINE_NUM,OUTLINE_CLASS,OUTLINE_TIME,VLINE_ID,LINE_NAME) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
		</value>
		<type>string</type>
		<comments>存储非法营运月统计信息 </comments>
		<check></check>
	</item>
	<item name="sql_saveOutLineEventInfo" >
		<value>
			INSERT INTO TH_VEHICLE_OUTLINE_EVENT (AUTO_ID,VID,DEVICE_NO,OUTLINE_CODE,AREA_ID,MTYPE_CODE,MEDIA_URI,BEGIN_UTC,BEGIN_LAT,BEGIN_LON,BEGIN_MAPLAT,BEGIN_MAPLON,BEGIN_ELEVATION,BEGIN_DIRECTION,BEGIN_GPS_SPEED,END_UTC,END_LAT,END_LON,END_MAPLAT,END_MAPLON,END_ELEVATION,END_DIRECTION,END_GPS_SPEED,OUTLINE_EVENT_TIME,KEYPOINT_GPS_SPEED,Vline_Id,Inner_Code,Vehicleno,C_VIN,LINE_NAME,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
		</value>
		<type>string</type>
		<comments>存储非法营运事件统计信息 </comments>
		<check></check>
	</item>
	<item name="sql_queryVehicleOutLineDayInfo" >
		<value>
			SELECT VID,VEHICLE_NO,VIN_CODE,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,OUTLINE_CODE,SUM(OUTLINE_NUM) AS OUTLINE_NUM,SUM(OUTLINE_TIME) AS OUTLINE_TIME,VLINE_ID,LINE_NAME FROM TS_OUTLINE_DAYSTAT WHERE STAT_DATE BETWEEN ? AND ? GROUP BY VID,VEHICLE_NO,VIN_CODE, CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VLINE_ID,LINE_NAME,OUTLINE_CODE
		</value>
		<type>string</type>
		<comments>查询非法营运日统计信息 </comments>
		<check></check>
	</item>
	<item name="sql_queryVehicleIsOverLoad" >
		<value>
			SELECT * FROM TH_VEHICLE_MEDIA TM WHERE TM.VID = ? AND TM.IS_OVERLOAD = 1 AND TM.UTC &gt;= ? AND TM.UTC &lt; ?
		</value>
		<type>string</type>
		<comments>查询非法营运超员统计信息 </comments>
		<check></check>
	</item>
	<item name="sql_queryStatisticalAllOutLineType" >
		<value>
			SELECT B.OUTLINE_CODE,A.OUTLINE_CODE AS PARENT_CODE FROM SYS_OUTLINE_TYPE A INNER JOIN SYS_OUTLINE_TYPE B ON A.OUTLINE_CODE = B.PARENT_CODE
		</value>
		<type>string</type>
		<comments>初始化加载所有非法营运类型编码 </comments>
		<check></check>
	</item>
	<item name="sql_queryOpenningDoorPicture" >
		<value>
			SELECT MEDIA_URI,MTYPE_CODE,UTC FROM TH_VEHICLE_MEDIA WHERE VID = ? AND (EVENT_TYPE = '4' OR EVENT_TYPE = '5') AND UTC &gt;= ? AND UTC &lt; ?
		</value>
		<type>string</type>
		<comments>查询开门触发照片</comments>
		<check></check>
	</item>
	<item name="sql_selectOutLineEvent" >
			<value>
				SELECT VID,DEVICE_NO,OUTLINE_CODE,COUNT(*) AS NUM,SUM(TIME) AS TIME,SUM(A.MILEAGE) AS MILEAGE,SUM(A.OIL_WEAR) AS OIL_WEAR FROM (SELECT VID,DEVICE_NO,OUTLINE_CODE,(END_UTC - BEGIN_UTC)/1000 AS TIME,MILEAGE,OIL_WEAR FROM TH_VEHICLE_OUTLINE_EVENT T WHERE T.VID = ? AND T.BEGIN_UTC &gt;= ? and T.BEGIN_UTC &lt; ?) A  WHERE TIME >= 0 GROUP BY A.VID,DEVICE_NO,OUTLINE_CODE
			</value>
			<type>string</type>
			<comments>查询车辆日非法营运报警明细表</comments>
			<check></check>
		</item>
	<item name="accountGradeMonthCorpSql" >
			<value>
				
			INSERT INTO TS_GRADE_MONTHSTAT_CORP (
			STAT_YEAR,
			STAT_MONTH,
			YEAR_MONTH,
			CORP_ID,
			CORP_NAME,
			VEHICLE_SUM,
			TRAVEL_MILEAGE,
			OIL_WEAR_SUM,
			OVERSPEED_SUM,
			OVERSPEED_TIME,
			OVERSPEED_SUM_1000,
			OIL_OVERSPEED_SCORE,
			SAFE_OVERSPEED_SCORE,
			OVERRPM_SUM,
			OVERRPM_TIME,
			OVERRPM_SUM_1000,
			OIL_OVERRPM_SCORE,
			GEAR_GLIDE_SUM,
			GEAR_GLIDE_TIME,
			GEAR_GLIDE_SUM_1000,
			GEAR_GLIDE_TIME_1000,
			OIL_GEAR_GLIDE_SCORE,
			SAFE_GEAR_GLIDE_SCORE,
			LONG_IDLE_SUM,
			LONG_IDLE_TIME,
			LONG_IDLE_TIME_1000,
			OIL_LONG_IDLE_SCORE,
			FATIGUE_SUM,
			FATIGUE_TIME,
			FATIGUE_SUM_1000,
			SAFE_FATIGUE_SCORE,
			ECONOMIC_RUN_SUM,
			ECONOMIC_RUN_TIME,
			ECONOMIC_RUN_SUM_1000,
			OIL_ECONOMIC_RUN_SCORE,
			URGENT_SUM,
			OIL_URGENT_SCORE,
			SAFE_URGENT_SCORE,
			AIR_CONDITION_SUM,
			AIR_CONDITION_TIME,
			AIR_CONDITION_TIME_1000,
			OIL_AIR_CONDITION_SCORE,
			ENGINE_ROTATE_TIME,
			OIL_SCORE_SUM,
			SAFE_SCORE_SUM,
			FACT_OILWEAR,
			CHECK_OILWEAR,
			SAVEOIL_SUM,
			SAVEOIL_RATIO,
			OILWEAR_SCORE,    
			ALL_SCORE_SUM,
			URGENT_LOWDOWN_NUM,
			URGENT_LOWDOWN_NUM_1000,
			OIL_URGENT_LOWDOWN_SCORE, 
			SAFE_URGENT_LOWDOWN_SCORE,
			URGENT_SPEED_NUM,
			URGENT_SPEED_NUM_1000,
			OIL_URGENT_SPEED_SCORE,
			SAFE_URGENT_SPEED_SCORE
			)
SELECT FINAL_SCORE.STAT_YEAR,
       FINAL_SCORE.STAT_MONTH,
       FINAL_SCORE.YEAR_MONTH,
       FINAL_SCORE.CORP_ID,
       FINAL_SCORE.CORP_NAME,
       FINAL_SCORE.VEHICLE_SUM,
       FINAL_SCORE.TRAVEL_MILEAGE,
       FINAL_SCORE.OIL_WEAR_SUM,
       FINAL_SCORE.OVERSPEED_SUM,
       FINAL_SCORE.OVERSPEED_TIME, 
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.OVERSPEED_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  OVERSPEED_SUM_1000,
       FINAL_SCORE.OIL_OVERSPEED_SCORE,
       FINAL_SCORE.SAFE_OVERSPEED_SCORE,
       FINAL_SCORE.OVERRPM_SUM,
       FINAL_SCORE.OVERRPM_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.OVERRPM_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  OVERRPM_SUM_1000,
       FINAL_SCORE.OIL_OVERRPM_SCORE,
       FINAL_SCORE.GEAR_GLIDE_SUM,
       FINAL_SCORE.GEAR_GLIDE_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.GEAR_GLIDE_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  GEAR_GLIDE_SUM_1000,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.GEAR_GLIDE_TIME/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  GEAR_GLIDE_TIME_1000,
       FINAL_SCORE.OIL_GEAR_GLIDE_SCORE,
       FINAL_SCORE.SAFE_GEAR_GLIDE_SCORE,
       FINAL_SCORE.LONG_IDLE_SUM,
       FINAL_SCORE.LONG_IDLE_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.LONG_IDLE_TIME/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  LONG_IDLE_TIME_1000,
       FINAL_SCORE.OIL_LONG_IDLE_SCORE,
       FINAL_SCORE.FATIGUE_SUM,
       FINAL_SCORE.FATIGUE_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.FATIGUE_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  FATIGUE_SUM_1000,
       FINAL_SCORE.SAFE_FATIGUE_SCORE,
       FINAL_SCORE.ECONOMIC_RUN_SUM,
       FINAL_SCORE.ECONOMIC_RUN_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.ECONOMIC_RUN_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  ECONOMIC_RUN_SUM_1000,
       FINAL_SCORE.OIL_ECONOMIC_RUN_SCORE,
       NULL,
       NULL,
       NULL,
       FINAL_SCORE.AIR_CONDITION_SUM,
       FINAL_SCORE.AIR_CONDITION_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.AIR_CONDITION_TIME/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  AIR_CONDITION_TIME_1000,
       FINAL_SCORE.OIL_AIR_CONDITION_SCORE,
       FINAL_SCORE.ENGINE_ROTATE_TIME,
       FINAL_SCORE.OIL_SCORE_SUM,
       FINAL_SCORE.SAFE_SCORE_SUM,
       FINAL_SCORE.FACT_OILWEAR,
       FINAL_SCORE.CHECK_OILWEAR,
       NULL,
       NULL,
       FINAL_SCORE.OILWEAR_SCORE,
       ROUND((FINAL_SCORE.OIL_SCORE_SUM + FINAL_SCORE.SAFE_SCORE_SUM +
             FINAL_SCORE.OILWEAR_SCORE),
             2) AS ALL_SCORE_SUM,
       FINAL_SCORE.URGENT_LOWDOWN_NUM,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.URGENT_LOWDOWN_NUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  URGENT_LOWDOWN_NUM_1000,
       FINAL_SCORE.OIL_URGENT_LOWDOWN_SCORE,
       FINAL_SCORE.SAFE_URGENT_LOWDOWN_SCORE,
       FINAL_SCORE.URGENT_SPEED_NUM,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.URGENT_SPEED_NUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  URGENT_SPEED_NUM_1000,
       FINAL_SCORE.OIL_URGENT_SPEED_SCORE,
       FINAL_SCORE.SAFE_URGENT_SPEED_SCORE
  FROM (SELECT BASE_SCORE.*,
               (OIL_OVERSPEED_SCORE + OIL_OVERRPM_SCORE +
               OIL_LONG_IDLE_SCORE + OIL_GEAR_GLIDE_SCORE +
               OIL_URGENT_SPEED_SCORE + OIL_URGENT_LOWDOWN_SCORE +
               OIL_AIR_CONDITION_SCORE + OIL_ECONOMIC_RUN_SCORE) AS OIL_SCORE_SUM,
               (SAFE_OVERSPEED_SCORE + SAFE_GEAR_GLIDE_SCORE +
               SAFE_URGENT_SPEED_SCORE + SAFE_URGENT_LOWDOWN_SCORE +
               SAFE_FATIGUE_SCORE) AS SAFE_SCORE_SUM
          FROM (SELECT MONTHLY.*,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERSPEED_SUM,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.SPEEDING_MIN,
                                                                   ?),
                                                               NVL(TVS.SPEEDING_MAX,
                                                                   ?)) *
                             TVS.SPEEDING_RIGHT / 100,
                             2) AS OIL_OVERSPEED_SCORE,
                        ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERRPM_SUM,
                                                       MONTHLY.TRAVEL_MILEAGE,
                                                       NVL(TVS.RPM_MIN,
                                                           ?),
                                                       NVL(TVS.RPM_MAX,
                                                           ?)) *
                             TVS.RPM_RIGHT / 100,
                             2) AS OIL_OVERRPM_SCORE,
                         ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.LONG_IDLE_TIME,
                                                         MONTHLY.TRAVEL_MILEAGE,
                                                         NVL(TVS.LONGIDLE_MIN,
                                                             ?),
                                                         NVL(TVS.LONGIDLE_MAX,
                                                             ?)) *
                       TVS.LONGIDLE_RIGHT / 100,
                       2) AS OIL_LONG_IDLE_SCORE,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.GEAR_GLIDE_TIME,
                                                           MONTHLY.TRAVEL_MILEAGE,
                                                           NVL(TVS.GEARGLIDE_MIN,
                                                               ?),
                                                           NVL(TVS.GEARGLIDE_MAX,
                                                               ?)) *
                         TVS.GEARGLIDE_RIGHT / 100,
                         2) AS OIL_GEAR_GLIDE_SCORE,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_SPEED_NUM,
                                                             MONTHLY.TRAVEL_MILEAGE,
                                                             NVL(TVS.URGENT_SPEEDUP_MIN,
                                                                 ?),
                                                             NVL(TVS.URGENT_SPEEDUP_MAX,
                                                                 ?)) *
                           TVS.URGENT_SPEEDUP_RIGHT / 100,
                           2) AS OIL_URGENT_SPEED_SCORE,
                          ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_LOWDOWN_NUM,
                                                           MONTHLY.TRAVEL_MILEAGE,
                                                           NVL(TVS.URGENT_SPEEDDOWN_MIN,
                                                               ?),
                                                           NVL(TVS.URGENT_SPEEDDOWN_MAX,
                                                               ?)) *
                         TVS.URGENT_SPEEDDOWN_RIGHT / 100,
                         2) AS OIL_URGENT_LOWDOWN_SCORE,
                        ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.AIR_CONDITION_TIME,
                                                             MONTHLY.TRAVEL_MILEAGE,
                                                             NVL(TVS.AIRCOND_MIN,
                                                                 ?),
                                                             NVL(TVS.AIRCOND_MAX,
                                                                 ?)) *
                           TVS.AIRCOND_RIGHT / 100,
                           2) AS OIL_AIR_CONDITION_SCORE,
                           ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.ECONOMIC_RUN_BL,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.ECONOMIC_MIN,
                                                                   ?),
                                                               NVL(TVS.ECONOMIC_MAX,
                                                                   ?)) *
                             TVS.ECONOMIC_RIGHT / 100,
                             2) AS OIL_ECONOMIC_RUN_SCORE,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERSPEED_SUM,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.ANSPEED_MIN,
                                                                   ?),
                                                               NVL(TVS.ANSPEED_MAX,
                                                                   ?)) *
                             TVS.ANSPEED_RIGHT / 100,
                             2) AS SAFE_OVERSPEED_SCORE,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.GEAR_GLIDE_TIME,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.ANGEARGLIDE_MIN,
                                                                   ?),
                                                               NVL(TVS.ANGEARGLIDE_MAX,
                                                                   ?)) *
                             TVS.ANGEARGLIDE_RIGHT / 100,
                             2) AS SAFE_GEAR_GLIDE_SCORE,
                              
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_SPEED_NUM,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.ANURGENT_SPEEDUP_MIN,
                                                                   ?),
                                                               NVL(TVS.ANURGENT_SPEEDUP_MAX,
                                                                   ?)) *
                             TVS.ANURGENT_SPEEDUP_RIGHT / 100,
                             2) AS SAFE_URGENT_SPEED_SCORE,
                            ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_LOWDOWN_NUM,
                                                           MONTHLY.TRAVEL_MILEAGE,
                                                           NVL(TVS.ANURGENT_SPEEDDOWN_MIN,
                                                               ?),
                                                           NVL(TVS.ANURGENT_SPEEDDOWN_MAX,
                                                               ?)) *
                         TVS.ANURGENT_SPEEDDOWN_RIGHT / 100,
                         2) AS SAFE_URGENT_LOWDOWN_SCORE,
                     
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.FATIGUE_SUM,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.FATIGUE_MIN,
                                                                   ?),
                                                               NVL(TVS.FATIGUE_MAX,
                                                                   ?)) *
                             TVS.FATIGUE_RIGHT / 100,
                             2) AS SAFE_FATIGUE_SCORE,
                      
                       GRADE_SCORE_PACK.COUNT_FACTOILWEAR_VALUE(MONTHLY.OIL_WEAR_SUM,
                                                                MONTHLY.TRAVEL_MILEAGE) FACT_OILWEAR,
                       ROUND(GRADE_SCORE_PACK.COUNT_CHECKOILWEAR_SCORE_REAL(MONTHLY.OIL_WEAR_SUM,
                                                                            MONTHLY.TRAVEL_MILEAGE,
                                                                            NVL(MONTHLY.CHECK_OILWEAR,
                                                                                0),
                                                                            NVL(TVS.OILWEARCHK_MIN,
                                                                                50),
                                                                            NVL(TVS.OILWEARCHK_MAX,
                                                                                150)) *
                             TVS.OILWEARCHK_RIGHT / 100,
                             2) OILWEAR_SCORE
                  FROM (SELECT STAT_YEAR,
                               STAT_MONTH,
                               YEAR_MONTH,
                               CORP_ID,
                               CORP_NAME,
                               COUNT(DISTINCT VID) VEHICLE_SUM,
                               SUM(NVL(TRAVEL_MILEAGE, 0)) TRAVEL_MILEAGE,
                               SUM(NVL(OIL_WEAR_SUM, 0)) OIL_WEAR_SUM,
                               SUM(NVL(OVERSPEED_SUM, 0)) OVERSPEED_SUM,
                               SUM(NVL(OVERSPEED_TIME, 0)) OVERSPEED_TIME,
                               SUM(NVL(OVERRPM_SUM, 0)) OVERRPM_SUM,
                               SUM(NVL(OVERRPM_TIME, 0)) OVERRPM_TIME,
                               SUM(NVL(GEAR_GLIDE_SUM, 0)) GEAR_GLIDE_SUM,
                               SUM(NVL(GEAR_GLIDE_TIME, 0)) GEAR_GLIDE_TIME,
                               SUM(NVL(LONG_IDLE_SUM, 0)) LONG_IDLE_SUM,
                               SUM(NVL(LONG_IDLE_TIME, 0)) LONG_IDLE_TIME,
                               SUM(NVL(FATIGUE_SUM, 0)) FATIGUE_SUM,
                               SUM(NVL(FATIGUE_TIME, 0)) FATIGUE_TIME,
                               SUM(NVL(ECONOMIC_RUN_SUM, 0)) ECONOMIC_RUN_SUM,
                               SUM(NVL(ECONOMIC_RUN_TIME, 0)) ECONOMIC_RUN_TIME,
                               SUM(NVL(URGENT_SUM, 0)) URGENT_SUM,
                               SUM(NVL(AIR_CONDITION_SUM, 0)) AIR_CONDITION_SUM,
                               SUM(NVL(AIR_CONDITION_TIME, 0)) AIR_CONDITION_TIME,
                               SUM(NVL(ENGINE_ROTATE_TIME, 0)) ENGINE_ROTATE_TIME,
                               AVG(CHECK_OILWEAR) CHECK_OILWEAR,
                               SUM(NVL(URGENT_LOWDOWN_NUM, 0)) URGENT_LOWDOWN_NUM,
                               SUM(NVL(URGENT_SPEED_NUM, 0)) URGENT_SPEED_NUM,
                               NVL(ROUND(DECODE(SUM(CASE
                                                      WHEN ENGINE_ROTATE_TIME IS NULL THEN
                                                       0
                                                      ELSE
                                                       ENGINE_ROTATE_TIME
                                                    END),
                                                0,
                                                0,
                                                SUM(CASE
                                                      WHEN ECONOMIC_RUN_TIME IS NULL THEN
                                                       0
                                                      ELSE
                                                       ECONOMIC_RUN_TIME
                                                    END) * 100 /
                                                SUM(CASE
                                                      WHEN ENGINE_ROTATE_TIME IS NULL THEN
                                                       0
                                                      ELSE
                                                       ENGINE_ROTATE_TIME
                                                    END)),
                                         2),
                                   0) AS ECONOMIC_RUN_BL
                          FROM TS_GRADE_MONTHSTAT GM WHERE GM.YEAR_MONTH = ?
                         GROUP BY STAT_YEAR,
                                  STAT_MONTH,
                                  YEAR_MONTH,
                                  CORP_ID,
                                  CORP_NAME) MONTHLY,
                       (SELECT SET0.ENT_ID, SET0.CHECK_TIME_CODE, SCORE.*
                          FROM TB_VEHICLE_SCORE SCORE, TB_CHECKMONTH_SET SET0
                         WHERE SCORE.CHECK_TIME_ID = SET0.CHECK_TIME_ID
                           AND SCORE.ENABLE_FLAG = 1
                           AND SET0.ENABLE_FLAG = 1) TVS
                 WHERE MONTHLY.CORP_ID = TVS.ENT_ID
                   AND MONTHLY.YEAR_MONTH = TVS.CHECK_TIME_CODE) BASE_SCORE) FINAL_SCORE
			</value>
			<type>string</type>
			<comments> 统计企业月度考核</comments>
			<check></check>
		</item>
			<item name="accountGradeMonthTeamSql" >
			<value>
			INSERT INTO TS_GRADE_MONTHSTAT_TEAM (
			STAT_YEAR,
			STAT_MONTH,
			YEAR_MONTH,
			CORP_ID,
			CORP_NAME,
            TEAM_ID,
            TEAM_NAME,
			VEHICLE_SUM,
			TRAVEL_MILEAGE,
			OIL_WEAR_SUM,
			OVERSPEED_SUM,
			OVERSPEED_TIME,
			OVERSPEED_SUM_1000,
			OIL_OVERSPEED_SCORE,
			SAFE_OVERSPEED_SCORE,
			OVERRPM_SUM,
			OVERRPM_TIME,
			OVERRPM_SUM_1000,
			OIL_OVERRPM_SCORE,
			GEAR_GLIDE_SUM,
			GEAR_GLIDE_TIME,
			GEAR_GLIDE_SUM_1000,
			GEAR_GLIDE_TIME_1000,
			OIL_GEAR_GLIDE_SCORE,
			SAFE_GEAR_GLIDE_SCORE,
			LONG_IDLE_SUM,
			LONG_IDLE_TIME,
			LONG_IDLE_TIME_1000,
			OIL_LONG_IDLE_SCORE,
			FATIGUE_SUM,
			FATIGUE_TIME,
			FATIGUE_SUM_1000,
			SAFE_FATIGUE_SCORE,
			ECONOMIC_RUN_SUM,
			ECONOMIC_RUN_TIME,
			ECONOMIC_RUN_SUM_1000,
			OIL_ECONOMIC_RUN_SCORE,
			URGENT_SUM,
			OIL_URGENT_SCORE,
			SAFE_URGENT_SCORE,
			AIR_CONDITION_SUM,
			AIR_CONDITION_TIME,
			AIR_CONDITION_TIME_1000,
			OIL_AIR_CONDITION_SCORE,
			ENGINE_ROTATE_TIME,
			OIL_SCORE_SUM,
			SAFE_SCORE_SUM,
			FACT_OILWEAR,
			CHECK_OILWEAR,
			SAVEOIL_SUM,
			SAVEOIL_RATIO,
			OILWEAR_SCORE,    
			ALL_SCORE_SUM,
			URGENT_LOWDOWN_NUM,
			URGENT_LOWDOWN_NUM_1000,
			OIL_URGENT_LOWDOWN_SCORE, 
			SAFE_URGENT_LOWDOWN_SCORE,
			URGENT_SPEED_NUM,
			URGENT_SPEED_NUM_1000,
			OIL_URGENT_SPEED_SCORE,
			SAFE_URGENT_SPEED_SCORE
			)
SELECT FINAL_SCORE.STAT_YEAR,
       FINAL_SCORE.STAT_MONTH,
       FINAL_SCORE.YEAR_MONTH,
       FINAL_SCORE.CORP_ID,
       FINAL_SCORE.CORP_NAME,
       FINAL_SCORE.TEAM_ID,
       FINAL_SCORE.TEAM_NAME,
       FINAL_SCORE.VEHICLE_SUM,
       FINAL_SCORE.TRAVEL_MILEAGE,
       FINAL_SCORE.OIL_WEAR_SUM,
       FINAL_SCORE.OVERSPEED_SUM,
       FINAL_SCORE.OVERSPEED_TIME, 
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.OVERSPEED_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  OVERSPEED_SUM_1000,
       FINAL_SCORE.OIL_OVERSPEED_SCORE,
       FINAL_SCORE.SAFE_OVERSPEED_SCORE,
       FINAL_SCORE.OVERRPM_SUM,
       FINAL_SCORE.OVERRPM_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.OVERRPM_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  OVERRPM_SUM_1000,
       FINAL_SCORE.OIL_OVERRPM_SCORE,
       FINAL_SCORE.GEAR_GLIDE_SUM,
       FINAL_SCORE.GEAR_GLIDE_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.GEAR_GLIDE_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  GEAR_GLIDE_SUM_1000,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.GEAR_GLIDE_TIME/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  GEAR_GLIDE_TIME_1000,
       FINAL_SCORE.OIL_GEAR_GLIDE_SCORE,
       FINAL_SCORE.SAFE_GEAR_GLIDE_SCORE,
       FINAL_SCORE.LONG_IDLE_SUM,
       FINAL_SCORE.LONG_IDLE_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.LONG_IDLE_TIME/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  LONG_IDLE_TIME_1000,
       FINAL_SCORE.OIL_LONG_IDLE_SCORE,
       FINAL_SCORE.FATIGUE_SUM,
       FINAL_SCORE.FATIGUE_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.FATIGUE_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  FATIGUE_SUM_1000,
       FINAL_SCORE.SAFE_FATIGUE_SCORE,
       FINAL_SCORE.ECONOMIC_RUN_SUM,
       FINAL_SCORE.ECONOMIC_RUN_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.ECONOMIC_RUN_SUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  ECONOMIC_RUN_SUM_1000,
       FINAL_SCORE.OIL_ECONOMIC_RUN_SCORE,
       NULL,
       NULL,
       NULL,
       FINAL_SCORE.AIR_CONDITION_SUM,
       FINAL_SCORE.AIR_CONDITION_TIME,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.AIR_CONDITION_TIME/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  AIR_CONDITION_TIME_1000,
       FINAL_SCORE.OIL_AIR_CONDITION_SCORE,
       FINAL_SCORE.ENGINE_ROTATE_TIME,
       FINAL_SCORE.OIL_SCORE_SUM,
       FINAL_SCORE.SAFE_SCORE_SUM,
       FINAL_SCORE.FACT_OILWEAR,
       FINAL_SCORE.CHECK_OILWEAR,
       NULL,
       NULL,
       FINAL_SCORE.OILWEAR_SCORE,
       ROUND((FINAL_SCORE.OIL_SCORE_SUM + FINAL_SCORE.SAFE_SCORE_SUM +
             FINAL_SCORE.OILWEAR_SCORE),
             2) AS ALL_SCORE_SUM,
       FINAL_SCORE.URGENT_LOWDOWN_NUM,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.URGENT_LOWDOWN_NUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  URGENT_LOWDOWN_NUM_1000,
       FINAL_SCORE.OIL_URGENT_LOWDOWN_SCORE,
       FINAL_SCORE.SAFE_URGENT_LOWDOWN_SCORE,
       FINAL_SCORE.URGENT_SPEED_NUM,
       ROUND(CASE FINAL_SCORE.TRAVEL_MILEAGE
         WHEN 0 THEN 0
           ELSE
             (FINAL_SCORE.URGENT_SPEED_NUM/FINAL_SCORE.TRAVEL_MILEAGE)*1000
             END,2)  URGENT_SPEED_NUM_1000,
       FINAL_SCORE.OIL_URGENT_SPEED_SCORE,
       FINAL_SCORE.SAFE_URGENT_SPEED_SCORE
  FROM (SELECT BASE_SCORE.*,
               (OIL_OVERSPEED_SCORE + OIL_OVERRPM_SCORE +
               OIL_LONG_IDLE_SCORE + OIL_GEAR_GLIDE_SCORE +
               OIL_URGENT_SPEED_SCORE + OIL_URGENT_LOWDOWN_SCORE +
               OIL_AIR_CONDITION_SCORE + OIL_ECONOMIC_RUN_SCORE) AS OIL_SCORE_SUM,
               (SAFE_OVERSPEED_SCORE + SAFE_GEAR_GLIDE_SCORE +
               SAFE_URGENT_SPEED_SCORE + SAFE_URGENT_LOWDOWN_SCORE +
               SAFE_FATIGUE_SCORE) AS SAFE_SCORE_SUM
          FROM (SELECT MONTHLY.*,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERSPEED_SUM,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.SPEEDING_MIN,
                                                                   ?),
                                                               NVL(TVS.SPEEDING_MAX,
                                                                   ?)) *
                             TVS.SPEEDING_RIGHT / 100,
                             2) AS OIL_OVERSPEED_SCORE,
                        ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERRPM_SUM,
                                                       MONTHLY.TRAVEL_MILEAGE,
                                                       NVL(TVS.RPM_MIN,
                                                           ?),
                                                       NVL(TVS.RPM_MAX,
                                                           ?)) *
                             TVS.RPM_RIGHT / 100,
                             2) AS OIL_OVERRPM_SCORE,
                         ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.LONG_IDLE_TIME,
                                                         MONTHLY.TRAVEL_MILEAGE,
                                                         NVL(TVS.LONGIDLE_MIN,
                                                             ?),
                                                         NVL(TVS.LONGIDLE_MAX,
                                                             ?)) *
                       TVS.LONGIDLE_RIGHT / 100,
                       2) AS OIL_LONG_IDLE_SCORE,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.GEAR_GLIDE_TIME,
                                                           MONTHLY.TRAVEL_MILEAGE,
                                                           NVL(TVS.GEARGLIDE_MIN,
                                                               ?),
                                                           NVL(TVS.GEARGLIDE_MAX,
                                                               ?)) *
                         TVS.GEARGLIDE_RIGHT / 100,
                         2) AS OIL_GEAR_GLIDE_SCORE,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_SPEED_NUM,
                                                             MONTHLY.TRAVEL_MILEAGE,
                                                             NVL(TVS.URGENT_SPEEDUP_MIN,
                                                                 ?),
                                                             NVL(TVS.URGENT_SPEEDUP_MAX,
                                                                 ?)) *
                           TVS.URGENT_SPEEDUP_RIGHT / 100,
                           2) AS OIL_URGENT_SPEED_SCORE,
                          ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_LOWDOWN_NUM,
                                                           MONTHLY.TRAVEL_MILEAGE,
                                                           NVL(TVS.URGENT_SPEEDDOWN_MIN,
                                                               ?),
                                                           NVL(TVS.URGENT_SPEEDDOWN_MAX,
                                                               ?)) *
                         TVS.URGENT_SPEEDDOWN_RIGHT / 100,
                         2) AS OIL_URGENT_LOWDOWN_SCORE,
                        ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.AIR_CONDITION_TIME,
                                                             MONTHLY.TRAVEL_MILEAGE,
                                                             NVL(TVS.AIRCOND_MIN,
                                                                 ?),
                                                             NVL(TVS.AIRCOND_MAX,
                                                                 ?)) *
                           TVS.AIRCOND_RIGHT / 100,
                           2) AS OIL_AIR_CONDITION_SCORE,
                           ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.ECONOMIC_RUN_BL,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.ECONOMIC_MIN,
                                                                   ?),
                                                               NVL(TVS.ECONOMIC_MAX,
                                                                   ?)) *
                             TVS.ECONOMIC_RIGHT / 100,
                             2) AS OIL_ECONOMIC_RUN_SCORE,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.OVERSPEED_SUM,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.ANSPEED_MIN,
                                                                   ?),
                                                               NVL(TVS.ANSPEED_MAX,
                                                                   ?)) *
                             TVS.ANSPEED_RIGHT / 100,
                             2) AS SAFE_OVERSPEED_SCORE,
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.GEAR_GLIDE_TIME,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.ANGEARGLIDE_MIN,
                                                                   ?),
                                                               NVL(TVS.ANGEARGLIDE_MAX,
                                                                   ?)) *
                             TVS.ANGEARGLIDE_RIGHT / 100,
                             2) AS SAFE_GEAR_GLIDE_SCORE,
                              
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_SPEED_NUM,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.ANURGENT_SPEEDUP_MIN,
                                                                   ?),
                                                               NVL(TVS.ANURGENT_SPEEDUP_MAX,
                                                                   ?)) *
                             TVS.ANURGENT_SPEEDUP_RIGHT / 100,
                             2) AS SAFE_URGENT_SPEED_SCORE,
                            ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.URGENT_LOWDOWN_NUM,
                                                           MONTHLY.TRAVEL_MILEAGE,
                                                           NVL(TVS.ANURGENT_SPEEDDOWN_MIN,
                                                               ?),
                                                           NVL(TVS.ANURGENT_SPEEDDOWN_MAX,
                                                               ?)) *
                         TVS.ANURGENT_SPEEDDOWN_RIGHT / 100,
                         2) AS SAFE_URGENT_LOWDOWN_SCORE,
                     
                       ROUND(GRADE_SCORE_PACK.COUNT_BASE_SCORE(MONTHLY.FATIGUE_SUM,
                                                               MONTHLY.TRAVEL_MILEAGE,
                                                               NVL(TVS.FATIGUE_MIN,
                                                                   ?),
                                                               NVL(TVS.FATIGUE_MAX,
                                                                   ?)) *
                             TVS.FATIGUE_RIGHT / 100,
                             2) AS SAFE_FATIGUE_SCORE,
                      
                       GRADE_SCORE_PACK.COUNT_FACTOILWEAR_VALUE(MONTHLY.OIL_WEAR_SUM,
                                                                MONTHLY.TRAVEL_MILEAGE) FACT_OILWEAR,
                       ROUND(GRADE_SCORE_PACK.COUNT_CHECKOILWEAR_SCORE_REAL(MONTHLY.OIL_WEAR_SUM,
                                                                            MONTHLY.TRAVEL_MILEAGE,
                                                                            NVL(MONTHLY.CHECK_OILWEAR,
                                                                                0),
                                                                            NVL(TVS.OILWEARCHK_MIN,
                                                                                50),
                                                                            NVL(TVS.OILWEARCHK_MAX,
                                                                                150)) *
                             TVS.OILWEARCHK_RIGHT / 100,
                             2) OILWEAR_SCORE
                  FROM (SELECT STAT_YEAR,
                               STAT_MONTH,
                               YEAR_MONTH,
                               CORP_ID,
                               CORP_NAME,
                               TEAM_ID,
                               TEAM_NAME,
                               COUNT(DISTINCT VID) VEHICLE_SUM,
                               SUM(NVL(TRAVEL_MILEAGE, 0)) TRAVEL_MILEAGE,
                               SUM(NVL(OIL_WEAR_SUM, 0)) OIL_WEAR_SUM,
                               SUM(NVL(OVERSPEED_SUM, 0)) OVERSPEED_SUM,
                               SUM(NVL(OVERSPEED_TIME, 0)) OVERSPEED_TIME,
                               SUM(NVL(OVERRPM_SUM, 0)) OVERRPM_SUM,
                               SUM(NVL(OVERRPM_TIME, 0)) OVERRPM_TIME,
                               SUM(NVL(GEAR_GLIDE_SUM, 0)) GEAR_GLIDE_SUM,
                               SUM(NVL(GEAR_GLIDE_TIME, 0)) GEAR_GLIDE_TIME,
                               SUM(NVL(LONG_IDLE_SUM, 0)) LONG_IDLE_SUM,
                               SUM(NVL(LONG_IDLE_TIME, 0)) LONG_IDLE_TIME,
                               SUM(NVL(FATIGUE_SUM, 0)) FATIGUE_SUM,
                               SUM(NVL(FATIGUE_TIME, 0)) FATIGUE_TIME,
                               SUM(NVL(ECONOMIC_RUN_SUM, 0)) ECONOMIC_RUN_SUM,
                               SUM(NVL(ECONOMIC_RUN_TIME, 0)) ECONOMIC_RUN_TIME,
                               SUM(NVL(URGENT_SUM, 0)) URGENT_SUM,
                               SUM(NVL(AIR_CONDITION_SUM, 0)) AIR_CONDITION_SUM,
                               SUM(NVL(AIR_CONDITION_TIME, 0)) AIR_CONDITION_TIME,
                               SUM(NVL(ENGINE_ROTATE_TIME, 0)) ENGINE_ROTATE_TIME,
                               AVG(CHECK_OILWEAR) CHECK_OILWEAR,
                               SUM(NVL(URGENT_LOWDOWN_NUM, 0)) URGENT_LOWDOWN_NUM,
                               SUM(NVL(URGENT_SPEED_NUM, 0)) URGENT_SPEED_NUM,
                               NVL(ROUND(DECODE(SUM(CASE
                                                      WHEN ENGINE_ROTATE_TIME IS NULL THEN
                                                       0
                                                      ELSE
                                                       ENGINE_ROTATE_TIME
                                                    END),
                                                0,
                                                0,
                                                SUM(CASE
                                                      WHEN ECONOMIC_RUN_TIME IS NULL THEN
                                                       0
                                                      ELSE
                                                       ECONOMIC_RUN_TIME
                                                    END) * 100 /
                                                SUM(CASE
                                                      WHEN ENGINE_ROTATE_TIME IS NULL THEN
                                                       0
                                                      ELSE
                                                       ENGINE_ROTATE_TIME
                                                    END)),
                                         2),
                                   0) AS ECONOMIC_RUN_BL
                          FROM TS_GRADE_MONTHSTAT GM WHERE GM.YEAR_MONTH = ?
                         GROUP BY STAT_YEAR,
                                  STAT_MONTH,
                                  YEAR_MONTH,
                                  CORP_ID,
                                  CORP_NAME,
                                  TEAM_ID,
                                  TEAM_NAME) MONTHLY,
                       (SELECT SET0.ENT_ID, SET0.CHECK_TIME_CODE, SCORE.*
                          FROM TB_VEHICLE_SCORE SCORE, TB_CHECKMONTH_SET SET0
                         WHERE SCORE.CHECK_TIME_ID = SET0.CHECK_TIME_ID
                           AND SCORE.ENABLE_FLAG = 1
                           AND SET0.ENABLE_FLAG = 1) TVS
                 WHERE MONTHLY.CORP_ID = TVS.ENT_ID
                   AND MONTHLY.YEAR_MONTH = TVS.CHECK_TIME_CODE) BASE_SCORE) FINAL_SCORE
			</value>
			<type>string</type>
			<comments> 统计车队月度考核</comments>
			<check></check>
		</item>
		<item name="sql_deleteGradeCorp">
			<value>
				DELETE FROM TS_GRADE_MONTHSTAT_CORP TS WHERE TS.YEAR_MONTH = ?
			</value>
			<type>string</type>
			<comments>删除企业考核月数据 </comments>
			<check></check>
		</item>
		<item name="sql_deleteGradeTeam">
			<value>
				DELETE FROM TS_GRADE_MONTHSTAT_TEAM TS WHERE TS.YEAR_MONTH = ?
			</value>
			<type>string</type>
			<comments>删除车队考核月数据 </comments>
			<check></check>
		</item>
		<item name="sql_selectOPerator">
			<value>
				SELECT DISTINCT ENT_ID FROM SYS_SP_OPERATOR ORDER BY ENT_ID
			</value>
			<type>string</type>
			<comments>查询用户所对的组织ID</comments>
			<check></check>
		</item>
	    <item name="sql_deleteThSynAlarmNum">
		     <value>
                 TRUNCATE TABLE th_syn_alarm_num 
		     </value>
		     <type>string</type>
		     <comments>删除首页告警数据</comments>
		     <check></check>
	    </item>	
		<item name="synDayStatAlarmSQL">
			<value>
				SELECT /*+ NO_USE_NL(B) */ SUM(DECODE(B.SYS_ALARM_LEVEL_ID, '1', BASEINFO.ALARM_NUM, '0')) SERIOUSCOUNT,SUM(DECODE(B.SYS_ALARM_LEVEL_ID, '2', BASEINFO.ALARM_NUM, '0')) URGENTCOUNT,SUM(DECODE(B.SYS_ALARM_LEVEL_ID, '3', BASEINFO.ALARM_NUM, '0')) GENERALCOUNT,SUM(DECODE(B.SYS_ALARM_LEVEL_ID, '4', BASEINFO.ALARM_NUM, '0')) SUGGESTIONCOUNT FROM (SELECT A.ALARM_NUM, A.ALARM_CODE FROM TS_ALARM_DAYSTAT A,(SELECT VID FROM TB_VEHICLE V,(SELECT T.ENT_ID FROM TB_ORGANIZATION T WHERE T.ENABLE_FLAG != 0 AND T.ENT_TYPE = 2 START WITH T.PARENT_ID = ? CONNECT BY PRIOR T.ENT_ID = T.PARENT_ID UNION SELECT T.ENT_ID FROM TB_ORGANIZATION T WHERE T.ENT_ID = ?) ORG WHERE V.ENT_ID = ORG.ENT_ID) VE WHERE A.STAT_DATE &gt; ? AND A.STAT_DATE &lt; ? AND A.VID = VE.VID) BASEINFO LEFT JOIN (SELECT AA.ALARM_CODE,AA.ALARM_NAME,DD.LEVEL_NAME,CC.SYS_ALARM_LEVEL_ID FROM SYS_ALARM_TYPE AA LEFT JOIN SYS_ALARM_TYPE AA1 ON AA1.ALARM_CODE =AA.PARENT_CODE LEFT JOIN TB_ALARM_ENT_INFO BB ON AA.ALARM_CODE =BB.SYS_ALARM_TYPE_ID LEFT JOIN TB_ALARM_ENT_CONF CC ON BB.TB_ALARM_ENT_CONF_ID = CC.PID LEFT JOIN SYS_ALARM_LEVEL DD ON DD.LEVEL_ID =CC.SYS_ALARM_LEVEL_ID WHERE CC.ENT_ID = (SELECT (CASE WHEN (SELECT DISTINCT ENT_ID FROM TB_ALARM_ENT_CONF WHERE ENT_ID = ?) IS NOT NULL THEN ? ELSE 0 END) GG FROM DUAL)) B ON BASEINFO.ALARM_CODE = B.ALARM_CODE
			</value>
			<type>string</type>
			<comments>同步日、周报警SQL</comments>
			<check></check>
		</item>
		<item name="synMonthStatAlarmSQL">
			<value>
				SELECT /*+ NO_USE_NL(B) */ SUM(DECODE(B.SYS_ALARM_LEVEL_ID, '1', BASEINFO.ALARM_NUM, '0')) SERIOUSCOUNT,SUM(DECODE(B.SYS_ALARM_LEVEL_ID, '2', BASEINFO.ALARM_NUM, '0')) URGENTCOUNT,SUM(DECODE(B.SYS_ALARM_LEVEL_ID, '3', BASEINFO.ALARM_NUM, '0')) GENERALCOUNT,SUM(DECODE(B.SYS_ALARM_LEVEL_ID, '4', BASEINFO.ALARM_NUM, '0')) SUGGESTIONCOUNT FROM (SELECT A.ALARM_NUM, A.ALARM_CODE FROM TS_ALARM_MONTHSTAT A, (SELECT VID FROM TB_VEHICLE V,(SELECT T.ENT_ID FROM TB_ORGANIZATION T WHERE T.ENABLE_FLAG != 0 AND T.ENT_TYPE = 2 START WITH T.PARENT_ID = ? CONNECT BY PRIOR T.ENT_ID = T.PARENT_ID UNION SELECT T.ENT_ID FROM TB_ORGANIZATION T WHERE T.ENT_ID = ?) ORG WHERE V.ENT_ID = ORG.ENT_ID) VE WHERE A.STAT_DATE = ? AND A.STAT_YEAR = ? AND A.VID = VE.VID) BASEINFO LEFT JOIN (SELECT AA.ALARM_CODE,AA.ALARM_NAME,DD.LEVEL_NAME,CC.SYS_ALARM_LEVEL_ID FROM SYS_ALARM_TYPE AA LEFT JOIN SYS_ALARM_TYPE AA1 ON AA1.ALARM_CODE =AA.PARENT_CODE LEFT JOIN TB_ALARM_ENT_INFO BB ON AA.ALARM_CODE =BB.SYS_ALARM_TYPE_ID LEFT JOIN TB_ALARM_ENT_CONF CC ON BB.TB_ALARM_ENT_CONF_ID = CC.PID LEFT JOIN SYS_ALARM_LEVEL DD ON DD.LEVEL_ID =CC.SYS_ALARM_LEVEL_ID WHERE CC.ENT_ID = (SELECT (CASE WHEN (SELECT DISTINCT ENT_ID FROM TB_ALARM_ENT_CONF WHERE ENT_ID = ?) IS NOT NULL THEN ? ELSE 0 END) GG FROM DUAL)) B ON BASEINFO.ALARM_CODE = B.ALARM_CODE
			</value>
			<type>string</type>
			<comments>同步月报警SQL</comments>
			<check></check>
		</item>
		<item name="selectSynalarmNum">
			<value>
				SELECT * FROM TH_SYN_ALARM_NUM 
			</value>
			<type>string</type>
			<comments>查询同步报警列表</comments>
			<check></check>
		</item>
		<item name="updateSynalarmNum">
			<value>
				UPDATE TH_SYN_ALARM_NUM SET ALARM_LIST = ? WHERE ENT_ID = ?
			</value>
			<type>string</type>
			<comments>更新同步报警表</comments>
			<check></check>
		</item>
		<item name="insertSynalarmNum">
			<value>
				INSERT INTO TH_SYN_ALARM_NUM VALUES(?,?)
			</value>
			<type>string</type>
			<comments>添加同步报警表</comments>
			<check></check>
		</item>
		<item name="sql_updateVehicleReportStateSql">
			<value>
				UPDATE TH_VEHICLE_ANALYSIS_REPORT
				   SET CREATESTATE = '2'
				 WHERE FUN_DATE2UTC(SYSDATE) - BUILD_TIME &gt; 3600000
				   AND CREATESTATE = '0'
			</value>
			<type>string</type>
			<comments>更新单车分析报告生成状态</comments>
			<check></check>
		</item>
		<item name="sql_insertOpenDoorDetails">
			<value>
				INSERT INTO TH_VEHICLE_OPENDOOR_DETAIL
				(
				  AUTO_ID            ,
				  VID                ,
				  VEHICLE_NO         ,
				  VIN_CODE           ,
				  INNER_CODE         ,
				  CORP_ID            ,
				  CORP_NAME          ,
				  TEAM_ID            ,
				  TEAM_NAME          ,
				  VLINE_ID           ,
				  LINE_NAME          ,
				  AREA_ID            ,
				  MTYPE_CODE         ,
				  MEDIA_URI          ,
				  DOOR_ID            ,
				  OPENDOOR_TYPE      ,
				  BEGIN_UTC          ,
				  BEGIN_LAT          ,
				  BEGIN_LON          ,
				  BEGIN_MAPLON       ,
				  BEGIN_MAPLAT       ,
				  BEGIN_ELEVATION    ,
				  BEGIN_DIRECTION    ,
				  BEGIN_SPEED        ,
				  END_UTC            ,
				  END_LAT            ,
				  END_LON            ,
				  END_MAPLON         ,
				  END_MAPLAT         ,
				  END_ELEVATION      ,
				  END_DIRECTION      ,
				  END_SPEED          ,
				  CONTINUE_TIME      ,
				  KEYPOINT_GPS_SPEED ,
				  MILEAGE            ,
				  OIL_WEAR			 ,
				  DRIVER_ID          ,
				  DRIVER_NAME        ,
				  DRIVER_SRC           
				)VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储车辆开门明细</comments>
			<check></check>
		</item>
		<item name="sql_saveOilDayStat">
			<value>
				INSERT INTO TS_VEHICLE_OILMASS_DAYSTAT (STAT_DATE,VID,VEHICLE_NO,INNER_CODE,PROD_TYPE,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,DRIVER_ID,DRIVER_NAME,CHANGE_TYPE,ADDOIL_VOLUME,DECREASEOIL_VOLUME,USEOIL_VOLUME) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储车辆油量监控日统计</comments>
			<check></check>
		</item>
		<item name="sql_saveOpenningDoorDay">
			<value>
				INSERT INTO TS_OUTLINE_DAYSTAT (AUTO_ID,STAT_DATE,VID,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,VEHICLE_NO,VIN_CODE,OUTLINE_NUM,OUTLINE_TIME,OUTLINE_CLASS,OUTLINE_CODE,MILEAGE,OIL_WEAR,VLINE_ID,LINE_NAME) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
			</value>
			<type>string</type>
			<comments>存储车辆开门运营违规日统计</comments>
			<check></check>
		</item>
		<item name="sql_selectOpenningDoorDay">
			<value>
				SELECT COUNT(*) AS NUM,
				       VID,
				       SUM((END_UTC - BEGIN_UTC) / 1000) AS TIME,
				       OPENDOOR_TYPE,SUM(MILEAGE) AS MILEAGE,SUM(OIL_WEAR) AS OIL_WEAR
				  FROM (SELECT OPD.VID, OPD.BEGIN_UTC, OPD.END_UTC, OPD.OPENDOOR_TYPE,MILEAGE,OIL_WEAR
				          FROM KCPT.TH_VEHICLE_OPENDOOR_DETAIL OPD
				         WHERE OPD.VID = ?
				           AND OPD.BEGIN_UTC &gt;= ?
				           AND OPD.BEGIN_UTC &lt;= ?
				           AND OPD.OPENDOOR_TYPE !='1')
				 GROUP BY VID, OPENDOOR_TYPE
			</value>
			<type>string</type>
			<comments>查询车辆开门详细信息</comments>
			<check></check>
		</item>
		<item name="sql_procExtendTablePartitionSql">
			<value>
				{call ADD_DIURNAL_PARTITION_PROC(?,?,?,?,?,?)}
			</value>
			<type>string</type>
			<comments>调用扩展表分区存储过程</comments>
			<check></check>
		</item>
		<item name="sql_queryNextJobTimeSql">
			<value>
				SELECT DISTINCT JOBTIME FROM (
					SELECT JOB_TIME JOBTIME
					FROM (
					SELECT CASE
					         WHEN JOBTIME &lt; TO_CHAR(SYSDATE, 'hh24:mi:ss') THEN
					          TO_DATE(TO_CHAR(SYSDATE + 1, 'YYYY-MM-DD') || JOBTIME,
					                  'YYYY-MM-DD hh24:mi:ss')
					         ELSE
					          TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || JOBTIME,
					                  'YYYY-MM-DD hh24:mi:ss')
					       end JOB_TIME,FALG
					  FROM (SELECT DISTINCT BEGIN_TIME JOBTIME,'0' FALG 
					          FROM TB_PHOTO_SETTINGS_DETAIL
					        UNION
					        SELECT DISTINCT END_TIME JOBTIME,'1' FLAG FROM TB_PHOTO_SETTINGS_DETAIL)
					)) ORDER BY JOBTIME
			</value>
			<type>string</type>
			<comments>查询终端参数设置JOB列表</comments>
			<check></check>
		</item>
		<item name="sql_queryWaitSendJobSql">
			<value>
				SELECT T.VID,
		             T.TIMING_INTERVAL,
		             T.DISTANCE_INTERVAL,
		             TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || t.BEGIN_TIME,
		                     'YYYY-MM-DD hh24:mi:ss') BEGIN_TIME,
		             TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || t.END_TIME,
		                     'YYYY-MM-DD hh24:mi:ss') END_TIME,
		             M.CREATE_BY,
		             T.DETAIL_ID,
		             V.VEHICLE_NO,
		             S.COMMADDR,
		             E.OEM_CODE,
		             '0' TASK_FLAG,
		             TER_TYPE,
		             D.DVR_NO,
		             IS_NEW,
		             DECODE(F.FIRMWARE_VERSION,'','808','808B') TPROTOCOL_TYPE
		        FROM TB_PHOTO_SETTINGS_DETAIL T,
		             TB_PHOTO_SETTINGS        M,
		             TB_VEHICLE               V,
		             TB_SIM                   S,
		             TB_TERMINAL              E,
		             TR_SERVICEUNIT           R,
		             TB_DVR          D,
		             TH_TERMINAL_VERSION_RECORD F
		       WHERE T.SETTING_ID = M.AUTO_ID
		         AND T.VID = V.VID
		         AND T.VID = R.VID
		         AND S.SID = R.SID
		         AND E.TID = R.TID
		         AND R.DVR_ID = D.DVR_ID(+)
		         AND ''||T.VID = F.VID(+)
		         AND ((FUN_DATE2UTC(TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || BEGIN_TIME,
		                       'YYYY-MM-DD hh24:mi:ss')) &gt;= ? and
		             FUN_DATE2UTC(TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || BEGIN_TIME,
		                       'YYYY-MM-DD hh24:mi:ss')) &lt; ? ) OR
		             (FUN_DATE2UTC(TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || END_TIME,
		                       'YYYY-MM-DD hh24:mi:ss')) &gt;= ? and
		             FUN_DATE2UTC(TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || END_TIME,
		                       'YYYY-MM-DD hh24:mi:ss')) &lt; ? ))
		      UNION ALL
		      SELECT T.VID,
		             T.TIMING_INTERVAL,
		             T.DISTANCE_INTERVAL,
		             TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || t.BEGIN_TIME,
		                     'YYYY-MM-DD hh24:mi:ss')  BEGIN_TIME,
		             TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || t.END_TIME,
		                     'YYYY-MM-DD hh24:mi:ss') END_TIME,
		             M.CREATE_BY,
		             T.DETAIL_ID,
		             V.VEHICLE_NO,
		             S.COMMADDR,
		             E.OEM_CODE,
		             '1' TASK_FLAG,
		             TER_TYPE,
		             D.DVR_NO,
		             IS_NEW,
		             DECODE(F.FIRMWARE_VERSION,'','808','808B') TPROTOCOL_TYPE
		        FROM TB_PHOTO_SETTINGS_DETAIL T,
		             TB_PHOTO_SETTINGS        M,
		             TB_VEHICLE               V,
		             TB_SIM                   S,
		             TB_TERMINAL              E,
		             TR_SERVICEUNIT           R,
		             TB_DVR          D,
		             TH_TERMINAL_VERSION_RECORD F
		      
		       WHERE T.SETTING_ID = M.AUTO_ID
		         AND T.VID = V.VID
		         AND T.VID = R.VID
		         AND S.SID = R.SID
		         AND E.TID = R.TID
		         AND R.DVR_ID = D.DVR_ID(+)
		         AND ''||T.VID = F.VID(+)
		         AND ((FUN_DATE2UTC(TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || BEGIN_TIME,
		                       'YYYY-MM-DD hh24:mi:ss')) &lt; ? ) OR
		             (FUN_DATE2UTC(TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || END_TIME,
		                       'YYYY-MM-DD hh24:mi:ss')) &lt; ? ))
		         and  nvl(t.is_new,'0')!='1'
			</value>
			<type>string</type>
			<comments>查询当前时间后1(线程休眠时间内)分钟内需要下发的指令列表</comments>
			<check></check>
		</item>
		<item name="sql_queryCurrentJobSql">
			<value>
				SELECT T.VID,
	                 T.TIMING_INTERVAL,
	                 T.DISTANCE_INTERVAL,
	                 TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || t.BEGIN_TIME,
	                         'YYYY-MM-DD hh24:mi:ss') BEGIN_TIME,
	                 TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || t.END_TIME,
	                         'YYYY-MM-DD hh24:mi:ss') END_TIME,
	                 M.CREATE_BY,
	                 T.DETAIL_ID,
	                 V.VEHICLE_NO,
	                 S.COMMADDR,
	                 E.OEM_CODE,
			       	 TER_TYPE,
			       	 D.DVR_NO,
			       	 DECODE(F.FIRMWARE_VERSION,'','808','808B') TPROTOCOL_TYPE
	            FROM TB_PHOTO_SETTINGS_DETAIL T, TB_PHOTO_SETTINGS M,TB_VEHICLE V,TB_SIM S,TB_TERMINAL E,TR_SERVICEUNIT R,TB_DVR D,
		             TH_TERMINAL_VERSION_RECORD F
	          
	           WHERE T.SETTING_ID = M.AUTO_ID
	           	AND T.VID=V.VID
	           	AND T.VID=R.VID
	           	AND S.SID=R.SID
	           	AND E.TID=R.TID
	           	AND R.DVR_ID = D.DVR_ID(+)
	           	AND ''||T.VID = F.VID(+)
	             AND (TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || BEGIN_TIME,
	                         'YYYY-MM-DD hh24:mi:ss') = ?
	              OR TO_DATE(TO_CHAR(SYSDATE, 'YYYY-MM-DD') || END_TIME,
	                         'YYYY-MM-DD hh24:mi:ss') = ?)
			</value>
			<type>string</type>
			<comments>查询当前参数设置JOB列表</comments>
			<check></check>
		</item>
		<item name="sql_saveSendCommandSql">
			<value>
				insert into TH_VEHICLE_COMMAND (
					AUTO_ID,CREATE_TIME, OP_ID, VEHICLE_NO, CO_SUTC, CO_TYPE, 
					CO_FROM, CO_SEQ,CO_CHANNEL, CO_PARM, CO_COMMAND, 
					CO_STATUS, CR_RESULT, CR_TIME, CO_OEMCODE, CO_SENDTIMES,
					CO_TRYTIMES, CO_SUBTYPE, CREATE_BY,  VID, CO_TEXT)
					values (?,FUN_DATE2UTC(SYSDATE), 
						?,?,?,?,?, 
						?,?,?,?,?,
						?,?,?,?,?,
						?,?,?,?)
			</value>
			<type>string</type>
			<comments>保存指令发送历史记录</comments>
			<check></check>
		</item>
		<item name="sql_saveSendSettingLogSql">
			<value>
				MERGE INTO TH_PHOTO_SETTINGS_LOG T1
				USING (SELECT DETAIL_ID FROM TB_PHOTO_SETTINGS_DETAIL T WHERE T.VID=? AND T.DETAIL_ID=? AND ENABLE_FLAG='1') T2
				ON ( T1.PRI_ID=T2.DETAIL_ID)
				WHEN MATCHED THEN
				  UPDATE SET SETTING_DATE=FUN_DATE2UTC(SYSDATE),
				             SEND_STATUS=?,
				             COMMAND_SEQ=?,
				             STATUS_TYPE=?
				  where T1.PRI_ID = T2.DETAIL_ID
				WHEN NOT MATCHED THEN 
				  INSERT (AUTO_ID,VID,SEND_STATUS,COMMAND_SEQ,CREATE_BY,STATUS_TYPE,COMMAND_TYPE,SETTING_DATE,PRI_ID) 
				  VALUES (?,?,?,?,?,?,?,FUN_DATE2UTC(SYSDATE),T2.DETAIL_ID)
			</value>
			<type>string</type>
			<comments>保存或更新终端触发拍照最后结果</comments>
			<check></check>
		</item>
		<item name="sql_updatePhotoSettingNewFlagSql">
			<value>
				UPDATE TB_PHOTO_SETTINGS_DETAIL SET IS_NEW='1' WHERE DETAIL_ID=?
			</value>
			<type>string</type>
			<comments>保存或更新终端触发拍照最后结果</comments>
			<check></check>
		</item>
		<item name="sql_vehicleConfigOilMonitor">
			<value>
				SELECT V.VID, B.CODE_ID
				  FROM TB_VEHICLE V,
				       (SELECT P.PROG_ID, D.CODE_ID
				          FROM TB_VEHICLE_CONFIGUER_PROGRAMME P,
				               TB_VEHICLE_CONFIGUER_DETAIL    D
				         WHERE P.ENABLE_FLAG = '1'
				           AND (D.CODE_ID = '000100060002' OR D.CODE_ID = '000100060003')
				           AND P.PROG_ID = D.PROG_ID) B
				 WHERE V.ENABLE_FLAG =1 AND V.PROG_ID = B.PROG_ID
			</value>
			<type>string</type>
			<comments>查询油箱油量监控配置车辆列表</comments>
			<check></check>
		</item>
		<item name="sql_saveOilChanged">
			<value>INSERT INTO TH_OILMASS_CHANGE_DETAIL (CHANGE_ID,CHANGE_TYPE,VID,UTC,LAT,LON,MAPLON,MAPLAT,ELEVATION,DIRECTION,GPS_SPEED,SYSUTC,CURR_OILLEVEL,CURR_OILMAS,CHANGE_OILMASS) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)</value>
			<comments>存储油量监控变化</comments>
		</item>
		<item name="sql_delVehicleOpterationPropertySql">
			<value>DELETE FROM RE_VEHICLE_OPERATION_PROP WHERE STAT_DATE = ?</value>
			<comments>清空当日车辆运营属性</comments>
		</item>
		<item name="sql_saveOnnetVehicleOpterationPropertySql">
			<value>
				INSERT INTO RE_VEHICLE_OPERATION_PROP
				  (	TB_ID,
				   STAT_DATE,
				   VID,
				   ENT_ID,
				   IS_OPERATION,
				   IS_ONLINE,
				   IS_NEWADD,
				   IS_OFFNET,
				   IS_MAINTAINCE,
				   IS_OILMONITOR)
				  SELECT SYS_GUID(),
				         ? STAT_DATE,
				         V.VID,
				         V.ENT_ID,
				         DECODE(VEHICLE_STATE, '2', '1', '0') AS IS_OPERATION,
				         DECODE(VEHICLE_STATE || ONLINE_FLAG, '21', '1', '0') AS IS_ONLINE,
				         DECODE(NEWADD_FLAG, '1', '1', '0') AS IS_NEWADD,
				         '0' AS IS_OFFNET,
				         DECODE(PROG.CFG_FLAG, '1', '1', '0') IS_MAINTAINCE,
				         DECODE(OILMONITOR.CFG_FLAG, '1', '1', '0') IS_OILMONITOR
				    FROM TR_SERVICEUNIT A,
				         TB_VEHICLE V,
				         (SELECT VID, '1' NEWADD_FLAG
				            FROM TR_SERVICEUNIT
				           WHERE CREATE_TIME &gt;= ?
				             AND CREATE_TIME &lt;= ?) B,
				         (SELECT VID, '1' ONLINE_FLAG
				            FROM TR_VEHICLE_LASTTRACK
				           WHERE UTC &gt;= ?
				             AND UTC &lt;= ?) C,
				         (SELECT P.PROG_ID, '1' CFG_FLAG
				            FROM TB_VEHICLE_CONFIGUER_PROGRAMME P,
				                 TB_VEHICLE_CONFIGUER_DETAIL    D
				           WHERE P.PROG_ID = D.PROG_ID
				             AND P.ENABLE_FLAG = '1'
				             AND D.CODE_ID IN ('000100050003', '000100050004')) PROG,
				         (SELECT P.PROG_ID, '1' CFG_FLAG
				            FROM TB_VEHICLE_CONFIGUER_PROGRAMME P,
				                 TB_VEHICLE_CONFIGUER_DETAIL    D
				           WHERE P.PROG_ID = D.PROG_ID
				             AND P.ENABLE_FLAG = '1'
				             AND D.CODE_ID IN
				                 ('000100060002', '000100060003', '000100060004')) OILMONITOR
				   WHERE A.VID = V.VID
				     AND A.VID = B.VID(+)
				     AND A.VID = C.VID(+)
				     AND V.PROG_ID = PROG.PROG_ID(+)
				     AND V.PROG_ID = OILMONITOR.PROG_ID(+)
     		</value>
			<comments>添加在网车辆当日运营属性</comments>
		</item>
		<item name="sql_updateOnnetVehicleOpterationAddnewSql">
			<value>
				UPDATE RE_VEHICLE_OPERATION_PROP
				   SET IS_NEWADD = '1'
				 WHERE STAT_DATE = ?
				   AND VID IN (SELECT A.VID
				                 FROM (SELECT VID, ENT_ID
				                         FROM RE_VEHICLE_OPERATION_PROP
				                        WHERE STAT_DATE = ?) A,
				                      (SELECT VID, ENT_ID
				                         FROM RE_VEHICLE_OPERATION_PROP
				                        WHERE STAT_DATE = ?) B
				                WHERE A.VID = B.VID
				                  AND A.ENT_ID != B.ENT_ID)
     		</value>
			<comments>更新在网车辆当日运营本月新增属性 </comments>
		</item>
		<item name="sql_saveOffnetVehicleOpterationPropertySql">
			<value>
				INSERT INTO RE_VEHICLE_OPERATION_PROP
				  (TB_ID,
				   STAT_DATE,
				   VID,
				   ENT_ID,
				   IS_OPERATION,
				   IS_ONLINE,
				   IS_NEWADD,
				   IS_OFFNET,
				   IS_MAINTAINCE,
				   IS_OILMONITOR)
				  SELECT SYS_GUID(),?, VID, ENT_ID, '0', '0', '0', '1', '0', '0'
				    FROM (SELECT VID, ENT_ID
				            FROM RE_VEHICLE_OPERATION_PROP
				           WHERE STAT_DATE = ?
				          MINUS
				          SELECT VID, ENT_ID
				            FROM RE_VEHICLE_OPERATION_PROP
				           WHERE STAT_DATE = ?)
            </value>
			<comments>添加退网车辆当日运营属性</comments>
		</item>
		<item name="sql_delOrgOpterationDaystatSql">
			<value>
				DELETE FROM RE_ORG_VEHICLE_DAYSTAT WHERE STAT_DATE = ?
            </value>
			<comments>删除企业日车辆运营情况</comments>
		</item>
		<item name="sql_queryOrgOperationDaystatSql">
			<value>
				SELECT A.ENT_ID,
			       COUNT(1) TOTAL_VEHICLE,
			       SUM(IS_NEWADD) ADD_VEHICLE,
			       SUM(IS_MAINTAINCE) MECHANICAL_VEHICLE,
			       SUM(IS_OPERATION) OPERATION_NUM,
			       SUM(IS_ONLINE) ONLINE_NUM,
			       CASE
			         WHEN SUM(IS_OPERATION) > 0 THEN
			          ROUND(SUM(IS_ONLINE) / SUM(IS_OPERATION), 2)
			         ELSE
			          0
			       END AVERAGE_RATE_ONLINE,
			       ROUND(SUM(B.MILEAGE) * 0.1, 2) TOTAL_MILEAGE,
			       ROUND(SUM(CASE
			                   WHEN IS_MAINTAINCE = '1' THEN
			                    B.MILEAGE
			                 END) * 0.1,
			             2) MECHANICAL_VEHICLE_MILEAGE,
			       ROUND(SUM(CASE
			                   WHEN IS_MAINTAINCE = '1' THEN
			                    B.OIL_WEAR
			                 END) * 0.5,
			             2) MECHANICAL_VEHICLE_OIL,
			       SUM(C.DECREASEOIL_VOLUME) OIL_BOX_ANOMALOUS
			  FROM (SELECT VID,
			               ENT_ID,
			               IS_OPERATION,
			               IS_ONLINE,
			               IS_NEWADD,
			               IS_OFFNET,
			               IS_MAINTAINCE,
			               IS_OILMONITOR
			          FROM RE_VEHICLE_OPERATION_PROP
			         WHERE STAT_DATE = ?
			           AND IS_OFFNET = '0') A,
			       (SELECT VID, MILEAGE, OIL_WEAR
			          FROM TS_VEHICLE_DAYSTAT
			         WHERE STAT_DATE = ?) B,
			       (SELECT VID, DECREASEOIL_VOLUME
			          FROM TS_VEHICLE_OILMASS_DAYSTAT
			         WHERE STAT_DATE = ?) C
			 WHERE A.VID = B.VID(+)
			   AND A.VID = C.VID(+)
			 GROUP BY A.ENT_ID
            </value>
			<comments>统计企业日车辆运营情况</comments>
		</item>
		<item name="sql_saveOrgOpterationDaystatSql">
			<value>
				INSERT INTO RE_ORG_VEHICLE_DAYSTAT
					  (TB_ID,
					   ENT_ID,
					   STAT_DATE,
					   TOTAL_VEHICLE,
					   ADD_VEHICLE,
					   MECHANICAL_VEHICLE,
					   OPERATION_NUM,
					   ONLINE_NUM,
					   AVERAGE_RATE_ONLINE,
					   TOTAL_MILEAGE,
					   MECHANICAL_VEHICLE_MILEAGE,
					   MECHANICAL_VEHICLE_OIL,
					   OIL_BOX_ANOMALOUS)
					VALUES
					  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            </value>
			<comments>保存企业日车辆运营情况</comments>
		</item>
		<item name="sql_delOrgOpterationWeekstatSql">
			<value>
				DELETE FROM RE_ORG_VEHICLE_WEEKSTAT WHERE STAT_DATE = ?
            </value>
			<comments>删除企业周车辆运营情况</comments>
		</item>
		<item name="sql_queryOrgOperationWeekstatSql">
			<value>
				SELECT A.ENT_ID,
				       (SELECT COUNT(DISTINCT VID) FROM RE_VEHICLE_OPERATION_PROP WHERE ENT_ID=A.ENT_ID AND STAT_DATE &gt;= ? AND STAT_DATE &lt; ? AND IS_OFFNET='0') TOTAL_VEHICLE,
				       SUM(ADD_VEHICLE) ADD_VEHICLE,
				       (SELECT COUNT(DISTINCT VID) FROM RE_VEHICLE_OPERATION_PROP WHERE ENT_ID=A.ENT_ID AND STAT_DATE &gt;= ? AND STAT_DATE &lt; ? AND IS_MAINTAINCE='1') MECHANICAL_VEHICLE,
				       (SELECT COUNT(DISTINCT VID) FROM RE_VEHICLE_OPERATION_PROP WHERE ENT_ID=A.ENT_ID AND STAT_DATE &gt;= ? AND STAT_DATE &lt; ? AND IS_OPERATION='1') OPERATION_NUM,
				       (SELECT COUNT(DISTINCT VID) FROM RE_VEHICLE_OPERATION_PROP WHERE ENT_ID=A.ENT_ID AND STAT_DATE &gt;= ? AND STAT_DATE &lt; ? AND IS_ONLINE='1')  ONLINE_NUM,
				       AVG(AVERAGE_RATE_ONLINE) AVERAGE_RATE_ONLINE,
				       SUM(TOTAL_MILEAGE) TOTAL_MILEAGE,
				       SUM(MECHANICAL_VEHICLE_MILEAGE) MECHANICAL_VEHICLE_MILEAGE,
				       SUM(MECHANICAL_VEHICLE_OIL) MECHANICAL_VEHICLE_OIL,
				       SUM(OIL_BOX_ANOMALOUS) OIL_BOX_ANOMALOUS
				  FROM RE_ORG_VEHICLE_DAYSTAT A
				 WHERE STAT_DATE &gt;= ? AND STAT_DATE &lt; ?
				 group by A.ENT_ID
            </value>
			<comments>统计企业周车辆运营情况</comments>
		</item>
		<item name="sql_saveOrgOpterationWeekstatSql">
			<value>
				INSERT INTO RE_ORG_VEHICLE_WEEKSTAT
					  (TB_ID,
					   ENT_ID,
					   WEEK,
					   YEAR,
					   STAT_DATE,
					   TOTAL_VEHICLE,
					   ADD_VEHICLE,
					   MECHANICAL_VEHICLE,
					   OPERATION_NUM,
					   ONLINE_NUM,
					   AVERAGE_RATE_ONLINE,
					   TOTAL_MILEAGE,
					   MECHANICAL_VEHICLE_MILEAGE,
					   MECHANICAL_VEHICLE_OIL,
					   OIL_BOX_ANOMALOUS)
					VALUES
					  ( ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            </value>
			<comments>保存企业周车辆运营情况</comments>
		</item>
		<item name="sql_delOrgOpterationMonthstatSql">
			<value>
				DELETE FROM RE_ORG_VEHICLE_MONTHSTAT WHERE STAT_DATE = ?
            </value>
			<comments>删除企业月车辆运营情况</comments>
		</item>
		<item name="sql_queryOrgOperationMonthstatSql">
			<value>
				SELECT A.ENT_ID,
				       (SELECT COUNT(DISTINCT VID) FROM RE_VEHICLE_OPERATION_PROP WHERE ENT_ID=A.ENT_ID AND STAT_DATE &gt;= ? AND STAT_DATE &lt; ? AND IS_OFFNET='0') TOTAL_VEHICLE,
				       SUM(ADD_VEHICLE) ADD_VEHICLE,
				       (SELECT COUNT(DISTINCT VID) FROM RE_VEHICLE_OPERATION_PROP WHERE ENT_ID=A.ENT_ID AND STAT_DATE &gt;= ? AND STAT_DATE &lt; ? AND IS_MAINTAINCE='1') MECHANICAL_VEHICLE,
				       (SELECT COUNT(DISTINCT VID) FROM RE_VEHICLE_OPERATION_PROP WHERE ENT_ID=A.ENT_ID AND STAT_DATE &gt;= ? AND STAT_DATE &lt; ? AND IS_OPERATION='1') OPERATION_NUM,
				       (SELECT COUNT(DISTINCT VID) FROM RE_VEHICLE_OPERATION_PROP WHERE ENT_ID=A.ENT_ID AND STAT_DATE &gt;= ? AND STAT_DATE &lt; ? AND IS_ONLINE='1')  ONLINE_NUM,
				       AVG(AVERAGE_RATE_ONLINE) AVERAGE_RATE_ONLINE,
				       SUM(TOTAL_MILEAGE) TOTAL_MILEAGE,
				       SUM(MECHANICAL_VEHICLE_MILEAGE) MECHANICAL_VEHICLE_MILEAGE,
				       SUM(MECHANICAL_VEHICLE_OIL) MECHANICAL_VEHICLE_OIL,
				       SUM(OIL_BOX_ANOMALOUS) OIL_BOX_ANOMALOUS
				  FROM RE_ORG_VEHICLE_DAYSTAT A
				 WHERE STAT_DATE &gt;= ? AND STAT_DATE &lt; ?
				 group by A.ENT_ID
            </value>
			<comments>统计企业月车辆运营情况</comments>
		</item>
		<item name="sql_saveOrgOpterationMonthstatSql">
			<value>
				INSERT INTO RE_ORG_VEHICLE_MONTHSTAT
					  (TB_ID,
					   ENT_ID,
					   STAT_DATE,
					   TOTAL_VEHICLE,
					   ADD_VEHICLE,
					   MECHANICAL_VEHICLE,
					   OPERATION_NUM,
					   ONLINE_NUM,
					   AVERAGE_RATE_ONLINE,
					   TOTAL_MILEAGE,
					   MECHANICAL_VEHICLE_MILEAGE,
					   MECHANICAL_VEHICLE_OIL,
					   OIL_BOX_ANOMALOUS)
					VALUES
					  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            </value>
			<comments>保存企业月车辆运营情况</comments>
		</item>
		<item name="sql_delOrgAlarmDaystatSql">
			<value>
				DELETE FROM RE_ORG_ALARM_DAYSTAT WHERE STAT_DATE = ?
            </value>
			<comments>删除企业日车辆告警情况</comments>
		</item>
		<item name="sql_queryOrgAlarmStatSql">
			<value>
				SELECT A.ENT_ID,
			       A.ALARM_CODE,
			       C.PARENT_CODE,
			       ALL_ALARM_NUM,
			       CASE
		               WHEN ALL_ALARM_NUM &lt; nvl(DISPOSED_NUM,0) THEN
		                ALL_ALARM_NUM
		               ELSE
		                nvl(DISPOSED_NUM,0)
		             END DISPOSED_ALARM_NUM,
		             CASE
		               WHEN ALL_ALARM_NUM &lt; nvl(DISPOSED_NUM,0) THEN
		                0
		               ELSE
		                ALL_ALARM_NUM - nvl(DISPOSED_NUM,0)
		             END UNDISPOSED_ALARM_NUM 
			  FROM (SELECT TEAM_ID ENT_ID, ALARM_CODE, SUM(ALARM_NUM) ALL_ALARM_NUM
			          FROM TS_ALARM_DAYSTAT
			         WHERE STAT_DATE &gt;= ?
			           AND STAT_DATE &lt; ?
			         GROUP BY TEAM_ID, ALARM_CODE) A,
			       (SELECT V.ENT_ID, ALARM_CODE, SUM(ALARM_STATUS) DISPOSED_NUM
			          FROM TH_VEHICLE_ALARM ARM, TB_VEHICLE V
			         WHERE ARM.VID = V.VID
			           AND UTC &gt;= ?
			           AND UTC &lt; ?
			         GROUP BY V.ENT_ID, ALARM_CODE) B,
			       (SELECT B.ENT_ID,
					       A.SYS_ALARM_TYPE_ID ALARM_CODE,
					       D.PARENT_CODE PARENT_CODE
					  FROM TB_ALARM_ENT_INFO A,
					       TB_ALARM_ENT_CONF B,
					       SYS_ALARM_LEVEL   C,
					       SYS_ALARM_TYPE    D
					 WHERE A.TB_ALARM_ENT_CONF_ID = B.PID
					   AND A.SYS_ALARM_TYPE_ID = D.ALARM_CODE
					   AND B.SYS_ALARM_LEVEL_ID = C.LEVEL_ID
					   AND D.ENABLE_FLAG=1
					   AND B.SYS_ALARM_LEVEL_ID IN (1, 2)
					UNION
					SELECT E.ENT_ID,
					       T.ALARM_CODE ALARM_CODE,
					       T.PARENT_CODE PARENT_CODE
					  FROM SYS_ALARM_TYPE T, TB_ORGANIZATION E
					 WHERE T.ALARM_DEFAULT_LEVEL IN (1, 2) 
					 AND  T.ENABLE_FLAG =1
					   AND E.ENABLE_FLAG=1
					   AND  NOT EXISTS (SELECT 1 FROM TB_ALARM_ENT_CONF WHERE ENT_ID=E.ENT_ID )) C
			 WHERE A.ENT_ID = B.ENT_ID(+)
			   AND A.ALARM_CODE = B.ALARM_CODE(+)
			   AND  A.ENT_ID = C.ENT_ID
			   AND A.ALARM_CODE = C.ALARM_CODE
            </value>
			<comments>统计企业车辆告警情况</comments>
		</item>
		<item name="sql_saveOrgAlarmDaystatSql">
			<value>
				INSERT INTO RE_ORG_ALARM_DAYSTAT
					  (TB_ID,
					   ENT_ID,
					   STAT_DATE,
					   ALARM_CODE,
					   BGLEVEL,
					   ALARM_NUM,
					   ALARM_TREATED_NUM,
					   ALARM_UNTREATED_NUM
					   )
					VALUES
					  (?, ?, ?, ?, ?, ?, ?, ?)
            </value>
			<comments>保存企业日车辆告警情况</comments>
		</item>
		<item name="sql_delOrgAlarmMonthstatSql">
			<value>
				DELETE FROM RE_ORG_ALARM_MONTHSTAT WHERE STAT_DATE = ?
            </value>
			<comments>删除企业月车辆告警情况</comments>
		</item>
		<item name="sql_saveOrgAlarmMonthstatSql">
			<value>
				INSERT INTO RE_ORG_ALARM_MONTHSTAT
					  (TB_ID,
					   ENT_ID,
					   STAT_DATE,
					   ALARM_CODE,
					   BGLEVEL,
					   ALARM_NUM,
					   ALARM_TREATED_NUM,
					   ALARM_UNTREATED_NUM
					   )
					VALUES
					  (?, ?, ?, ?, ?, ?, ?, ?)
            </value>
			<comments>保存企业月车辆告警情况</comments>
		</item>
		<item name="sql_queryCurrentJobSql">
			<value>
				SELECT JOB_NAME, JOB_DESC, JOB_DEPEND, RESULT_STATUS, TRIGGER_TIME,FINISH_TIME,USE_TIME
				  FROM JOB_RUNNING_MONITOR
				 WHERE JOB_NAME = ?
            </value>
			<comments>查询当前作业状态信息</comments>
		</item>
		<item name="sql_queryJobDependSql">
			<value>
				SELECT JOB_NAME, JOB_DESC, JOB_DEPEND, RESULT_STATUS, TRIGGER_TIME,FINISH_TIME
				  FROM JOB_RUNNING_MONITOR
				 WHERE JOB_NAME IN
				       (SELECT REGEXP_SUBSTR(JOB_DEPEND, '[^,]+', 1, ROWNUM) job_name
				          FROM 
				          (SELECT * FROM JOB_RUNNING_MONITOR
				         WHERE JOB_NAME = ? AND JOB_DEPEND IS NOT NULL AND LENGTH(JOB_DEPEND)>0)
				        CONNECT BY ROWNUM &lt;=
				                   LENGTH(JOB_DEPEND) - LENGTH(REPLACE(JOB_DEPEND, ',', '')) + 1)
            </value>
			<comments>查询依赖作业状态信息</comments>
		</item>
		<item name="sql_updateJobRunningMonitorSql">
			<value>
				UPDATE JOB_RUNNING_MONITOR SET RESULT_STATUS = ? , TRIGGER_TIME = ? ,FINISH_TIME = ?,USE_TIME = ?
				WHERE JOB_NAME = ?
            </value>
			<comments>更新作业状态信息</comments>
		</item>
		<item name="sql_delvehicleoilwearanalysedaystatSql">
			<value>
				DELETE FROM RE_VEHICLE_OILAN_DAYSTAT
				 WHERE STAT_DATE &gt;= ?
				   AND STAT_DATE &lt; ?
            </value>
			<comments>删除管理报表单车油耗分析日统计数据</comments>
		</item>
		<item name="sql_addvehicleoilwearanalysedaystatSql">
			<value>
				INSERT INTO RE_VEHICLE_OILAN_DAYSTAT
				  (STAT_DATE,
				   VID,
				   VEHICLE_NO,
				   CORP_ID,
				   CORP_NAME,
				   TEAM_ID,
				   TEAM_NAME,
				   ENGINE_ROTATE_TIME,
				   MILEAGE,
				   OIL_WEAR,
				   OVERSPEED_TIME,
				   OVERRPM_TIME,
				   GEAR_GLIDE_TIME,
				   URGENT_SPEED_TIME,
				   URGENT_LOWDOWN_TIME,
				   LONG_IDLE_TIME,
				   AIR_CONDITION_TIME,
				   ECONOMIC_RUN_TIME)
				  SELECT STAT_DATE,
				         VID,
				         VEHICLE_NO,
				         CORP_ID,
				         CORP_NAME,
				         TEAM_ID,
				         TEAM_NAME,
				         ENGINE_ROTATE_TIME,
				         MILEAGE,
				         OIL_WEAR,
				         OVERSPEED_TIME,
				         OVERRPM_TIME,
				         GEAR_GLIDE_TIME,
				         URGENT_SPEED_TIME,
				         URGENT_LOWDOWN_TIME,
				         LONG_IDLE_TIME,
				         AIR_CONDITION_TIME,
				         ECONOMIC_RUN_TIME
				    FROM TS_VEHICLE_DAYSTAT
				 WHERE STAT_DATE &gt;= ?
				   AND STAT_DATE &lt; ?
            </value>
			<comments>添加管理报表单车油耗分析日统计数据</comments>
		</item>
		<item name="sql_delvehicleoilwearanalyseweekstatSql">
			<value>
				DELETE FROM RE_VEHICLE_OILAN_WEEKSTAT
				 WHERE STAT_YEAR = ?
				   AND STAT_WEEK = ?
            </value>
			<comments>删除管理报表单车油耗分析周统计数据</comments>
		</item>
		<item name="sql_addvehicleoilwearanalyseweekstatSql">
			<value>
				INSERT INTO RE_VEHICLE_OILAN_WEEKSTAT
					  (TB_ID,
					   STAT_YEAR,
					   STAT_WEEK,
					   STAT_DATE,
					   VID,
					   VEHICLE_NO,
					   CORP_ID,
					   CORP_NAME,
					   TEAM_ID,
					   TEAM_NAME,
					   MILEAGE,
					   OIL_TOTAL,
					   OVERSPEED_TIME,
					   OVERRPM_TIME,
					   URGENT_SPEED_TIME,
					   URGENT_LOWDOWN_TIME,
					   LONG_IDLE_TIME,
					   AIR_CONDITION_TIME,
					   ENGINE_ROTATE_TIME,
					   GEAR_GLIDE_TIME,
					   ECONOMIC_RUN_TIME)
					  SELECT SYS_GUID() AS TB_ID,
		                   ? STAT_YEAR,
		                   ? STAT_WEEK,
		                   ? STAT_DATE,
		                   VID,
		                   VEHICLE_NO,
		                   CORP_ID,
		                   CORP_NAME,
		                   TEAM_ID,
		                   TEAM_NAME,
		                   SUM(MILEAGE),
		                   SUM(OIL_WEAR) OIL_TOTAL,
		                   SUM(OVERSPEED_TIME),
		                   SUM(OVERRPM_TIME),
		                   SUM(URGENT_SPEED_TIME),
		                   SUM(URGENT_LOWDOWN_TIME),
		                   SUM(LONG_IDLE_TIME),
		                   SUM(AIR_CONDITION_TIME),
		                   SUM(ENGINE_ROTATE_TIME),
		                   SUM(GEAR_GLIDE_TIME),
		                   SUM(ECONOMIC_RUN_TIME)
		              FROM RE_VEHICLE_OILAN_DAYSTAT
		             WHERE STAT_DATE &gt;= ?
		                AND STAT_DATE &lt; ?
		                GROUP BY VID,VEHICLE_NO,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME
            </value>
			<comments>添加管理报表单车油耗分析周统计数据</comments>
		</item>
		<item name="sql_delvehicleoilwearanalysemonthstatSql">
			<value>
				DELETE FROM RE_VEHICLE_OILAN_MONTHSTAT
				 WHERE STAT_DATE &gt;= ?
				   AND STAT_DATE &lt; ?
            </value>
			<comments>删除管理报表单车油耗分析月统计数据</comments>
		</item>
		<item name="sql_addvehicleoilwearanalysemonthstatSql">
			<value>
				INSERT INTO RE_VEHICLE_OILAN_MONTHSTAT
					  (TB_ID,
					   STAT_DATE,
					   VID,
					   VEHICLE_NO,
					   CORP_ID,
					   CORP_NAME,
					   TEAM_ID,
					   TEAM_NAME,
					   MILEAGE,
					   OIL_TOTAL,
					   OVERSPEED_TIME,
					   OVERRPM_TIME,
					   URGENT_SPEED_TIME,
					   URGENT_LOWDOWN_TIME,
					   LONG_IDLE_TIME,
					   AIR_CONDITION_TIME,
					   ENGINE_ROTATE_TIME,
					   GEAR_GLIDE_TIME,
					   ECONOMIC_RUN_TIME)
					  SELECT SYS_GUID() AS TB_ID,
					         ? STAT_DATE,
					         VID,
					         VEHICLE_NO,
					         CORP_ID,
					         CORP_NAME,
					         TEAM_ID,
					         TEAM_NAME,
					         SUM(MILEAGE),
					         SUM(OIL_WEAR) OIL_TOTAL,
					         SUM(OVERSPEED_TIME),
					         SUM(OVERRPM_TIME),
					         SUM(URGENT_SPEED_TIME),
					         SUM(URGENT_LOWDOWN_TIME),
					         SUM(LONG_IDLE_TIME),
					         SUM(AIR_CONDITION_TIME),
					         SUM(ENGINE_ROTATE_TIME),
					         SUM(GEAR_GLIDE_TIME),
					         SUM(ECONOMIC_RUN_TIME)
					    FROM RE_VEHICLE_OILAN_DAYSTAT
					   WHERE STAT_DATE &gt;= ? 
					     AND STAT_DATE &lt; ? 
					   GROUP BY VID, VEHICLE_NO, CORP_ID, CORP_NAME, TEAM_ID, TEAM_NAME
            </value>
			<comments>添加管理报表单车油耗分析月统计数据</comments>
		</item>
		<item name="sql_saveGpsInspection">
			<value>INSERT INTO TS_GPS_CHECK (AUTO_ID,VID,RECEIVE_TIME,SPEED,ACC_STATUS,LAT,LON,MAPLON,MAPLAT,LOCATION_DESC) VALUES(?,?,?,?,?,?,?,?,?,?)</value>
			<comments>存储gps巡检信息</comments>
		</item>
		<item name="sql_saveVehicleAlarm">
			<value>
				insert into th_vehicle_alarm (
				ALARM_ID,VID,VEHICLE_NO,TEAM_ID,TEAM_NAME,
				CORP_ID,CORP_NAME,ALARM_CODE,ALARM_SRC,BGLEVEL,
				UTC,LAT,LON,MAPLAT,MAPLON,
				ELEVATION,DIRECTION,GPS_SPEED,MILEAGE,OIL_TOTAL,
				ALARM_START_UTC,ALARM_END_UTC,END_LAT,END_LON,END_MAPLON,
				END_MAPLAT,END_ELEVATION,END_DIRECTION,END_GPS_SPEED,END_MILEAGE,
				END_OIL_TOTAL,ALARM_ADD_INFO,SPEED_THRESHOLD,MAX_SPEED,AVG_SPEED,
				SYSUTC,ALARM_DRIVER,ALARM_STATUS,ALARM_TODO
				) values (
				?,?,?,?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,?,?,?,
				?,?,?,?,?,?,?,0,0
				)
				 </value>
			<comments>存储报警信息</comments>
		</item>
		<item name="sql_updateVehicleAlarm">
			<value>UPDATE TH_VEHICLE_ALARM SET ALARM_END_UTC =
				?,END_LAT=?,END_LON=?,END_MAPLAT=?,END_MAPLON=?,END_ELEVATION=?,END_DIRECTION=?,END_GPS_SPEED=?,END_MILEAGE=?,END_OIL_TOTAL=?,
				ALARM_STATUS=0,ALARM_ADD_INFO_END =? WHERE ALARM_ID = ?</value>
			<comments>更新报警信息</comments>
		</item>
		<item name="sql_queryIllegealOperationsAlarm">
			<value>
				SELECT VID, V.ENT_ID, START_TIME, END_TIME, DEFERRED, ISDEFAULT
				  FROM TB_VEHICLE V
				  JOIN (SELECT A.ENT_ID,
				               B.TB_ID,
				               START_TIME,
				               END_TIME,
				               DEFERRED,
				               B.ISDEFAULT
				          FROM (SELECT CONNECT_BY_ROOT ORG.ENT_ID CFG_ENT_ID, ORG.ENT_ID
				                  FROM TB_ORGANIZATION ORG
				                  LEFT JOIN (SELECT DISTINCT ENT_ID
				                              FROM TB_ALARM_TACTICS_SET
				                             WHERE ENABLE_FLAG = '1'
				                               AND ALARM_TYPE = '3') TIO
				                    ON ORG.ENT_ID = TIO.ENT_ID
				                 START WITH ORG.ENT_ID = TIO.ENT_ID
				                CONNECT BY PRIOR ORG.ENT_ID = ORG.PARENT_ID
				                       AND NOT EXISTS
				                 (SELECT 1
				                              FROM TB_ALARM_TACTICS_SET
				                             WHERE ENT_ID = ORG.ENT_ID
				                               AND ALARM_TYPE = '3')) A,
				               TB_ALARM_TACTICS_SET B
				         WHERE A.CFG_ENT_ID = B.ENT_ID
				           AND ALARM_TYPE = '3') CFG
				    ON V.ENT_ID = CFG.ENT_ID
				  WHERE V.VID = ?
				</value>
			<comments>查询所有绑定违规运营报警的车辆信息 </comments>
		</item>
	<item name="sql_procOilConsumeMonthStat">
		<value>
				{call PROC_OILCONSUME_MONTHSTAT(?,?)}
		</value>
		<type>string</type>
		<comments>统计月燃油消耗存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procOilConsumeYearStat">
		<value>
				{call PROC_OILCONSUME_YEARSTAT(?,?)}
		</value>
		<type>string</type>
		<comments>统计年燃油消耗存储过程</comments>
		<check></check>
	</item>
	<item name="sql_delVehicleOverspeedRateDaystat">
		<value>
			BEGIN
				DELETE FROM RE_VEHICLE_OVERSPEED_DAYRATE 
				WHERE STAT_DATE &gt;= ? AND STAT_DATE &lt; ?;
				DELETE FROM RE_VEHICLE_OVERSPEED_DAYSTAT 
				WHERE STAT_DATE &gt;= ? AND STAT_DATE &lt; ?;
			END;
		</value>
		<comments>删除车辆超速比率日统计结果</comments>
	</item>
	<item name="sql_vehicleOverspeedRateDaystat">
		<value>
			INSERT INTO RE_VEHICLE_OVERSPEED_DAYRATE (STAT_DATE,VID,OVERSPEED_TIME,OVERSPEED_RATE) 
			SELECT BEGIN_UTC STAT_DATE,
			       VID,
			       CASE
			         WHEN OVERSPEED_TIME &lt; 0 THEN
			          0
			         ELSE
			          OVERSPEED_TIME
			       END OVERSPEED_TIME,
			       CASE
			         WHEN SPEED_THRESHOLD IS NULL OR  SPEED_THRESHOLD = 0 THEN 
			           0
			           ELSE
			       ((BEGIN_GPS_SPEED - SPEED_THRESHOLD) / SPEED_THRESHOLD) * 100 
			       END OVERSPEED_RATE
			  FROM (SELECT A.VID,
			  			   A.BEGIN_UTC,
			               A.END_UTC - A.BEGIN_UTC OVERSPEED_TIME,
			               A.BEGIN_GPS_SPEED,
			               CASE
			                 WHEN A.SPEED_THRESHOLD IS NULL THEN
			                  DECODE(B.SPEED_THRESHOLD, NULL, 1000, B.SPEED_THRESHOLD)
			                 ELSE
			                  A.SPEED_THRESHOLD
			               END SPEED_THRESHOLD
			          FROM (SELECT * FROM TH_VEHICLE_ALARM_EVENT WHERE ALARM_CODE = '1'
			          AND BEGIN_UTC &gt;= ? AND BEGIN_UTC &lt; ?
			          ) A,
			               (SELECT VID, PARAM_VALUE * 10 SPEED_THRESHOLD
			                  FROM TR_SERVICEUNIT C, TB_TERMINAL_PARAM D
			                 WHERE C.TID = D.TID
			                   AND D.PARAM_ID = '128') B
			         WHERE A.VID = B.VID(+))
		</value>
		<comments>统计车辆超速比率</comments>
	</item>
	<item name="sql_vehicleOverspeedDaystat">
		<value>
			INSERT INTO RE_VEHICLE_OVERSPEED_DAYSTAT 
			(TB_ID,CORP_ID,CORP_NAME,TEAM_ID,TEAM_NAME,
			VID,VEHICLE_NO,STAT_DATE,TOTAL_NUM,
			OVER_0_20_0_5,OVER_0_20_5_10,OVER_0_20_10,OVER_0_20_ALL,
			OVER_20_50_0_5,OVER_20_50_5_10,OVER_20_50_10,OVER_20_50_ALL,
			OVER_50_0_5,OVER_50_5_10,OVER_50_10,OVER_50_ALL) 
			SELECT 
			SYS_GUID() TB_ID,
			B.PENT_ID CORP_ID,
			B.PENT_NAME CORP_NAME,
			B.ENT_ID TEAM_ID,
			B.ENT_NAME TEAM_NAME,
			A.VID,
			B.VEHICLE_NO VEHICLE_NO,
			? STAT_DATE,
			(OVER_0_20_0_5+OVER_0_20_5_10+OVER_0_20_10+OVER_20_50_0_5+OVER_20_50_5_10+OVER_20_50_10+OVER_50_0_5+OVER_50_5_10+OVER_50_10) TOTAL_NUM,
			OVER_0_20_0_5,
			OVER_0_20_5_10,
			OVER_0_20_10,
			(OVER_0_20_0_5+OVER_0_20_5_10+OVER_0_20_10) OVER_0_20_ALL,
			OVER_20_50_0_5,
			OVER_20_50_5_10,
			OVER_20_50_10,
			(OVER_20_50_0_5+OVER_20_50_5_10+OVER_20_50_10) OVER_20_50_ALL,
			OVER_50_0_5,
			OVER_50_5_10,
			OVER_50_10,
			(OVER_50_0_5+OVER_50_5_10+OVER_50_10) OVER_50_ALL
			FROM 
			(SELECT VID,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_0_20_0_5', OVERSPEED_NUM)),0) OVER_0_20_0_5,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_0_20_5_10', OVERSPEED_NUM)),0) OVER_0_20_5_10,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_0_20_10', OVERSPEED_NUM)),0) OVER_0_20_10,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_20_50_0_5', OVERSPEED_NUM)),0) OVER_20_50_0_5,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_20_50_5_10', OVERSPEED_NUM)),0) OVER_20_50_5_10,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_20_50_10', OVERSPEED_NUM)),0) OVER_20_50_10,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_50_0_5', OVERSPEED_NUM)),0) OVER_50_0_5,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_50_5_10', OVERSPEED_NUM)),0) OVER_50_5_10,
			       NVL(SUM(DECODE(OVER_AREA, 'OVER_50_10', OVERSPEED_NUM)),0) OVER_50_10
			  FROM (SELECT VID,
			               OVERSPEED_AREA || OVERSPEEDTIME_AREA OVER_AREA,
			               COUNT(1) OVERSPEED_NUM
			          FROM (SELECT VID,
			                       OVERSPEED_TIME,
			                       CASE
			                         WHEN OVERSPEED_TIME &lt; 5 * 60 * 60 * 1000 THEN
			                          '0_5'
			                         WHEN OVERSPEED_TIME &gt;= 5 * 60 * 60 * 1000 AND
			                              OVERSPEED_TIME &lt; 10 * 60 * 60 * 1000 THEN
			                          '5_10'
			                         WHEN OVERSPEED_TIME &gt;= 10 * 60 * 60 * 1000 THEN
			                          '10'
			                       END OVERSPEEDTIME_AREA,
			                       CASE
			                         WHEN OVERSPEED_RATE &lt; 20 THEN
			                          'OVER_0_20_'
			                         WHEN OVERSPEED_RATE &gt;= 20 AND OVERSPEED_RATE &lt; 50 THEN
			                          'OVER_20_50_'
			                         WHEN OVERSPEED_RATE &gt;= 50 THEN
			                          'OVER_50_'
			                       END OVERSPEED_AREA
			                  FROM RE_VEHICLE_OVERSPEED_DAYRATE 
			                  WHERE STAT_DATE &gt;= ? AND STAT_DATE &lt; ?
			                  )
			         GROUP BY VID, OVERSPEED_AREA, OVERSPEEDTIME_AREA)
			 GROUP BY VID) A,KCPT.VIEW_VEHICLE_INFO B
			 WHERE A.VID = B.VID
		</value>
		<comments>统计车辆日超速情况</comments>
	</item>
	<item name="sql_procAnalyserVisitlogHoursStat">
		<value>
				{call PKG_VISITLOG_ANALYSE.PROC_ANALYSER_VISITLOG_HOURS(?,?)}
		</value>
		<type>string</type>
		<comments>访问日志分析-访问记录按小时分析存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procAnalyserVisitlogDaysStat">
		<value>
				{call PKG_VISITLOG_ANALYSE.PROC_ANALYSER_VISITLOG_DAYS(?,?)}
		</value>
		<type>string</type>
		<comments>访问日志分析-访问记录按日分析存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procBackBasedataDaysStat">
		<value>
				{call PKG_VISITLOG_ANALYSE.PROC_BACK_BASEDATA_DAYS(?,?)}
		</value>
		<type>string</type>
		<comments>访问日志分析-基础数据按日备份存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procStatBasedataDaysStat">
		<value>
				{call PKG_VISITLOG_ANALYSE.PROC_STAT_BASEDATA_DAYS(?,?)}
		</value>
		<type>string</type>
		<comments>访问日志分析-基础数据按日统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procStatVisitlogDaysStat">
		<value>
				{call PKG_VISITLOG_ANALYSE.PROC_STAT_VISITLOG_DAYS(?,?)}
		</value>
		<type>string</type>
		<comments>访问日志分析-基础数据按日统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_vehicleSpeedAnomalous">
		<value>
			INSERT INTO TH_VEHICLE_SPEED_ANOMALOUS(STAT_DATE,VID,ENT_ID,VEHICLE_NO,VSS_SPEED_AVG,GPS_SPEED_AVG,SPEED_DIFFERENCE,SPEED_FROM) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
		</value>
		<comments>统计车辆日速度异常情况</comments>
	</item>
	<item name="sql_procStatAlarmDays">
		<value>
				{call PKG_ALARM_ANALYSE.PROC_STAT_ALARM_DAYS(?,?)}
		</value>
		<type>string</type>
		<comments>告警分析-企业告警按级别分析日统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procStatAlarmWeeks">
		<value>
				{call PKG_ALARM_ANALYSE.PROC_STAT_ALARM_WEEKS(?,?,?,?)}
		</value>
		<type>string</type>
		<comments>告警分析-企业告警按级别分析周统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procStatAlarmMonths">
		<value>
				{call PKG_ALARM_ANALYSE.PROC_STAT_ALARM_MONTHS(?,?,?)}
		</value>
		<type>string</type>
		<comments>告警分析-企业告警按级别分析月统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_queryStatAlarmDaysStat">
		<value>
			SELECT STAT_DATE,ENT_ID,SERIOUSCOUNT,URGENTCOUNT,GENERALCOUNT,SUGGESTIONCOUNT FROM TS_ENT_ALARM_LVL_DAYSTAT WHERE STAT_DATE &gt;= ? AND STAT_DATE &lt; ?
		</value>
		<comments>查询最近7日企业告警统计结果</comments>
	</item>
	<item name="sql_queryStatAlarmWeeksStat">
		<value>
			SELECT STAT_DATE,STAT_YEAR,STAT_WEEK,ENT_ID,SERIOUSCOUNT,URGENTCOUNT,GENERALCOUNT,SUGGESTIONCOUNT FROM TS_ENT_ALARM_LVL_WEEKSTAT WHERE STAT_DATE &gt;= ? AND STAT_DATE &lt; ?
		</value>
		<comments>查询最近7周企业告警统计结果</comments>
	</item>
	<item name="sql_queryStatAlarmMonthsStat">
		<value>
			SELECT STAT_DATE,STAT_YEAR,STAT_MONTH,ENT_ID,SERIOUSCOUNT,URGENTCOUNT,GENERALCOUNT,SUGGESTIONCOUNT FROM TS_ENT_ALARM_LVL_MONTHSTAT WHERE STAT_DATE &gt;= ? AND STAT_DATE &lt; ?
		</value>
		<comments>查询最近7月企业告警统计结果</comments>
	</item>
	<item name="sql_procStatStateDays">
		<value>
				{call PKG_STATE_ANALYSE.PROC_STAT_STATE_DAYS(?,?)}
		</value>
		<type>string</type>
		<comments>状态分析-车辆状态日统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procStatServiceDays">
		<value>
				{call PKG_SERVICE_ANALYSE.PROC_STAT_SERVICE_DAYS(?,?)}
		</value>
		<type>string</type>
		<comments>运营分析-车辆运营日统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_delTransportDays">
		<value>
			BEGIN
				DELETE FROM TS_TRANSPORT_DETAIL WHERE TRAN_DATE &gt;= ? and TRAN_DATE &lt; ? ;
				DELETE FROM TS_TRANSPORT_DAYSTAT WHERE TRAN_DATE &gt;= ? and TRAN_DATE &lt; ? ;
			END;
		</value>
		<type>string</type>
		<comments>运营分析-车辆运营日统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_statTransportDetail">
		<value>
			INSERT INTO TS_TRANSPORT_DETAIL
			  (DEID,
			   TRAN_DATE,
			   VID,
			   LINE_ID,
			   STATION_NUM,
			   STATION_ID,
			   STATION_IDX,
			   STATION_NAME,
			   IN_TIME,
			   OUT_TIME,
			   MILEAGE,
			   ITINERARY_SEQ)
			  SELECT SYS_GUID() DEID,
		       FUN_DATE2UTC(TRAN_DATE) TRAN_DATE,
		       VID,
		       LINE_ID,
		       STATION_NUM,
		       STATION_ID,
		       STATION_NUMBER AS STATION_IDX,
		       STATION_NAME,
		       IN_TIME,
		       OUT_TIME,
		       MILEAGE,
		       M_SEQ ITINERARY_SEQ
		  FROM (SELECT TRAN_DATE,
		               VID,
		               LINE_ID,
		               STATION_NUM,
		               STATION_ID,
		               STATION_NUMBER,
		               STATION_NAME,
		               INTOSTATION_TIME,
		               OUTSTATION_TIME,
		               M_SEQ,
		               CASE
		                 WHEN STATION_NUMBER = 1 THEN
		                  OUTSTATION_MILEAGE
		                 ELSE
		                  INTOSTATION_MILEAGE
		               END MILEAGE,
		               CASE
		                 WHEN STATION_NUMBER != 1 THEN
		                  INTOSTATION_TIME
		               END IN_TIME,
		               CASE
		                 WHEN STATION_NUM != STATION_NUMBER THEN
		                  OUTSTATION_TIME
		               END OUT_TIME
		          FROM (SELECT VID,
		                       LINE_ID,
		                       STATION_NUM,
		                       STATION_ID,
		                       STATION_NUMBER,
		                       STATION_NAME,
		                       m_seq,
		                       MAX(TRUNC(FUN_UTC2DATE(OVER_UTC))) TRAN_DATE,
		                       MAX(DECODE(OVER_TYPE, '0', OVER_UTC)) INTOSTATION_TIME,
		                       MAX(DECODE(OVER_TYPE, '1', OVER_UTC)) OUTSTATION_TIME,
		                       MAX(DECODE(OVER_TYPE, '0', MILEAGE)) INTOSTATION_MILEAGE,
		                       MAX(DECODE(OVER_TYPE, '1', MILEAGE)) OUTSTATION_MILEAGE
		                  FROM TH_VEHICLE_OVER_STATION
		                 where OVER_UTC &gt;= ?
		                   and OVER_UTC &lt; ?
		                   and m_seq is not null
		                 GROUP BY VID,
		                          LINE_ID,
		                          STATION_NUM,
		                          STATION_ID,
		                          STATION_NUMBER,
		                          STATION_NAME,
		                          M_SEQ))
		</value>
		<type>string</type>
		<comments>趟次明细统计</comments>
		<check></check>
	</item>
	<item name="sql_statTransportDays">
		<value>
			INSERT INTO TS_TRANSPORT_DAYSTAT
			  (TRID, TRAN_DATE, VID, LINE_ID, TRAN_NUM, RUN_TIME, MILEAGE)
			  SELECT SYS_GUID() TRID,
			       TRAN_DATE,
			       VID,
			       LINE_ID,
			       TRAN_NUM,
			       RUN_TIME,
			       MILEAGE
			  FROM (SELECT TRAN_DATE,
			               VID,
			               LINE_ID,
			               SUM(TRAN_NUM) TRAN_NUM,
			               SUM(RUN_TIME) RUN_TIME,
			               SUM(MILEAGE) MILEAGE
			          FROM (SELECT TRAN_DATE,
			                       VID,
			                       LINE_ID,
			                       MAX(STATION_NUM) ALL_SATION_NUM,
			                       COUNT(1) RUN_STATION_NUM,
			                       MIN(STATION_IDX) START_IDX,
                             	   MAX(STATION_IDX) END_IDX,
			                       COUNT(distinct ITINERARY_SEQ) TRAN_NUM,
			                       (MAX(CASE
			                              WHEN STATION_IDX = END_POINT THEN
			                               IN_TIME
			                            END) - MAX(CASE
			                                          WHEN STATION_IDX = START_POINT THEN
			                                           OUT_TIME
			                                        END)) / 1000 RUN_TIME,
			                       (MAX(CASE
			                              WHEN STATION_IDX = END_POINT THEN
			                               MILEAGE
			                            END) - MAX(CASE
			                                          WHEN STATION_IDX = START_POINT THEN
			                                           MILEAGE
			                                        END)) MILEAGE
			                  FROM (SELECT TRAN_DATE,
			                               VID,
			                               LINE_ID,
			                               STATION_NUM,
			                               STATION_ID,
			                               STATION_IDX,
			                               STATION_NAME,
			                               IN_TIME,
			                               OUT_TIME,
			                               MILEAGE,
			                               ITINERARY_SEQ,
			                               MIN(STATION_IDX) OVER(PARTITION BY LINE_ID) START_POINT,
			                               MAX(STATION_IDX) OVER(PARTITION BY LINE_ID) END_POINT
			                          FROM TS_TRANSPORT_DETAIL
			                         WHERE TRAN_DATE &gt;=?
			                           and TRAN_DATE &lt; ? )
			                 GROUP BY TRAN_DATE, VID, LINE_ID, ITINERARY_SEQ)
			         WHERE START_IDX = 1 AND END_IDX = ALL_SATION_NUM AND RUN_STATION_NUM / ALL_SATION_NUM &gt;= 0.7
			         GROUP BY TRAN_DATE, VID, LINE_ID)
		</value>
		<type>string</type>
		<comments>趟次日统计</comments>
		<check></check>
	</item>
	<item name="sql_tangciqufen">
		<value>
			{call proc_tang(?,?)}
		</value>
		<type>string</type>
		<comments>趟次日统计</comments>
		<check></check>
	</item>
	<item name="sql_queryStatAlarmDaysInfo">
		<value>
			SELECT 
		       A.VID,
		       A.CORP_ID,
		       A.CORP_NAME,
		       A.TEAM_ID,
		       A.TEAM_NAME,
		       B.VEHICLE_NO,
		       B.VIN_CODE,
		       C.PARENT_CODE ALARM_CLASS,
		       A.DRIVER_ID,
		       A.ALARM_CODE,
		       A.ALARM_NUM,
		       nvl(A.ALARM_TIME,0) ALARM_TIME,
		       A.MILEAGE,
		       A.OIL_WEAR
		        FROM (SELECT /*+ no_index(t1 IDX_ALARM_EVENT_AC8) */ VID,
		                     CORP_ID,
		                     CORP_NAME,
		                     TEAM_ID,
		                     TEAM_NAME,
		                     DRIVER_ID,
		                     ALARM_CODE,
		                     COUNT(1) ALARM_NUM,
		                     SUM(END_UTC - BEGIN_UTC) ALARM_TIME,
		                     SUM(MILEAGE) MILEAGE,
		                     SUM(OIL_WEAR) OIL_WEAR
		                FROM TH_VEHICLE_ALARM_EVENT t1
		               WHERE BEGIN_UTC &gt;= ?
		                 AND BEGIN_UTC &lt; ?
		               GROUP BY VID,
		                        CORP_ID,
		                        CORP_NAME,
		                        TEAM_ID,
		                        TEAM_NAME,
		                        DRIVER_ID,
		                        ALARM_CODE) A
		             JOIN TB_VEHICLE B ON A.VID = B.VID
		             JOIN SYS_ALARM_TYPE C ON A.ALARM_CODE = C.ALARM_CODE
		</value>
		<type>string</type>
		<comments>查询车辆告警日统计数据</comments>
		<check></check>
	</item>
	<item name="sql_queryVehicleAlarmInfo">
		<value>
			SELECT T.VID,
		       B.COMMADDR,
		       T.ALARM_CODE,
		       T.AREA_ID,
		       NULL,
		       NULL,
		       T.ALARM_START_UTC,
		       T.LAT,
		       T.LON,
		       T.MAPLAT,
		       T.MAPLON,
		       T.ELEVATION,
		       T.DIRECTION,
		       T.GPS_SPEED,
		       T.ALARM_END_UTC,
		       T.END_LAT,
		       T.END_LON,
		       T.END_MAPLAT,
		       T.END_MAPLON,
		       T.END_ELEVATION,
		       T.END_DIRECTION,
		       T.END_GPS_SPEED,
		       T.UTC,
		       NULL,
		       NULL,
		       B.INNER_CODE,
		       B.VEHICLE_NO,
		       (T.END_MILEAGE - T.MILEAGE) MILEAGE,
		       (T.OIL_TOTAL - T.END_OIL_TOTAL) OIL,
		       B.VIN_CODE,
		       NULL,
		       B.PENT_ID,
		       B.PENT_NAME,
		       B.ENT_ID,
		       B.ENT_NAME,
		       T.ALARM_SRC,
		       T.ALARM_ID,
	           T.DRIVER_ID,
	           T.DRIVER_NAME,
	           T.DRIVER_SRC
		  FROM TH_VEHICLE_ALARM T, VIEW_VEHICLE_INFO B
		 WHERE T.VID = B.VID
		   AND T.UTC &gt;= ?
		   AND T.UTC &lt;= ?
		   AND ALARM_CODE IN ('111')
		</value>
		<type>string</type>
		<comments>查询车辆告警信息</comments>
		<check></check>
	</item>
	<item name="sql_procStatMobileClientMonths">
		<value>
			{call PKG_SERVICE_ANALYSE.PROC_STAT_MOBILECLIENT_MONTHS(?,?,?)}
		</value>
		<type>string</type>
		<comments>手机客户端引用月数据统计</comments>
		<check></check>
	</item>
	<item name="sql_queryVehicleAreaSpeedthreshold">
		<value>
			SELECT TRB.VID, TR.AREA_ID AREAID, NVL(TR.AREA_MAXSPEED * 10,0) AREAMAXSPEED
			  FROM TR_VEHICLE_AREA TR
			  JOIN TR_BIND_AREA TRB
			    ON TRB.AREA_ID = TR.AREA_ID
			  JOIN TB_AREA A
			    ON A.AREA_ID = TR.AREA_ID
			  JOIN TR_AREA TRA
			    ON TRA.AREA_ID = TR.AREA_ID
			 WHERE TR.AREA_DECIDE = 2
			   AND TR.AREA_ENABLE = 1
			   AND TRB.SEND_STATUS = 0
			   AND TRB.AREA_STATUS != 3
			   AND A.AREA_STATUS = 1
			 ORDER BY TR.VID
		</value>
		<type>string</type>
		<comments>查询车辆区域超速阀值信息</comments>
		<check></check>
	</item>
	<item name="sql_queryVehicleLineSpeedthreshold">
		<value>
			SELECT TLV.VID,
		       TL.PID,
		       TL.LINE_ID         LINEID,
		       NVL(TL.SPEED_THRESHOLD,0) SPEEDTHRESHOLD
		  FROM TB_LINE_PROP TL
		  JOIN TR_LINE_VEHICLE TLV
		    ON TL.LINE_ID = TLV.CLASS_LINE_ID
		  JOIN TB_CLASS_LINE TCL
		    ON TLV.CLASS_LINE_ID = TCL.LINE_ID
		   AND FUN_DATE2UTC(SYSDATE) BETWEEN TLV.LINE_BEGINTIME AND
		       TLV.LINE_ENDTIME
		   AND TLV.LINE_STATUS IN (1, 2)
		   AND TCL.JUDGMENT = 2
		   AND TCL.ENABLE_FLAG = 1
		</value>
		<type>string</type>
		<comments>查询车辆线路超速阀值信息</comments>
		<check></check>
	</item>
	<item name="sql_procStatFactoryWeeks">
		<value>
				{call PKG_VISITLOG_ANALYSE.PROC_STAT_FACTORY_WEEKS(?,?,?,?)}
		</value>
		<type>string</type>
		<comments>访问日志分析-车厂系统指标周统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_procStatFactoryMonths">
		<value>
				{call PKG_VISITLOG_ANALYSE.PROC_STAT_FACTORY_MONTHS(?,?,?)}
		</value>
		<type>string</type>
		<comments>访问日志分析-车厂系统指标月统计存储过程</comments>
		<check></check>
	</item>
	<item name="sql_queryDriverClockinDetail">
		<value>
			SELECT STAFF_ID DEVICE_ID,
	               STAFF_NAME DRIVER_NAME,
	               ON_LINE_TIME,
	               CASE
	                 WHEN OFF_LINE_TIME > 0 THEN
	                  OFF_LINE_TIME
	                 ELSE
	                  LEAD(ON_LINE_TIME, 1, 0) OVER(ORDER BY ON_LINE_TIME)
	               END OFF_LINE_TIME,
	               '1' DRIVER_SRC
	          FROM TH_DRIVER_LOGIN_RECORD A
	          JOIN (SELECT STAFF_ID, STAFF_NAME, BUSSINESS_ID
	                 FROM TB_EMPLOYEE
	                WHERE STAFF_TYPE = '0'
	                  AND ENABLE_FLAG = '1') B
	            ON A.QUALIFICATION_NO = B.BUSSINESS_ID
	         WHERE A.VID = ?
	           AND ((A.SYSUTC &gt;= ? AND A.SYSUTC &lt; ?) 
	           		OR 
	           		(A.OFF_LINE_TIME &gt;= ? AND A.OFF_LINE_TIME &lt; ?))
	        UNION
	        SELECT C.STAFF_ID DEVICE_ID,
	               STAFF_NAME DRIVER_NAME,
	               0 ON_LINE_TIME,
	               0 OFF_LINE_TIME,
	               '0' DRIVER_SRC
	          FROM TR_VEHICLE_STAFF C
	          JOIN (SELECT STAFF_ID, STAFF_NAME, BUSSINESS_ID
	                  FROM TB_EMPLOYEE
	                 WHERE STAFF_TYPE = '0'
	                   AND ENABLE_FLAG = '1') D
	            ON C.STAFF_ID = D.STAFF_ID
	         WHERE VID = ?
	           AND ROWNUM = 1
		</value>
		<type>string</type>
		<comments>查询驾驶员打卡明细</comments>
		<check></check>
	</item>
	<item name="sql_saveDriverDetailInfo">
		<value>
			INSERT INTO TH_VEHICLE_DRIVER_DETAIL
			(
			  AUTO_ID,STAT_DATE,VID,VEHICLE_NO,CORP_ID,
			  CORP_NAME,TEAM_ID,TEAM_NAME,DRIVER_ID,DRIVER_NAME,
			  DRIVER_SRC,BEGIN_UTC,BEGIN_LON,BEGIN_LAT,BEGIN_MAPLON,
			  BEGIN_MAPLAT,BEGIN_ELEVATION,BEGIN_DIRECTION,BEGIN_SPEED,BEGIN_MILEAGE,
			  BEGIN_OILWEAR,END_UTC,END_LON,END_LAT,END_MAPLON,
			  END_MAPLAT,END_ELEVATION,END_DIRECTION,END_SPEED,END_MILEAGE,
			  END_OILWEAR,MILEAGE,OIL_WEAR,RUNNING_OIL,OIL_FLAG,
			  DRIVER_TIME,ENGINE_ROTATE_TIME,RUNNING_TIME,ECU_OIL_WEAR,ECU_RUNNING_OIL_WEAR,
			  ECU_IDLING_OIL_WEAR,MET_OIL_WEAR,MET_RUNNING_OIL_WEAR,MET_IDLING_OIL_WEAR,ACC_CLOSE_NUM,
			  ACC_CLOSE_TIME,DOOR_LOCK_NUM,DOOR_LOCK_TIME,OVERSPEED_ALARM,OVERSPEED_TIME,
			  FATIGUE_ALARM,FATIGUE_TIME,DRIVER_TIMEOUT_TIME,STOP_TIMOUT_NUM,STOP_TIMOUT_TIME,
			  INAREA_ALARM,OUTAREA_ALARM,IN_ROUTE_NUM,OUT_ROUTE_NUM,ROUTE_RUN_DIFF_NUM,
			  DEVIATE_ROUTE_ALARM,DEVIATE_ROUTE_TIME,ILLEGAL_FIRE_NUM,ILLEGAL_MOVE_NUM,CASH_ALARM_NUM,
			  CASH_ALARM_TIME,OVERRPM_ALARM,OVERRPM_TIME,GEAR_WRONG_NUM,GEAR_WRONG_TIME,
			  GEAR_GLIDE_NUM,GEAR_GLIDE_TIME,URGENT_SPEED_NUM,URGENT_SPEED_TIME,URGENT_LOWDOWN_NUM,
			  URGENT_LOWDOWN_TIME,LONG_IDLE_NUM,LONG_IDLE_TIME,IDLING_AIR_NUM,IDLING_AIR_TIME,
			  ECONOMIC_RUN_TIME,AREA_OVERSPEED_ALARM,AREA_OVERSPEED_TIME,HEAT_UP_NUM,HEAT_UP_TIME,
			  AREA_OPENDOOR_NUM,AREA_OPENDOOR_TIME,OVERLOAD_NUM,ILLEGAL_STOP_NUM,ILLEGAL_STOP_TIME,
			  DOOR1_OPEN_NUM,DOOR2_OPEN_NUM,DOOR3_OPEN_NUM,DOOR4_OPEN_NUM,GEAR_IMPROPER,
			  GEAR_TIME,ROUTE_RUN_NUM,DOOR_OPEN_NUM,OVERMAN_NUM,RETARDER_WORK_NUM,
			  RETARDER_WORK_TIME,BRAKE_NUM,BRAKE_TIME,REVERSE_GEAR_NUM,REVERSE_GEAR_TIME,
			  LOWER_BEAM_NUM,LOWER_BEAM_TIME,HIGH_BEAM_NUM,HIGH_BEAM_TIME,LEFT_TURNING_SIGNAL_NUM,
			  LEFT_TURNING_SIGNAL_TIME,RIGHT_TURNING_SIGNAL_NUM,RIGHT_TURNING_SIGNAL_TIME,OUTLINE_LAMP_NUM,OUTLINE_LAMP_TIME,
			  TRUMPET_NUM,TRUMPET_TIME,FREE_POSITION_NUM,FREE_POSITION_TIME,ABS_WORK_NUM,
			  ABS_WORK_TIME,CLUTCH_NUM,CLUTCH_TIME,FOGLIGHT_NUM,FOGLIGHT_TIME,
			  AIR_CONDITION_NUM,AIR_CONDITION_TIME,HEAD_COLLIDE_NUM,VEHICLE_DEVIATE_NUM
			  ) VALUES (
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?,?,
			  ?,?,?,?,?,?,?,?,?
			  )
		</value>
		<type>string</type>
		<comments>保存驾驶员驾驶明细数据</comments>
		<check></check>
	</item>
	<item name="sql_querySoftAlarmDetail">
		<value>
			SELECT  *
             FROM TH_VEHICLE_ALARM_EVENT t1
            WHERE BEGIN_UTC &gt;= ?
              AND BEGIN_UTC &lt; ?
              AND ALARM_SRC &gt;=2
		</value>
		<type>string</type>
		<comments>查询软报警明细信息</comments>
		<check></check>
	</item>
</sql>